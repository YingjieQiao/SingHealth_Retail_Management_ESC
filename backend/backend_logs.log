2021-04-04 00:17:23,027 INFO logger Thread-1 : backend started
2021-04-04 00:17:24,227 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-04 00:17:24,228 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-04 00:17:24,238 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-04 00:17:24,244 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-04 00:17:24,244 DEBUG matplotlib Thread-1 : interactive is False
2021-04-04 00:17:24,244 DEBUG matplotlib Thread-1 : platform is win32
2021-04-04 00:17:24,245 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'werkzeug.security', 'werkzeug.debug.console', 'flask_cors', 'code', 'flask_cors.decorator', 'codeop', 'flask_cors.core', 'werkzeug.debug.repr', 'six', 'werkzeug.debug.tbtools', 'flask_cors.extension', 'ctypes.util', 'flask_cors.version', 'flask_bcrypt', 'bcrypt', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'werkzeug._reloader', 'pymongo.collection', 'bson', 'bson.binary', 'encodings.idna', 'bson.py3compat', 'stringprep', 'bson.code', 'bson.codec_options', 'bson.dbref', 'bson.son', 'bson.decimal128', 'bson.errors', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'smtplib', 'email.generator', 'email.mime', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.multipart', 'email.mime.text', 'email.mime.nonmultipart', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-04 00:17:24,332 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-04 00:17:24,340 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-04 00:17:24,690 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-04 00:17:24,691 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-04 00:17:24,728 INFO werkzeug Thread-3 : 127.0.0.1 - - [04/Apr/2021 00:17:24] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:17:24,731 INFO werkzeug Thread-4 : 127.0.0.1 - - [04/Apr/2021 00:17:24] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:17:24,734 INFO werkzeug Thread-5 : 127.0.0.1 - - [04/Apr/2021 00:17:24] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:17:25,044 INFO werkzeug Thread-6 : 127.0.0.1 - - [04/Apr/2021 00:17:25] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:17:53,980 INFO logger Thread-1 : backend started
2021-04-04 00:17:54,875 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-04 00:17:54,875 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-04 00:17:54,882 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-04 00:17:54,886 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-04 00:17:54,886 DEBUG matplotlib Thread-1 : interactive is False
2021-04-04 00:17:54,886 DEBUG matplotlib Thread-1 : platform is win32
2021-04-04 00:17:54,886 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'encodings.utf_16_le', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'flask_cors', 'werkzeug.security', 'flask_cors.decorator', 'werkzeug.debug.console', 'flask_cors.core', 'code', 'six', 'codeop', 'flask_cors.extension', 'werkzeug.debug.repr', 'flask_cors.version', 'werkzeug.debug.tbtools', 'flask_bcrypt', 'encodings.idna', 'bcrypt', 'stringprep', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'werkzeug._reloader', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'bson.code', 'bson.codec_options', 'bson.dbref', 'bson.son', 'bson.decimal128', 'bson.errors', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'smtplib', 'email.generator', 'email.mime', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.multipart', 'email.mime.text', 'email.mime.nonmultipart', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-04 00:17:54,956 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-04 00:17:54,962 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-04 00:17:55,243 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-04 00:17:55,244 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-04 00:17:55,613 INFO logger Thread-1 : backend started
2021-04-04 00:17:56,533 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-04 00:17:56,533 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-04 00:17:56,545 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-04 00:17:56,551 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-04 00:17:56,551 DEBUG matplotlib Thread-1 : interactive is False
2021-04-04 00:17:56,552 DEBUG matplotlib Thread-1 : platform is win32
2021-04-04 00:17:56,552 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'flask_cors', 'werkzeug.security', 'flask_cors.decorator', 'werkzeug.debug.console', 'flask_cors.core', 'code', 'six', 'codeop', 'flask_cors.extension', 'werkzeug.debug.repr', 'flask_cors.version', 'werkzeug.debug.tbtools', 'flask_bcrypt', 'ctypes.util', 'bcrypt', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'werkzeug._reloader', 'bson.code', 'bson.codec_options', 'bson.dbref', 'encodings.idna', 'bson.son', 'stringprep', 'bson.decimal128', 'bson.errors', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'smtplib', 'email.generator', 'email.mime', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.multipart', 'email.mime.text', 'email.mime.nonmultipart', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-04 00:17:56,649 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-04 00:17:56,656 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-04 00:17:57,085 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-04 00:17:57,086 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-04 00:18:30,875 INFO werkzeug Thread-3 : 127.0.0.1 - - [04/Apr/2021 00:18:30] "[37mOPTIONS /login HTTP/1.1[0m" 200 -
2021-04-04 00:18:36,551 INFO logger Thread-4 : MihirChhiber is attemping to log in
2021-04-04 00:18:36,558 INFO werkzeug Thread-4 : 127.0.0.1 - - [04/Apr/2021 00:18:36] "[37mPOST /login HTTP/1.1[0m" 200 -
2021-04-04 00:18:56,413 INFO werkzeug Thread-5 : 127.0.0.1 - - [04/Apr/2021 00:18:56] "[37mOPTIONS /login_verified HTTP/1.1[0m" 200 -
2021-04-04 00:18:56,725 INFO logger Thread-6 : MihirChhiber has logged in
2021-04-04 00:18:56,727 INFO werkzeug Thread-6 : 127.0.0.1 - - [04/Apr/2021 00:18:56] "[37mPOST /login_verified HTTP/1.1[0m" 200 -
2021-04-04 00:18:58,482 INFO werkzeug Thread-7 : 127.0.0.1 - - [04/Apr/2021 00:18:58] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:18:58,784 INFO werkzeug Thread-8 : 127.0.0.1 - - [04/Apr/2021 00:18:58] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:18:58,794 INFO werkzeug Thread-9 : 127.0.0.1 - - [04/Apr/2021 00:18:58] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:18:59,107 INFO werkzeug Thread-10 : 127.0.0.1 - - [04/Apr/2021 00:18:59] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:18:59,114 INFO werkzeug Thread-11 : 127.0.0.1 - - [04/Apr/2021 00:18:59] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:18:59,434 INFO werkzeug Thread-12 : 127.0.0.1 - - [04/Apr/2021 00:18:59] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:18:59,446 INFO werkzeug Thread-13 : 127.0.0.1 - - [04/Apr/2021 00:18:59] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:18:59,749 INFO werkzeug Thread-14 : 127.0.0.1 - - [04/Apr/2021 00:18:59] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:18:59,760 INFO werkzeug Thread-15 : 127.0.0.1 - - [04/Apr/2021 00:18:59] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:19:00,061 INFO werkzeug Thread-16 : 127.0.0.1 - - [04/Apr/2021 00:19:00] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:19:00,072 INFO werkzeug Thread-17 : 127.0.0.1 - - [04/Apr/2021 00:19:00] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:19:00,374 INFO werkzeug Thread-18 : 127.0.0.1 - - [04/Apr/2021 00:19:00] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:19:00,386 INFO werkzeug Thread-19 : 127.0.0.1 - - [04/Apr/2021 00:19:00] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:19:00,689 INFO werkzeug Thread-20 : 127.0.0.1 - - [04/Apr/2021 00:19:00] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:19:00,698 INFO werkzeug Thread-21 : 127.0.0.1 - - [04/Apr/2021 00:19:00] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:19:01,003 INFO werkzeug Thread-22 : 127.0.0.1 - - [04/Apr/2021 00:19:01] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:19:01,014 INFO werkzeug Thread-23 : 127.0.0.1 - - [04/Apr/2021 00:19:01] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:19:01,315 INFO werkzeug Thread-24 : 127.0.0.1 - - [04/Apr/2021 00:19:01] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:19:01,326 INFO werkzeug Thread-25 : 127.0.0.1 - - [04/Apr/2021 00:19:01] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:19:01,626 INFO werkzeug Thread-26 : 127.0.0.1 - - [04/Apr/2021 00:19:01] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:19:01,636 INFO werkzeug Thread-27 : 127.0.0.1 - - [04/Apr/2021 00:19:01] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:19:01,937 INFO werkzeug Thread-28 : 127.0.0.1 - - [04/Apr/2021 00:19:01] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:19:01,947 INFO werkzeug Thread-29 : 127.0.0.1 - - [04/Apr/2021 00:19:01] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:19:02,253 INFO werkzeug Thread-30 : 127.0.0.1 - - [04/Apr/2021 00:19:02] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:19:09,140 INFO werkzeug Thread-31 : 127.0.0.1 - - [04/Apr/2021 00:19:09] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:19:09,145 INFO werkzeug Thread-32 : 127.0.0.1 - - [04/Apr/2021 00:19:09] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:19:09,390 INFO werkzeug Thread-33 : 127.0.0.1 - - [04/Apr/2021 00:19:09] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:19:09,452 INFO werkzeug Thread-34 : 127.0.0.1 - - [04/Apr/2021 00:19:09] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:19:09,456 INFO werkzeug Thread-35 : 127.0.0.1 - - [04/Apr/2021 00:19:09] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:19:09,699 INFO werkzeug Thread-36 : 127.0.0.1 - - [04/Apr/2021 00:19:09] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:19:09,764 INFO werkzeug Thread-37 : 127.0.0.1 - - [04/Apr/2021 00:19:09] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:19:09,769 INFO werkzeug Thread-38 : 127.0.0.1 - - [04/Apr/2021 00:19:09] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:32:55,647 INFO werkzeug Thread-40 : 127.0.0.1 - - [04/Apr/2021 00:32:55] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:32:55,651 INFO werkzeug Thread-41 : 127.0.0.1 - - [04/Apr/2021 00:32:55] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:32:55,881 INFO werkzeug Thread-42 : 127.0.0.1 - - [04/Apr/2021 00:32:55] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:32:55,959 INFO werkzeug Thread-43 : 127.0.0.1 - - [04/Apr/2021 00:32:55] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:32:55,963 INFO werkzeug Thread-44 : 127.0.0.1 - - [04/Apr/2021 00:32:55] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:32:56,192 INFO werkzeug Thread-45 : 127.0.0.1 - - [04/Apr/2021 00:32:56] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:32:56,274 INFO werkzeug Thread-46 : 127.0.0.1 - - [04/Apr/2021 00:32:56] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:32:56,280 INFO werkzeug Thread-47 : 127.0.0.1 - - [04/Apr/2021 00:32:56] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:41:04,603 INFO werkzeug Thread-49 : 127.0.0.1 - - [04/Apr/2021 00:41:04] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:41:04,605 INFO werkzeug Thread-50 : 127.0.0.1 - - [04/Apr/2021 00:41:04] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:41:04,608 INFO werkzeug Thread-51 : 127.0.0.1 - - [04/Apr/2021 00:41:04] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-04 00:41:04,846 INFO werkzeug Thread-52 : 127.0.0.1 - - [04/Apr/2021 00:41:04] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:41:04,925 INFO werkzeug Thread-53 : 127.0.0.1 - - [04/Apr/2021 00:41:04] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:41:04,933 INFO werkzeug Thread-54 : 127.0.0.1 - - [04/Apr/2021 00:41:04] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:41:05,162 INFO werkzeug Thread-55 : 127.0.0.1 - - [04/Apr/2021 00:41:05] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:41:05,251 INFO werkzeug Thread-56 : 127.0.0.1 - - [04/Apr/2021 00:41:05] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:41:05,253 INFO werkzeug Thread-57 : 127.0.0.1 - - [04/Apr/2021 00:41:05] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:41:05,480 INFO werkzeug Thread-58 : 127.0.0.1 - - [04/Apr/2021 00:41:05] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:41:05,570 INFO werkzeug Thread-59 : 127.0.0.1 - - [04/Apr/2021 00:41:05] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:41:05,576 INFO werkzeug Thread-60 : 127.0.0.1 - - [04/Apr/2021 00:41:05] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:41:05,789 INFO werkzeug Thread-61 : 127.0.0.1 - - [04/Apr/2021 00:41:05] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:41:05,881 INFO werkzeug Thread-62 : 127.0.0.1 - - [04/Apr/2021 00:41:05] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:41:05,886 INFO werkzeug Thread-63 : 127.0.0.1 - - [04/Apr/2021 00:41:05] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:41:06,102 INFO werkzeug Thread-64 : 127.0.0.1 - - [04/Apr/2021 00:41:06] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:41:06,200 INFO werkzeug Thread-65 : 127.0.0.1 - - [04/Apr/2021 00:41:06] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:41:06,206 INFO werkzeug Thread-66 : 127.0.0.1 - - [04/Apr/2021 00:41:06] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:41:06,419 INFO werkzeug Thread-67 : 127.0.0.1 - - [04/Apr/2021 00:41:06] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:41:06,523 INFO werkzeug Thread-68 : 127.0.0.1 - - [04/Apr/2021 00:41:06] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:41:06,526 INFO werkzeug Thread-69 : 127.0.0.1 - - [04/Apr/2021 00:41:06] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:41:06,737 INFO werkzeug Thread-70 : 127.0.0.1 - - [04/Apr/2021 00:41:06] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:41:06,846 INFO werkzeug Thread-71 : 127.0.0.1 - - [04/Apr/2021 00:41:06] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:41:06,855 INFO werkzeug Thread-72 : 127.0.0.1 - - [04/Apr/2021 00:41:06] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:41:07,053 INFO werkzeug Thread-73 : 127.0.0.1 - - [04/Apr/2021 00:41:07] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:41:07,167 INFO werkzeug Thread-74 : 127.0.0.1 - - [04/Apr/2021 00:41:07] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:41:07,174 INFO werkzeug Thread-75 : 127.0.0.1 - - [04/Apr/2021 00:41:07] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:41:07,373 INFO werkzeug Thread-76 : 127.0.0.1 - - [04/Apr/2021 00:41:07] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:41:07,487 INFO werkzeug Thread-77 : 127.0.0.1 - - [04/Apr/2021 00:41:07] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:41:07,495 INFO werkzeug Thread-78 : 127.0.0.1 - - [04/Apr/2021 00:41:07] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:41:07,691 INFO werkzeug Thread-80 : 127.0.0.1 - - [04/Apr/2021 00:41:07] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:41:07,712 INFO werkzeug Thread-79 : 127.0.0.1 - - [04/Apr/2021 00:41:07] "[35m[1mGET /tenant_exists HTTP/1.1[0m" 500 -
2021-04-04 00:41:07,808 INFO werkzeug Thread-81 : 127.0.0.1 - - [04/Apr/2021 00:41:07] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:41:07,809 INFO werkzeug Thread-82 : 127.0.0.1 - - [04/Apr/2021 00:41:07] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:41:08,008 INFO werkzeug Thread-83 : 127.0.0.1 - - [04/Apr/2021 00:41:08] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:41:08,133 INFO werkzeug Thread-84 : 127.0.0.1 - - [04/Apr/2021 00:41:08] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:41:08,138 INFO werkzeug Thread-85 : 127.0.0.1 - - [04/Apr/2021 00:41:08] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:41:08,322 INFO werkzeug Thread-86 : 127.0.0.1 - - [04/Apr/2021 00:41:08] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:41:08,448 INFO werkzeug Thread-87 : 127.0.0.1 - - [04/Apr/2021 00:41:08] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:41:08,453 INFO werkzeug Thread-88 : 127.0.0.1 - - [04/Apr/2021 00:41:08] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:41:08,634 INFO werkzeug Thread-89 : 127.0.0.1 - - [04/Apr/2021 00:41:08] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:41:08,758 INFO werkzeug Thread-90 : 127.0.0.1 - - [04/Apr/2021 00:41:08] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:41:08,762 INFO werkzeug Thread-91 : 127.0.0.1 - - [04/Apr/2021 00:41:08] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:41:08,945 INFO werkzeug Thread-92 : 127.0.0.1 - - [04/Apr/2021 00:41:08] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:41:09,070 INFO werkzeug Thread-93 : 127.0.0.1 - - [04/Apr/2021 00:41:09] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:41:09,071 INFO werkzeug Thread-94 : 127.0.0.1 - - [04/Apr/2021 00:41:09] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:41:09,262 INFO werkzeug Thread-95 : 127.0.0.1 - - [04/Apr/2021 00:41:09] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:41:09,388 INFO werkzeug Thread-96 : 127.0.0.1 - - [04/Apr/2021 00:41:09] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-04 00:41:09,392 INFO werkzeug Thread-97 : 127.0.0.1 - - [04/Apr/2021 00:41:09] "[37mGET /check_if_tenant HTTP/1.1[0m" 200 -
2021-04-04 00:41:09,577 INFO werkzeug Thread-98 : 127.0.0.1 - - [04/Apr/2021 00:41:09] "[37mGET /check_if_staff HTTP/1.1[0m" 200 -
2021-04-05 01:00:08,759 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\__init__.py', reloading
2021-04-05 01:00:10,309 INFO werkzeug MainThread :  * Restarting with stat
2021-04-05 01:56:23,616 INFO werkzeug MainThread :  * Restarting with stat
2021-04-05 01:56:30,698 INFO werkzeug MainThread :  * Restarting with stat
2021-04-05 02:15:55,300 INFO werkzeug MainThread :  * Restarting with stat
2021-04-05 02:17:21,579 INFO werkzeug MainThread :  * Restarting with stat
2021-04-05 02:18:18,186 INFO werkzeug MainThread :  * Restarting with stat
2021-04-05 02:18:39,871 INFO werkzeug MainThread :  * Restarting with stat
2021-04-05 02:29:00,806 INFO werkzeug MainThread :  * Restarting with stat
2021-04-05 02:29:10,795 INFO werkzeug MainThread :  * Restarting with stat
2021-04-05 12:56:19,412 INFO werkzeug MainThread :  * Restarting with stat
2021-04-05 13:02:04,161 INFO werkzeug MainThread :  * Restarting with stat
2021-04-08 23:00:01,810 INFO logger Thread-1 : backend started
2021-04-08 23:00:04,459 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-08 23:00:04,460 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-08 23:00:04,484 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-08 23:00:04,497 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-08 23:00:04,498 DEBUG matplotlib Thread-1 : interactive is False
2021-04-08 23:00:04,499 DEBUG matplotlib Thread-1 : platform is win32
2021-04-08 23:00:04,500 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'werkzeug.security', 'werkzeug.debug.console', 'code', 'flask_cors', 'codeop', 'flask_cors.decorator', 'werkzeug.debug.repr', 'flask_cors.core', 'werkzeug.debug.tbtools', 'six', 'ctypes.util', 'flask_cors.extension', 'flask_cors.version', 'flask_bcrypt', 'bcrypt', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'werkzeug._reloader', 'mongoengine', 'mongoengine.connection', 'pymongo', 'encodings.idna', 'pymongo.collection', 'stringprep', 'bson', 'bson.binary', 'bson.py3compat', 'bson.code', 'bson.codec_options', 'bson.dbref', 'bson.son', 'bson.decimal128', 'bson.errors', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-08 23:00:04,709 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-08 23:00:04,726 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-08 23:00:05,529 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-08 23:00:05,531 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-08 23:09:06,163 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-08 23:09:11,070 INFO logger Thread-1 : backend started
2021-04-08 23:09:13,218 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-08 23:09:13,218 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-08 23:09:13,234 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-08 23:09:13,242 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-08 23:09:13,242 DEBUG matplotlib Thread-1 : interactive is False
2021-04-08 23:09:13,242 DEBUG matplotlib Thread-1 : platform is win32
2021-04-08 23:09:13,243 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'flask_cors', 'werkzeug.security', 'flask_cors.decorator', 'werkzeug.debug.console', 'flask_cors.core', 'code', 'six', 'codeop', 'flask_cors.extension', 'werkzeug.debug.repr', 'flask_cors.version', 'werkzeug.debug.tbtools', 'flask_bcrypt', 'ctypes.util', 'bcrypt', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'werkzeug._reloader', 'bson.py3compat', 'bson.code', 'bson.codec_options', 'encodings.idna', 'bson.dbref', 'bson.son', 'stringprep', 'bson.decimal128', 'bson.errors', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-08 23:09:13,412 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-08 23:09:13,428 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-08 23:09:14,125 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-08 23:09:14,127 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-08 23:33:18,174 INFO logger Thread-1 : backend started
2021-04-08 23:33:20,611 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-08 23:33:20,612 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-08 23:33:20,626 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-08 23:33:20,641 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-08 23:33:20,641 DEBUG matplotlib Thread-1 : interactive is False
2021-04-08 23:33:20,642 DEBUG matplotlib Thread-1 : platform is win32
2021-04-08 23:33:20,642 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'werkzeug.security', 'werkzeug.debug.console', 'flask_cors', 'code', 'flask_cors.decorator', 'codeop', 'flask_cors.core', 'werkzeug.debug.repr', 'six', 'werkzeug.debug.tbtools', 'flask_cors.extension', 'ctypes.util', 'flask_cors.version', 'flask_bcrypt', 'bcrypt', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'werkzeug._reloader', 'pymongo.collection', 'bson', 'bson.binary', 'encodings.idna', 'bson.py3compat', 'stringprep', 'bson.code', 'bson.codec_options', 'bson.dbref', 'bson.son', 'bson.decimal128', 'bson.errors', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-08 23:33:20,799 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-08 23:33:20,816 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-08 23:33:21,459 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-08 23:33:21,461 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-08 23:34:38,535 INFO werkzeug Thread-3 : 127.0.0.1 - - [08/Apr/2021 23:34:38] "[37mGET //staff_list HTTP/1.1[0m" 200 -
2021-04-08 23:35:24,920 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-08 23:35:29,856 INFO logger Thread-1 : backend started
2021-04-08 23:35:32,511 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-08 23:35:32,512 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-08 23:35:32,541 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-08 23:35:32,557 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-08 23:35:32,558 DEBUG matplotlib Thread-1 : interactive is False
2021-04-08 23:35:32,559 DEBUG matplotlib Thread-1 : platform is win32
2021-04-08 23:35:32,560 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'flask_cors', 'flask_cors.decorator', 'werkzeug.security', 'flask_cors.core', 'werkzeug.debug.console', 'six', 'code', 'flask_cors.extension', 'flask_cors.version', 'codeop', 'flask_bcrypt', 'werkzeug.debug.repr', 'bcrypt', 'werkzeug.debug.tbtools', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'ctypes.util', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'bson.code', 'bson.codec_options', 'bson.dbref', 'bson.son', 'bson.decimal128', 'werkzeug._reloader', 'bson.errors', 'bson.int64', 'bson.max_key', 'encodings.idna', 'bson.min_key', 'bson.objectid', 'stringprep', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-08 23:35:32,772 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-08 23:35:32,797 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-08 23:35:33,581 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-08 23:35:33,583 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-08 23:35:33,781 INFO werkzeug Thread-3 : 127.0.0.1 - - [08/Apr/2021 23:35:33] "[35m[1mGET //staff_list HTTP/1.1[0m" 500 -
2021-04-08 23:35:33,877 INFO werkzeug Thread-4 : 127.0.0.1 - - [08/Apr/2021 23:35:33] "[37mGET //staff_list?__debugger__=yes&cmd=resource&f=style.css HTTP/1.1[0m" 200 -
2021-04-08 23:35:33,883 INFO werkzeug Thread-5 : 127.0.0.1 - - [08/Apr/2021 23:35:33] "[37mGET //staff_list?__debugger__=yes&cmd=resource&f=jquery.js HTTP/1.1[0m" 200 -
2021-04-08 23:35:34,186 INFO werkzeug Thread-6 : 127.0.0.1 - - [08/Apr/2021 23:35:34] "[37mGET //staff_list?__debugger__=yes&cmd=resource&f=debugger.js HTTP/1.1[0m" 200 -
2021-04-08 23:35:34,677 INFO werkzeug Thread-7 : 127.0.0.1 - - [08/Apr/2021 23:35:34] "[37mGET //staff_list?__debugger__=yes&cmd=resource&f=ubuntu.ttf HTTP/1.1[0m" 200 -
2021-04-08 23:35:34,802 INFO werkzeug Thread-8 : 127.0.0.1 - - [08/Apr/2021 23:35:34] "[37mGET //staff_list?__debugger__=yes&cmd=resource&f=console.png HTTP/1.1[0m" 200 -
2021-04-08 23:35:35,098 INFO werkzeug Thread-9 : 127.0.0.1 - - [08/Apr/2021 23:35:35] "[37mGET //staff_list?__debugger__=yes&cmd=resource&f=console.png HTTP/1.1[0m" 200 -
2021-04-08 23:35:36,656 INFO werkzeug Thread-10 : 127.0.0.1 - - [08/Apr/2021 23:35:36] "[35m[1mGET /staff_list HTTP/1.1[0m" 500 -
2021-04-08 23:35:36,731 INFO werkzeug Thread-11 : 127.0.0.1 - - [08/Apr/2021 23:35:36] "[37mGET /staff_list?__debugger__=yes&cmd=resource&f=style.css HTTP/1.1[0m" 200 -
2021-04-08 23:35:36,869 INFO werkzeug Thread-12 : 127.0.0.1 - - [08/Apr/2021 23:35:36] "[37mGET /staff_list?__debugger__=yes&cmd=resource&f=jquery.js HTTP/1.1[0m" 200 -
2021-04-08 23:35:37,037 INFO werkzeug Thread-13 : 127.0.0.1 - - [08/Apr/2021 23:35:37] "[37mGET /staff_list?__debugger__=yes&cmd=resource&f=debugger.js HTTP/1.1[0m" 200 -
2021-04-08 23:35:37,410 INFO werkzeug Thread-14 : 127.0.0.1 - - [08/Apr/2021 23:35:37] "[37mGET /staff_list?__debugger__=yes&cmd=resource&f=ubuntu.ttf HTTP/1.1[0m" 200 -
2021-04-08 23:35:37,513 INFO werkzeug Thread-15 : 127.0.0.1 - - [08/Apr/2021 23:35:37] "[37mGET /staff_list?__debugger__=yes&cmd=resource&f=console.png HTTP/1.1[0m" 200 -
2021-04-08 23:35:37,753 INFO werkzeug Thread-16 : 127.0.0.1 - - [08/Apr/2021 23:35:37] "[37mGET /staff_list?__debugger__=yes&cmd=resource&f=console.png HTTP/1.1[0m" 200 -
2021-04-08 23:35:48,799 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-08 23:35:53,767 INFO logger Thread-1 : backend started
2021-04-08 23:35:56,023 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-08 23:35:56,023 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-08 23:35:56,041 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-08 23:35:56,051 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-08 23:35:56,051 DEBUG matplotlib Thread-1 : interactive is False
2021-04-08 23:35:56,052 DEBUG matplotlib Thread-1 : platform is win32
2021-04-08 23:35:56,052 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'flask_cors', 'werkzeug.security', 'flask_cors.decorator', 'werkzeug.debug.console', 'flask_cors.core', 'code', 'six', 'codeop', 'flask_cors.extension', 'werkzeug.debug.repr', 'flask_cors.version', 'werkzeug.debug.tbtools', 'flask_bcrypt', 'ctypes.util', 'bcrypt', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'bson.code', 'werkzeug._reloader', 'bson.codec_options', 'bson.dbref', 'bson.son', 'encodings.idna', 'bson.decimal128', 'stringprep', 'bson.errors', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-08 23:35:56,220 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-08 23:35:56,235 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-08 23:35:57,059 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-08 23:35:57,062 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-08 23:35:57,207 INFO werkzeug Thread-3 : 127.0.0.1 - - [08/Apr/2021 23:35:57] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-08 23:37:11,738 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-08 23:37:16,788 INFO logger Thread-1 : backend started
2021-04-08 23:37:19,370 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-08 23:37:19,370 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-08 23:37:19,381 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-08 23:37:19,386 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-08 23:37:19,387 DEBUG matplotlib Thread-1 : interactive is False
2021-04-08 23:37:19,387 DEBUG matplotlib Thread-1 : platform is win32
2021-04-08 23:37:19,387 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'flask_cors', 'werkzeug.security', 'flask_cors.decorator', 'werkzeug.debug.console', 'flask_cors.core', 'code', 'six', 'codeop', 'flask_cors.extension', 'werkzeug.debug.repr', 'flask_cors.version', 'werkzeug.debug.tbtools', 'flask_bcrypt', 'ctypes.util', 'bcrypt', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'werkzeug._reloader', 'bson.code', 'bson.codec_options', 'bson.dbref', 'encodings.idna', 'bson.son', 'stringprep', 'bson.decimal128', 'bson.errors', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-08 23:37:19,537 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-08 23:37:19,546 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-08 23:37:20,067 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-08 23:37:20,067 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-08 23:37:20,163 INFO werkzeug Thread-3 : 127.0.0.1 - - [08/Apr/2021 23:37:20] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-08 23:38:07,347 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-08 23:38:12,150 INFO logger Thread-1 : backend started
2021-04-08 23:38:14,203 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-08 23:38:14,203 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-08 23:38:14,217 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-08 23:38:14,226 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-08 23:38:14,227 DEBUG matplotlib Thread-1 : interactive is False
2021-04-08 23:38:14,227 DEBUG matplotlib Thread-1 : platform is win32
2021-04-08 23:38:14,228 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'flask_cors', 'werkzeug.security', 'flask_cors.decorator', 'werkzeug.debug.console', 'flask_cors.core', 'code', 'six', 'codeop', 'flask_cors.extension', 'flask_cors.version', 'werkzeug.debug.repr', 'flask_bcrypt', 'werkzeug.debug.tbtools', 'bcrypt', 'ctypes.util', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'bson.code', 'bson.codec_options', 'bson.dbref', 'werkzeug._reloader', 'bson.son', 'bson.decimal128', 'bson.errors', 'encodings.idna', 'bson.int64', 'bson.max_key', 'stringprep', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-08 23:38:14,344 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-08 23:38:14,352 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-08 23:38:14,902 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-08 23:38:14,903 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-08 23:38:15,010 INFO werkzeug Thread-3 : 127.0.0.1 - - [08/Apr/2021 23:38:15] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-08 23:39:27,143 INFO werkzeug Thread-6 : 127.0.0.1 - - [08/Apr/2021 23:39:27] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-08 23:39:33,697 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-08 23:39:38,610 INFO logger Thread-1 : backend started
2021-04-08 23:39:40,998 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-08 23:39:40,999 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-08 23:39:41,024 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-08 23:39:41,034 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-08 23:39:41,034 DEBUG matplotlib Thread-1 : interactive is False
2021-04-08 23:39:41,035 DEBUG matplotlib Thread-1 : platform is win32
2021-04-08 23:39:41,035 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'flask_cors', 'werkzeug.security', 'flask_cors.decorator', 'werkzeug.debug.console', 'flask_cors.core', 'code', 'six', 'codeop', 'flask_cors.extension', 'werkzeug.debug.repr', 'flask_cors.version', 'werkzeug.debug.tbtools', 'flask_bcrypt', 'ctypes.util', 'bcrypt', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'werkzeug._reloader', 'bson.code', 'bson.codec_options', 'bson.dbref', 'encodings.idna', 'bson.son', 'bson.decimal128', 'stringprep', 'bson.errors', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-08 23:39:41,220 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-08 23:39:41,236 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-08 23:39:41,979 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-08 23:39:41,980 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-08 23:39:42,088 INFO werkzeug Thread-3 : 127.0.0.1 - - [08/Apr/2021 23:39:42] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-08 23:47:24,664 INFO werkzeug Thread-6 : 127.0.0.1 - - [08/Apr/2021 23:47:24] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-08 23:49:24,087 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-08 23:49:26,018 INFO logger Thread-1 : backend started
2021-04-08 23:49:26,646 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-08 23:49:26,647 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-08 23:49:26,651 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-08 23:49:26,653 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-08 23:49:26,653 DEBUG matplotlib Thread-1 : interactive is False
2021-04-08 23:49:26,654 DEBUG matplotlib Thread-1 : platform is win32
2021-04-08 23:49:26,654 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'flask_cors', 'werkzeug.security', 'flask_cors.decorator', 'werkzeug.debug.console', 'flask_cors.core', 'code', 'six', 'codeop', 'flask_cors.extension', 'werkzeug.debug.repr', 'flask_cors.version', 'werkzeug.debug.tbtools', 'flask_bcrypt', 'ctypes.util', 'bcrypt', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'bson.code', 'bson.codec_options', 'bson.dbref', 'werkzeug._reloader', 'bson.son', 'bson.decimal128', 'encodings.idna', 'bson.errors', 'bson.int64', 'stringprep', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-08 23:49:26,702 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-08 23:49:26,707 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-08 23:49:26,911 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-08 23:49:26,912 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-08 23:49:26,954 INFO werkzeug Thread-3 : 127.0.0.1 - - [08/Apr/2021 23:49:26] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 01:37:35,244 INFO logger Thread-1 : backend started
2021-04-09 01:37:36,116 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 01:37:36,116 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 01:37:36,121 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-09 01:37:36,125 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-09 01:37:36,125 DEBUG matplotlib Thread-1 : interactive is False
2021-04-09 01:37:36,126 DEBUG matplotlib Thread-1 : platform is win32
2021-04-09 01:37:36,126 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'werkzeug.security', 'werkzeug.debug.console', 'flask_cors', 'code', 'flask_cors.decorator', 'codeop', 'flask_cors.core', 'six', 'werkzeug.debug.repr', 'flask_cors.extension', 'werkzeug.debug.tbtools', 'flask_cors.version', 'flask_bcrypt', 'ctypes.util', 'bcrypt', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'werkzeug._reloader', 'bson.binary', 'bson.py3compat', 'bson.code', 'encodings.idna', 'bson.codec_options', 'bson.dbref', 'stringprep', 'bson.son', 'bson.decimal128', 'bson.errors', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 01:37:36,180 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-09 01:37:36,185 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-09 01:37:36,442 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-09 01:37:36,443 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-09 01:38:06,786 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 01:38:06] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 01:38:06,804 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 01:38:06] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 01:38:11,598 INFO werkzeug Thread-5 : 127.0.0.1 - - [09/Apr/2021 01:38:11] "[37mOPTIONS /login HTTP/1.1[0m" 200 -
2021-04-09 01:38:15,053 INFO logger Thread-6 : MihirChhiber is attemping to log in
2021-04-09 01:38:15,055 INFO werkzeug Thread-6 : 127.0.0.1 - - [09/Apr/2021 01:38:15] "[37mPOST /login HTTP/1.1[0m" 200 -
2021-04-09 01:38:16,286 INFO werkzeug Thread-7 : 127.0.0.1 - - [09/Apr/2021 01:38:16] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 01:38:17,888 INFO werkzeug Thread-8 : 127.0.0.1 - - [09/Apr/2021 01:38:17] "[37mOPTIONS /login_verified HTTP/1.1[0m" 200 -
2021-04-09 01:38:18,166 INFO werkzeug Thread-9 : 127.0.0.1 - - [09/Apr/2021 01:38:18] "[35m[1mPOST /login_verified HTTP/1.1[0m" 500 -
2021-04-09 01:38:29,640 INFO werkzeug Thread-10 : 127.0.0.1 - - [09/Apr/2021 01:38:29] "[37mOPTIONS /login_verified HTTP/1.1[0m" 200 -
2021-04-09 01:38:29,976 INFO werkzeug Thread-11 : 127.0.0.1 - - [09/Apr/2021 01:38:29] "[35m[1mPOST /login_verified HTTP/1.1[0m" 500 -
2021-04-09 01:38:52,268 INFO werkzeug Thread-12 : 127.0.0.1 - - [09/Apr/2021 01:38:52] "[37mOPTIONS /login_verified HTTP/1.1[0m" 200 -
2021-04-09 01:38:52,586 INFO werkzeug Thread-13 : 127.0.0.1 - - [09/Apr/2021 01:38:52] "[35m[1mPOST /login_verified HTTP/1.1[0m" 500 -
2021-04-09 01:40:57,199 INFO werkzeug Thread-15 : 127.0.0.1 - - [09/Apr/2021 01:40:57] "[37mOPTIONS /login_verified HTTP/1.1[0m" 200 -
2021-04-09 01:40:57,464 INFO werkzeug Thread-16 : 127.0.0.1 - - [09/Apr/2021 01:40:57] "[35m[1mPOST /login_verified HTTP/1.1[0m" 500 -
2021-04-09 01:40:59,664 INFO werkzeug Thread-17 : 127.0.0.1 - - [09/Apr/2021 01:40:59] "[35m[1mPOST /login_verified HTTP/1.1[0m" 500 -
2021-04-09 01:42:43,106 INFO werkzeug Thread-18 : 127.0.0.1 - - [09/Apr/2021 01:42:43] "[37mOPTIONS /login_verified HTTP/1.1[0m" 200 -
2021-04-09 01:42:43,371 INFO werkzeug Thread-19 : 127.0.0.1 - - [09/Apr/2021 01:42:43] "[35m[1mPOST /login_verified HTTP/1.1[0m" 500 -
2021-04-09 01:42:43,808 INFO werkzeug Thread-20 : 127.0.0.1 - - [09/Apr/2021 01:42:43] "[35m[1mPOST /login_verified HTTP/1.1[0m" 500 -
2021-04-09 01:42:46,596 INFO werkzeug Thread-21 : 127.0.0.1 - - [09/Apr/2021 01:42:46] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 01:42:47,003 INFO werkzeug Thread-22 : 127.0.0.1 - - [09/Apr/2021 01:42:47] "[35m[1mPOST /login_verified HTTP/1.1[0m" 500 -
2021-04-09 01:42:47,993 INFO werkzeug Thread-23 : 127.0.0.1 - - [09/Apr/2021 01:42:47] "[35m[1mPOST /login_verified HTTP/1.1[0m" 500 -
2021-04-09 01:42:48,173 INFO werkzeug Thread-24 : 127.0.0.1 - - [09/Apr/2021 01:42:48] "[35m[1mPOST /login_verified HTTP/1.1[0m" 500 -
2021-04-09 01:42:48,232 INFO werkzeug Thread-25 : 127.0.0.1 - - [09/Apr/2021 01:42:48] "[35m[1mPOST /login_verified HTTP/1.1[0m" 500 -
2021-04-09 01:42:48,380 INFO werkzeug Thread-26 : 127.0.0.1 - - [09/Apr/2021 01:42:48] "[37mOPTIONS /login_verified HTTP/1.1[0m" 200 -
2021-04-09 01:42:48,694 INFO werkzeug Thread-27 : 127.0.0.1 - - [09/Apr/2021 01:42:48] "[35m[1mPOST /login_verified HTTP/1.1[0m" 500 -
2021-04-09 01:42:48,883 INFO werkzeug Thread-28 : 127.0.0.1 - - [09/Apr/2021 01:42:48] "[35m[1mPOST /login_verified HTTP/1.1[0m" 500 -
2021-04-09 01:43:39,056 INFO werkzeug Thread-29 : 127.0.0.1 - - [09/Apr/2021 01:43:39] "[37mGET /staff_get_photo_notification HTTP/1.1[0m" 200 -
2021-04-09 01:43:43,290 INFO werkzeug Thread-31 : 127.0.0.1 - - [09/Apr/2021 01:43:43] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 01:43:49,047 INFO werkzeug Thread-32 : 127.0.0.1 - - [09/Apr/2021 01:43:49] "[37mOPTIONS /report_timeframe HTTP/1.1[0m" 200 -
2021-04-09 01:43:49,365 INFO werkzeug Thread-33 : 127.0.0.1 - - [09/Apr/2021 01:43:49] "[37mPOST /report_timeframe HTTP/1.1[0m" 200 -
2021-04-09 01:43:53,020 INFO werkzeug Thread-34 : 127.0.0.1 - - [09/Apr/2021 01:43:53] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 01:43:53,324 INFO werkzeug Thread-35 : 127.0.0.1 - - [09/Apr/2021 01:43:53] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 01:43:57,106 INFO werkzeug Thread-36 : 127.0.0.1 - - [09/Apr/2021 01:43:57] "[37mOPTIONS /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 01:43:57,109 INFO werkzeug Thread-37 : 127.0.0.1 - - [09/Apr/2021 01:43:57] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 01:43:57,112 INFO werkzeug Thread-38 : 127.0.0.1 - - [09/Apr/2021 01:43:57] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 01:43:57,117 INFO werkzeug Thread-39 : 127.0.0.1 - - [09/Apr/2021 01:43:57] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 01:43:57,370 DEBUG matplotlib.pyplot Thread-40 : Loaded backend agg version unknown.
2021-04-09 01:43:57,392 DEBUG matplotlib.font_manager Thread-40 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-04-09 01:43:57,392 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,392 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,392 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,392 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,392 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,392 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,392 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,393 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,393 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,393 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 01:43:57,393 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,393 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 01:43:57,393 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,393 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,393 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,393 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,393 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,393 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,393 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 01:43:57,393 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 01:43:57,393 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 01:43:57,394 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,394 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,394 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 01:43:57,394 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,394 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,394 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,394 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,394 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,394 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,394 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,394 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,394 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,394 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,394 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,394 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,394 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,395 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,395 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 01:43:57,395 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,395 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,395 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 01:43:57,395 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 01:43:57,395 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,395 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,395 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,395 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,395 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,395 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,395 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,395 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,395 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,396 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,396 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,396 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,396 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 01:43:57,396 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,396 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,396 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,396 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,396 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 01:43:57,396 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,396 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,396 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 01:43:57,396 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,396 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,396 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,396 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 01:43:57,397 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,397 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 01:43:57,397 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,397 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,397 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 01:43:57,397 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,397 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 01:43:57,397 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,397 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,397 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 01:43:57,397 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,397 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,397 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,397 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,398 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,398 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,398 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 01:43:57,398 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,398 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,398 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,398 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,398 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 01:43:57,398 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,398 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,398 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,398 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,398 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,398 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 01:43:57,398 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,399 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,399 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,399 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,399 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,399 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,399 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 01:43:57,399 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 01:43:57,399 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,399 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 01:43:57,399 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 01:43:57,399 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,399 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,399 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,399 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,399 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,399 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,400 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,400 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,400 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,400 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 01:43:57,400 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,400 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,400 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,400 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,400 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,400 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,400 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 01:43:57,400 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,400 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,400 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,400 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,400 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,401 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 01:43:57,401 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,401 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,401 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,401 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 01:43:57,401 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,401 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 01:43:57,401 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,401 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,401 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,401 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,401 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,401 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 01:43:57,401 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,401 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 01:43:57,402 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,402 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,402 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,402 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,402 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 01:43:57,402 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,402 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 01:43:57,402 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,402 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 01:43:57,402 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,402 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,402 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 01:43:57,402 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,402 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,402 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,402 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,403 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 01:43:57,403 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,403 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,403 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 01:43:57,403 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,403 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 01:43:57,403 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,403 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,403 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 01:43:57,403 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,403 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,403 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,403 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,403 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,403 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,404 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,404 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,404 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,404 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,404 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 01:43:57,404 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 01:43:57,404 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,404 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,404 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,404 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,404 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,404 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,404 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,404 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 01:43:57,404 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,404 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,405 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,405 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,405 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 01:43:57,405 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,405 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,405 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 01:43:57,405 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,405 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,405 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,405 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,405 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,405 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,405 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,405 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 01:43:57,405 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,405 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,406 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,406 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,406 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,406 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,406 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,406 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,406 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,406 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,406 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,406 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,406 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,406 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,406 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,406 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 01:43:57,406 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,406 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,407 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,407 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,407 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,407 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 01:43:57,407 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,407 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,407 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,407 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,407 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,407 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 01:43:57,407 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,407 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,407 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,407 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,407 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,407 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,408 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,408 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,408 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 01:43:57,408 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,408 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 01:43:57,408 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 01:43:57,408 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 01:43:57,408 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,408 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 01:43:57,408 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,408 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,408 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,408 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,408 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,408 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 01:43:57,409 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,409 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,409 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,409 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,409 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,409 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,409 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,409 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,409 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,409 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,409 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,409 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,409 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,409 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,409 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,409 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,410 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,410 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,410 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,410 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 01:43:57,410 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,410 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,410 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,410 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,410 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 01:43:57,410 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,410 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,410 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,410 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,410 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,410 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,410 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 01:43:57,411 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,411 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,411 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,411 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,411 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,411 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 01:43:57,411 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,411 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,411 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 01:43:57,411 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 01:43:57,411 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,411 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,411 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,411 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,411 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,411 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,412 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,412 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,412 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 01:43:57,412 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,412 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,412 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,412 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,412 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,412 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,412 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,412 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,412 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,412 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,412 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 01:43:57,413 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,413 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 01:43:57,413 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,413 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,413 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,413 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,413 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,413 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,413 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,413 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,413 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,413 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 01:43:57,413 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,413 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,414 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,414 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 01:43:57,414 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,414 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,414 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,414 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,414 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 01:43:57,414 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,414 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,414 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 01:43:57,414 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 01:43:57,414 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 01:43:57,414 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 01:43:57,414 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 01:43:57,414 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,415 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,415 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,415 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,415 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,415 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 01:43:57,415 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,415 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,415 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,415 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,415 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,415 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,416 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 01:43:57,416 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,416 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,416 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,416 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,416 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,416 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 01:43:57,416 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,416 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,416 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 01:43:57,416 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 01:43:57,416 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,416 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,417 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,417 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,417 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 01:43:57,417 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 01:43:57,417 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,417 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,417 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 01:43:57,417 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,417 DEBUG matplotlib.font_manager Thread-40 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 01:43:57,421 DEBUG matplotlib.font_manager Thread-40 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-04-09 01:43:57,421 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,421 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,421 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,421 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,421 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,421 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,422 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,422 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,422 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,422 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 01:43:57,422 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,422 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 01:43:57,422 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,422 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,422 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,422 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,422 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,422 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,422 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 01:43:57,422 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 01:43:57,422 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 01:43:57,422 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,423 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,423 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 01:43:57,423 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,423 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,423 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,423 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,423 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,423 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,423 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,423 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,423 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,423 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,423 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,423 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,423 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,424 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,424 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 01:43:57,424 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,424 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,424 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 01:43:57,424 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 01:43:57,424 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,424 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,424 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,424 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,424 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,424 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,424 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,424 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,424 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,424 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,425 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,425 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,425 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 01:43:57,425 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,425 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,425 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,425 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,425 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 01:43:57,425 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,425 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,425 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 01:43:57,425 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,425 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,425 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,425 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 01:43:57,425 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,425 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 01:43:57,426 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,426 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,426 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 01:43:57,426 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,426 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 01:43:57,426 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,426 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,426 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 01:43:57,426 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,426 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,426 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,426 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,426 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,426 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,426 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 01:43:57,426 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,427 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,427 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,427 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,427 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 01:43:57,427 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,427 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,427 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,427 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,427 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,427 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 01:43:57,427 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,427 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,427 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,427 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,427 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,427 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,428 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 01:43:57,428 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 01:43:57,428 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,428 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 01:43:57,428 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 01:43:57,428 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,428 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,428 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,428 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,428 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,428 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,428 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,428 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,428 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,428 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 01:43:57,428 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,429 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,429 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,429 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,429 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,429 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,429 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 01:43:57,429 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,429 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,429 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,429 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,429 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,429 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 01:43:57,429 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,429 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,429 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,429 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 01:43:57,430 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,430 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 01:43:57,430 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,430 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,430 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,430 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,430 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,430 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 01:43:57,430 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,430 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 01:43:57,430 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,430 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,430 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,430 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,430 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 01:43:57,431 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,431 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 01:43:57,431 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,431 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 01:43:57,431 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,431 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,431 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 01:43:57,431 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,431 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,431 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,431 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,431 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 01:43:57,431 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,431 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,431 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 01:43:57,431 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,431 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 01:43:57,432 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,432 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,432 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 01:43:57,432 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,432 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,432 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,432 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,432 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,432 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,432 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,432 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,432 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,432 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,432 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 01:43:57,432 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 01:43:57,433 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,433 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,433 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,433 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,433 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,433 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,433 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,433 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 01:43:57,433 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,433 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,433 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,433 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,433 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 01:43:57,433 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,433 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,433 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 01:43:57,434 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,434 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,434 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,434 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,434 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,434 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,434 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,434 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 01:43:57,434 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,434 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,434 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,434 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,434 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,434 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,434 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,434 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,434 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,435 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,435 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,435 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,435 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,435 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,435 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,435 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 01:43:57,435 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,435 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,435 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,435 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,435 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,435 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 01:43:57,435 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,435 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,435 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,436 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,436 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,436 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 01:43:57,436 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,436 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,436 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,436 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,436 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,436 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,436 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,436 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,436 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 01:43:57,436 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,436 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 01:43:57,436 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 01:43:57,436 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 01:43:57,437 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,437 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 01:43:57,437 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,437 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,437 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,437 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,437 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,437 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 01:43:57,437 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,437 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,437 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,437 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,437 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,437 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,437 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,437 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,438 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,438 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,438 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,438 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,438 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,438 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,438 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,438 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,438 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,438 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,438 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,438 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 01:43:57,438 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,438 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,438 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,438 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,439 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 01:43:57,439 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,439 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,439 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,439 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,439 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,439 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,439 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 01:43:57,439 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,439 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,439 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,439 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,439 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,439 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 01:43:57,439 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,439 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,439 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 01:43:57,440 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 01:43:57,440 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,440 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,440 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,440 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,440 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,440 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,440 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,440 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,440 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 01:43:57,440 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,440 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,440 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,440 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,440 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,440 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,441 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,441 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,441 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,441 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,441 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 01:43:57,441 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,441 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 01:43:57,441 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,441 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,441 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,441 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,441 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,441 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,441 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,441 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,441 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,442 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 01:43:57,442 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,442 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,442 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,442 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 01:43:57,442 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,442 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,442 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,442 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,442 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 01:43:57,442 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,442 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,442 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 01:43:57,442 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 01:43:57,442 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 01:43:57,442 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 01:43:57,443 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 01:43:57,443 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,443 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,443 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,443 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,443 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,443 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 01:43:57,443 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,443 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,443 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,443 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,443 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,443 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,443 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 01:43:57,443 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,444 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,444 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,444 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,444 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,444 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 01:43:57,444 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,444 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 01:43:57,444 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 01:43:57,444 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 01:43:57,444 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,444 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,444 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,444 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 01:43:57,444 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 01:43:57,444 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 01:43:57,444 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 01:43:57,445 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,445 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 01:43:57,445 DEBUG matplotlib.font_manager Thread-40 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 01:43:57,445 DEBUG matplotlib.font_manager Thread-40 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 01:43:57,562 DEBUG matplotlib.pyplot Thread-40 : Loaded backend agg version unknown.
2021-04-09 01:43:57,693 DEBUG matplotlib.pyplot Thread-40 : Loaded backend agg version unknown.
2021-04-09 01:43:57,845 DEBUG matplotlib.pyplot Thread-40 : Loaded backend agg version unknown.
2021-04-09 01:43:58,013 INFO werkzeug Thread-40 : 127.0.0.1 - - [09/Apr/2021 01:43:58] "[37mPOST /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 01:44:23,140 INFO werkzeug Thread-41 : 127.0.0.1 - - [09/Apr/2021 01:44:23] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 01:44:25,433 INFO werkzeug Thread-42 : 127.0.0.1 - - [09/Apr/2021 01:44:25] "[37mOPTIONS /report_timeframe HTTP/1.1[0m" 200 -
2021-04-09 01:44:25,695 INFO werkzeug Thread-43 : 127.0.0.1 - - [09/Apr/2021 01:44:25] "[37mPOST /report_timeframe HTTP/1.1[0m" 200 -
2021-04-09 01:45:09,224 INFO werkzeug Thread-44 : 127.0.0.1 - - [09/Apr/2021 01:45:09] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 01:45:09,526 INFO werkzeug Thread-45 : 127.0.0.1 - - [09/Apr/2021 01:45:09] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 01:45:11,744 INFO werkzeug Thread-46 : 127.0.0.1 - - [09/Apr/2021 01:45:11] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 01:45:16,988 INFO werkzeug Thread-47 : 127.0.0.1 - - [09/Apr/2021 01:45:16] "[37mGET /staff_get_photo_notification HTTP/1.1[0m" 200 -
2021-04-09 01:45:20,293 INFO werkzeug Thread-48 : 127.0.0.1 - - [09/Apr/2021 01:45:20] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 01:45:20,295 INFO werkzeug Thread-49 : 127.0.0.1 - - [09/Apr/2021 01:45:20] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 01:45:23,904 INFO werkzeug Thread-50 : 127.0.0.1 - - [09/Apr/2021 01:45:23] "[37mOPTIONS /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 01:45:24,206 INFO werkzeug Thread-51 : 127.0.0.1 - - [09/Apr/2021 01:45:24] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 01:45:24,209 INFO werkzeug Thread-52 : 127.0.0.1 - - [09/Apr/2021 01:45:24] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 01:45:24,210 INFO werkzeug Thread-53 : 127.0.0.1 - - [09/Apr/2021 01:45:24] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 01:45:24,226 DEBUG matplotlib.pyplot Thread-54 : Loaded backend agg version unknown.
2021-04-09 01:45:24,357 DEBUG matplotlib.pyplot Thread-54 : Loaded backend agg version unknown.
2021-04-09 01:45:24,485 DEBUG matplotlib.pyplot Thread-54 : Loaded backend agg version unknown.
2021-04-09 01:45:24,647 DEBUG matplotlib.pyplot Thread-54 : Loaded backend agg version unknown.
2021-04-09 01:45:24,810 INFO werkzeug Thread-54 : 127.0.0.1 - - [09/Apr/2021 01:45:24] "[37mPOST /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 01:46:37,755 INFO werkzeug Thread-55 : 127.0.0.1 - - [09/Apr/2021 01:46:37] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 01:46:37,757 INFO werkzeug Thread-56 : 127.0.0.1 - - [09/Apr/2021 01:46:37] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 01:46:41,266 INFO werkzeug Thread-57 : 127.0.0.1 - - [09/Apr/2021 01:46:41] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 01:46:41,573 INFO werkzeug Thread-58 : 127.0.0.1 - - [09/Apr/2021 01:46:41] "[37mOPTIONS /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 01:46:41,580 INFO werkzeug Thread-59 : 127.0.0.1 - - [09/Apr/2021 01:46:41] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 01:46:41,582 INFO werkzeug Thread-60 : 127.0.0.1 - - [09/Apr/2021 01:46:41] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 01:46:41,902 DEBUG matplotlib.pyplot Thread-61 : Loaded backend agg version unknown.
2021-04-09 01:46:42,033 DEBUG matplotlib.pyplot Thread-61 : Loaded backend agg version unknown.
2021-04-09 01:46:42,159 DEBUG matplotlib.pyplot Thread-61 : Loaded backend agg version unknown.
2021-04-09 01:46:42,302 DEBUG matplotlib.pyplot Thread-61 : Loaded backend agg version unknown.
2021-04-09 01:46:42,463 INFO werkzeug Thread-61 : 127.0.0.1 - - [09/Apr/2021 01:46:42] "[37mPOST /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 02:00:26,192 INFO werkzeug Thread-62 : 127.0.0.1 - - [09/Apr/2021 02:00:26] "[37mOPTIONS /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 02:00:26,195 INFO werkzeug Thread-63 : 127.0.0.1 - - [09/Apr/2021 02:00:26] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 02:00:26,197 INFO werkzeug Thread-64 : 127.0.0.1 - - [09/Apr/2021 02:00:26] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 02:00:26,198 INFO werkzeug Thread-65 : 127.0.0.1 - - [09/Apr/2021 02:00:26] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 02:00:26,454 DEBUG matplotlib.pyplot Thread-66 : Loaded backend agg version unknown.
2021-04-09 02:00:26,594 DEBUG matplotlib.pyplot Thread-66 : Loaded backend agg version unknown.
2021-04-09 02:00:26,733 DEBUG matplotlib.pyplot Thread-66 : Loaded backend agg version unknown.
2021-04-09 02:00:26,915 DEBUG matplotlib.pyplot Thread-66 : Loaded backend agg version unknown.
2021-04-09 02:00:27,065 INFO werkzeug Thread-66 : 127.0.0.1 - - [09/Apr/2021 02:00:27] "[37mPOST /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 02:11:27,363 INFO werkzeug Thread-68 : 127.0.0.1 - - [09/Apr/2021 02:11:27] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 02:11:27,366 INFO werkzeug Thread-69 : 127.0.0.1 - - [09/Apr/2021 02:11:27] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 02:11:33,306 INFO werkzeug Thread-70 : 127.0.0.1 - - [09/Apr/2021 02:11:33] "[37mGET /tenant_list_non_FB HTTP/1.1[0m" 200 -
2021-04-09 02:11:38,147 INFO werkzeug Thread-71 : 127.0.0.1 - - [09/Apr/2021 02:11:38] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 02:11:38,149 INFO werkzeug Thread-72 : 127.0.0.1 - - [09/Apr/2021 02:11:38] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 02:11:40,424 INFO werkzeug Thread-73 : 127.0.0.1 - - [09/Apr/2021 02:11:40] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 02:11:40,724 INFO werkzeug Thread-74 : 127.0.0.1 - - [09/Apr/2021 02:11:40] "[37mOPTIONS /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 02:11:40,729 INFO werkzeug Thread-76 : 127.0.0.1 - - [09/Apr/2021 02:11:40] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 02:11:40,729 INFO werkzeug Thread-75 : 127.0.0.1 - - [09/Apr/2021 02:11:40] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 02:11:41,038 DEBUG matplotlib.pyplot Thread-77 : Loaded backend agg version unknown.
2021-04-09 02:11:41,182 DEBUG matplotlib.pyplot Thread-77 : Loaded backend agg version unknown.
2021-04-09 02:11:41,322 DEBUG matplotlib.pyplot Thread-77 : Loaded backend agg version unknown.
2021-04-09 02:11:41,458 DEBUG matplotlib.pyplot Thread-77 : Loaded backend agg version unknown.
2021-04-09 02:11:41,634 INFO werkzeug Thread-77 : 127.0.0.1 - - [09/Apr/2021 02:11:41] "[37mPOST /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 02:13:32,174 INFO werkzeug Thread-78 : 127.0.0.1 - - [09/Apr/2021 02:13:32] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 02:13:32,176 INFO werkzeug Thread-79 : 127.0.0.1 - - [09/Apr/2021 02:13:32] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 02:13:36,554 INFO werkzeug Thread-80 : 127.0.0.1 - - [09/Apr/2021 02:13:36] "[37mGET /tenant_list_FB HTTP/1.1[0m" 200 -
2021-04-09 02:13:40,127 INFO werkzeug Thread-81 : 127.0.0.1 - - [09/Apr/2021 02:13:40] "[37mGET /tenant_list_non_FB HTTP/1.1[0m" 200 -
2021-04-09 02:13:45,881 INFO werkzeug Thread-82 : 127.0.0.1 - - [09/Apr/2021 02:13:45] "[37mOPTIONS /compare_tenant HTTP/1.1[0m" 200 -
2021-04-09 02:13:46,184 INFO werkzeug Thread-83 : 127.0.0.1 - - [09/Apr/2021 02:13:46] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 02:13:46,187 INFO werkzeug Thread-85 : 127.0.0.1 - - [09/Apr/2021 02:13:46] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 02:13:46,187 INFO werkzeug Thread-84 : 127.0.0.1 - - [09/Apr/2021 02:13:46] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 02:13:46,204 DEBUG matplotlib.pyplot Thread-86 : Loaded backend agg version unknown.
2021-04-09 02:13:46,443 DEBUG matplotlib.pyplot Thread-86 : Loaded backend agg version unknown.
2021-04-09 02:13:46,681 DEBUG matplotlib.pyplot Thread-86 : Loaded backend agg version unknown.
2021-04-09 02:13:46,957 DEBUG matplotlib.pyplot Thread-86 : Loaded backend agg version unknown.
2021-04-09 02:13:47,263 INFO werkzeug Thread-86 : 127.0.0.1 - - [09/Apr/2021 02:13:47] "[37mPOST /compare_tenant HTTP/1.1[0m" 200 -
2021-04-09 02:19:06,267 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-09 02:19:08,212 INFO logger Thread-1 : backend started
2021-04-09 02:19:08,818 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:19:08,818 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:19:08,824 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:19:08,827 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-09 02:19:08,827 DEBUG matplotlib Thread-1 : interactive is False
2021-04-09 02:19:08,827 DEBUG matplotlib Thread-1 : platform is win32
2021-04-09 02:19:08,827 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'flask_cors', 'werkzeug.security', 'flask_cors.decorator', 'werkzeug.debug.console', 'flask_cors.core', 'code', 'six', 'codeop', 'flask_cors.extension', 'flask_cors.version', 'werkzeug.debug.repr', 'flask_bcrypt', 'werkzeug.debug.tbtools', 'bcrypt', 'ctypes.util', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'bson.code', 'werkzeug._reloader', 'bson.codec_options', 'bson.dbref', 'bson.son', 'encodings.idna', 'bson.decimal128', 'bson.errors', 'stringprep', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 02:19:08,876 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:19:08,880 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-09 02:19:09,080 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-09 02:19:09,081 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-09 02:20:17,005 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-09 02:20:44,550 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 02:20:44] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 02:20:44,568 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 02:20:44] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 02:21:08,986 INFO werkzeug Thread-5 : 127.0.0.1 - - [09/Apr/2021 02:21:08] "[37mGET /tenant_list_non_FB HTTP/1.1[0m" 200 -
2021-04-09 02:21:11,682 INFO werkzeug Thread-6 : 127.0.0.1 - - [09/Apr/2021 02:21:11] "[37mGET /tenant_list_FB HTTP/1.1[0m" 200 -
2021-04-09 02:21:15,903 INFO werkzeug Thread-7 : 127.0.0.1 - - [09/Apr/2021 02:21:15] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 02:21:15,906 INFO werkzeug Thread-8 : 127.0.0.1 - - [09/Apr/2021 02:21:15] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 02:21:18,313 INFO werkzeug Thread-9 : 127.0.0.1 - - [09/Apr/2021 02:21:18] "[37mGET /tenant_list_FB HTTP/1.1[0m" 200 -
2021-04-09 02:21:40,702 INFO logger Thread-1 : backend started
2021-04-09 02:21:41,382 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:21:41,382 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:21:41,386 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:21:41,389 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-09 02:21:41,389 DEBUG matplotlib Thread-1 : interactive is False
2021-04-09 02:21:41,389 DEBUG matplotlib Thread-1 : platform is win32
2021-04-09 02:21:41,389 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'flask_cors', 'werkzeug.security', 'flask_cors.decorator', 'werkzeug.debug.console', 'flask_cors.core', 'code', 'six', 'codeop', 'flask_cors.extension', 'flask_cors.version', 'werkzeug.debug.repr', 'flask_bcrypt', 'werkzeug.debug.tbtools', 'bcrypt', 'ctypes.util', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'bson.code', 'bson.codec_options', 'werkzeug._reloader', 'bson.dbref', 'bson.son', 'bson.decimal128', 'encodings.idna', 'bson.errors', 'bson.int64', 'stringprep', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 02:21:41,436 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:21:41,440 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-09 02:21:41,633 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-09 02:21:41,633 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-09 02:21:48,812 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 02:21:48] "[37mGET /staff_get_photo_notification HTTP/1.1[0m" 200 -
2021-04-09 02:21:50,848 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 02:21:50] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 02:21:51,151 INFO werkzeug Thread-5 : 127.0.0.1 - - [09/Apr/2021 02:21:51] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 02:22:13,772 INFO werkzeug Thread-6 : 127.0.0.1 - - [09/Apr/2021 02:22:13] "[37mGET /staff_get_photo_notification HTTP/1.1[0m" 200 -
2021-04-09 02:22:17,542 INFO werkzeug Thread-7 : 127.0.0.1 - - [09/Apr/2021 02:22:17] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 02:22:17,844 INFO werkzeug Thread-8 : 127.0.0.1 - - [09/Apr/2021 02:22:17] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 02:22:42,798 INFO werkzeug Thread-9 : 127.0.0.1 - - [09/Apr/2021 02:22:42] "[37mOPTIONS /login HTTP/1.1[0m" 200 -
2021-04-09 02:22:46,396 INFO logger Thread-10 : MihirChhiber is attemping to log in
2021-04-09 02:22:46,398 INFO werkzeug Thread-10 : 127.0.0.1 - - [09/Apr/2021 02:22:46] "[37mPOST /login HTTP/1.1[0m" 200 -
2021-04-09 02:23:12,127 INFO werkzeug Thread-11 : 127.0.0.1 - - [09/Apr/2021 02:23:12] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 02:23:26,339 INFO werkzeug Thread-12 : 127.0.0.1 - - [09/Apr/2021 02:23:26] "[37mOPTIONS /login_verified HTTP/1.1[0m" 200 -
2021-04-09 02:23:26,622 INFO werkzeug Thread-13 : 127.0.0.1 - - [09/Apr/2021 02:23:26] "[35m[1mPOST /login_verified HTTP/1.1[0m" 500 -
2021-04-09 02:24:00,167 INFO werkzeug Thread-14 : 127.0.0.1 - - [09/Apr/2021 02:24:00] "[37mGET /staff_get_photo_notification HTTP/1.1[0m" 200 -
2021-04-09 02:24:06,621 INFO werkzeug Thread-15 : 127.0.0.1 - - [09/Apr/2021 02:24:06] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 02:24:06,623 INFO werkzeug Thread-16 : 127.0.0.1 - - [09/Apr/2021 02:24:06] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 02:24:09,614 INFO werkzeug Thread-17 : 127.0.0.1 - - [09/Apr/2021 02:24:09] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 02:24:09,916 INFO werkzeug Thread-18 : 127.0.0.1 - - [09/Apr/2021 02:24:09] "[37mOPTIONS /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 02:24:09,918 INFO werkzeug Thread-19 : 127.0.0.1 - - [09/Apr/2021 02:24:09] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 02:24:09,921 INFO werkzeug Thread-20 : 127.0.0.1 - - [09/Apr/2021 02:24:09] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 02:24:10,232 DEBUG matplotlib.pyplot Thread-21 : Loaded backend agg version unknown.
2021-04-09 02:24:10,253 DEBUG matplotlib.font_manager Thread-21 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-04-09 02:24:10,254 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,254 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,254 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,254 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,254 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,254 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,254 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,254 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,254 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,254 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:24:10,254 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,255 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:24:10,255 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,255 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,255 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,255 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,255 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,255 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,255 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:24:10,255 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:24:10,255 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:24:10,255 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,255 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,255 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:24:10,255 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,255 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,256 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,256 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,256 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,256 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,256 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,256 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,256 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,256 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,256 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,257 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,257 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,257 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,257 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:24:10,257 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,257 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,257 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:24:10,257 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:24:10,257 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,257 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,257 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,258 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,258 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,258 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,258 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,258 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,258 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,258 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,258 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,258 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,259 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:24:10,259 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,259 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,259 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,259 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,259 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:24:10,259 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,259 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,259 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:24:10,259 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,260 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,260 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,260 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:24:10,260 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,260 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:24:10,260 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,260 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,260 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:24:10,260 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,260 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:24:10,261 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,261 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,261 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:24:10,261 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,261 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,261 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,261 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,261 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,261 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,261 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:24:10,261 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,261 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,262 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,262 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,262 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:24:10,262 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,262 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,262 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,262 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,262 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,262 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:24:10,262 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,262 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,262 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,263 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,263 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,263 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,263 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:24:10,263 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:24:10,263 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,263 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:24:10,263 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:24:10,263 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,263 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,263 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,263 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,264 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,264 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,264 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,264 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,264 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,264 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:24:10,264 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,264 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,264 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,264 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,264 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,264 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,265 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:24:10,265 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,265 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,265 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,265 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,265 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,265 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:24:10,265 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,265 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,265 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,265 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:24:10,265 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,266 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:24:10,266 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,266 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,266 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,266 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,266 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,266 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:24:10,266 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,266 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:24:10,266 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,266 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,266 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,267 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,267 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:24:10,267 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,267 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:24:10,267 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,267 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:24:10,267 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,267 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,267 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:24:10,267 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,267 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,267 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,268 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,268 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:24:10,268 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,268 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,268 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:24:10,268 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,268 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:24:10,268 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,268 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,268 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:24:10,268 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,268 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,269 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,269 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,269 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,269 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,269 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,269 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,269 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,269 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,269 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:24:10,269 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:24:10,269 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,269 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,270 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,270 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,270 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,270 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,270 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,270 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:24:10,270 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,270 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,270 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,270 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,270 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:24:10,270 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,271 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,271 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:24:10,271 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,271 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,271 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,271 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,271 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,271 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,271 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,271 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:24:10,271 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,271 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,271 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,272 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,272 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,272 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,272 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,272 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,272 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,272 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,272 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,272 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,272 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,272 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,272 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,273 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:24:10,273 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,273 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,273 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,273 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,273 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,273 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:24:10,273 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,273 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,273 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,273 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,273 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,273 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:24:10,274 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,274 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,274 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,274 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,274 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,274 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,274 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,274 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,274 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:24:10,274 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,274 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:24:10,274 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:24:10,275 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:24:10,275 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,275 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:24:10,275 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,275 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,275 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,275 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,275 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,275 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:24:10,276 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,276 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,276 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,276 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,276 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,276 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,276 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,276 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,276 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,276 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,277 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,277 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,277 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,277 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,277 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,277 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,277 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,277 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,277 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,277 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:24:10,278 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,278 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,278 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,278 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,278 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:24:10,278 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,278 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,278 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,278 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,278 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,279 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,279 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:24:10,279 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,279 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,279 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,279 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,279 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,279 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:24:10,279 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,279 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,279 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:24:10,280 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:24:10,280 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,280 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,280 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,280 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,280 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,280 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,280 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,280 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,280 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:24:10,280 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,280 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,281 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,281 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,281 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,281 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,281 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,281 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,281 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,281 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,281 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:24:10,281 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,282 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:24:10,282 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,282 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,282 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,282 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,282 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,282 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,282 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,282 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,282 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,283 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:24:10,283 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,283 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,283 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,283 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:24:10,283 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,283 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,283 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,283 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,283 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:24:10,284 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,284 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,284 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:24:10,284 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:24:10,284 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:24:10,284 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:24:10,284 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:24:10,284 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,284 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,284 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,285 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,285 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,285 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:24:10,285 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,285 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,285 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,285 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,285 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,285 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,286 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:24:10,286 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,286 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,286 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,286 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,286 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,286 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:24:10,286 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,286 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,286 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:24:10,287 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:24:10,287 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,287 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,287 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,287 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,287 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:24:10,287 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:24:10,287 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,287 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,287 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:24:10,288 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,288 DEBUG matplotlib.font_manager Thread-21 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:24:10,293 DEBUG matplotlib.font_manager Thread-21 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-04-09 02:24:10,293 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,293 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,293 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,293 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,293 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,293 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,293 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,293 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,293 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,294 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:24:10,294 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,294 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:24:10,294 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,294 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,294 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,294 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,294 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,294 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,294 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:24:10,294 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:24:10,294 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:24:10,295 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,295 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,295 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:24:10,295 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,295 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,295 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,295 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,295 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,295 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,295 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,295 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,296 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,296 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,296 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,296 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,296 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,296 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,296 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:24:10,296 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,296 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,296 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:24:10,296 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:24:10,297 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,297 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,297 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,297 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,297 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,297 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,297 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,297 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,297 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,297 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,297 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,297 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,298 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:24:10,298 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,298 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,298 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,298 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,298 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:24:10,298 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,298 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,298 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:24:10,298 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,298 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,298 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,298 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:24:10,299 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,299 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:24:10,299 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,299 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,299 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:24:10,299 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,299 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:24:10,299 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,299 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,299 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:24:10,300 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,300 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,300 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,300 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,300 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,300 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,300 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:24:10,300 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,300 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,301 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,301 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,301 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:24:10,301 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,301 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,301 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,301 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,301 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,301 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:24:10,301 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,302 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,302 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,302 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,302 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,302 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,302 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:24:10,302 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:24:10,302 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,302 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:24:10,302 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:24:10,303 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,303 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,303 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,303 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,303 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,303 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,303 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,303 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,303 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,303 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:24:10,303 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,303 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,304 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,304 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,304 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,304 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,304 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:24:10,304 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,304 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,304 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,304 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,304 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,304 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:24:10,305 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,305 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,305 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,305 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:24:10,305 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,305 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:24:10,305 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,305 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,305 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,305 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,305 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,305 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:24:10,306 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,306 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:24:10,306 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,306 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,306 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,306 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,306 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:24:10,306 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,306 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:24:10,306 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,307 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:24:10,307 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,307 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,307 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:24:10,307 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,307 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,307 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,307 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,307 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:24:10,307 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,307 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,308 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:24:10,308 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,308 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:24:10,308 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,308 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,308 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:24:10,308 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,308 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,308 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,308 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,308 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,308 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,309 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,309 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,309 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,309 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,309 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:24:10,309 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:24:10,309 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,309 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,309 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,309 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,309 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,310 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,310 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,310 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:24:10,310 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,310 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,310 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,310 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,310 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:24:10,310 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,310 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,310 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:24:10,311 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,311 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,311 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,311 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,311 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,311 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,311 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,311 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:24:10,311 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,312 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,312 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,312 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,312 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,312 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,312 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,312 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,312 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,312 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,312 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,312 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,312 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,313 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,313 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,313 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:24:10,313 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,313 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,313 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,313 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,313 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,313 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:24:10,313 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,313 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,313 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,313 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,313 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,314 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:24:10,314 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,314 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,314 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,314 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,314 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,314 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,314 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,314 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,314 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:24:10,314 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,314 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:24:10,315 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:24:10,315 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:24:10,315 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,315 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:24:10,315 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,315 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,315 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,315 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,315 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,315 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:24:10,315 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,316 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,316 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,316 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,316 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,316 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,316 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,316 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,316 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,316 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,316 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,316 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,316 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,316 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,317 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,317 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,317 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,317 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,317 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,317 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:24:10,317 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,317 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,317 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,317 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,317 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:24:10,318 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,318 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,318 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,318 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,318 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,318 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,318 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:24:10,318 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,318 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,318 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,318 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,318 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,318 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:24:10,319 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,319 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,319 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:24:10,319 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:24:10,319 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,319 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,319 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,319 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,319 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,319 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,319 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,319 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,320 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:24:10,320 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,320 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,320 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,320 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,320 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,320 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,320 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,320 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,320 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,320 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,320 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:24:10,321 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,321 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:24:10,321 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,321 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,321 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,321 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,321 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,321 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,321 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,321 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,321 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,321 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:24:10,321 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,322 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,322 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,322 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:24:10,322 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,322 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,322 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,322 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,322 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:24:10,322 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,322 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,322 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:24:10,322 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:24:10,323 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:24:10,323 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:24:10,323 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:24:10,323 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,323 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,323 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,323 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,323 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,323 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:24:10,323 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,323 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,323 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,324 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,324 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,324 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,324 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:24:10,324 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,324 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,324 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,324 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,324 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,324 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:24:10,324 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,324 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:24:10,324 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:24:10,325 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:24:10,325 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,325 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,325 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,325 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:24:10,325 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:24:10,325 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:24:10,325 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:24:10,325 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,325 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:24:10,325 DEBUG matplotlib.font_manager Thread-21 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:24:10,325 DEBUG matplotlib.font_manager Thread-21 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:24:10,462 DEBUG matplotlib.pyplot Thread-21 : Loaded backend agg version unknown.
2021-04-09 02:24:10,592 DEBUG matplotlib.pyplot Thread-21 : Loaded backend agg version unknown.
2021-04-09 02:24:10,724 DEBUG matplotlib.pyplot Thread-21 : Loaded backend agg version unknown.
2021-04-09 02:24:10,862 INFO werkzeug Thread-21 : 127.0.0.1 - - [09/Apr/2021 02:24:10] "[37mPOST /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 02:24:19,862 INFO werkzeug Thread-22 : 127.0.0.1 - - [09/Apr/2021 02:24:19] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 02:24:20,145 INFO werkzeug Thread-23 : 127.0.0.1 - - [09/Apr/2021 02:24:20] "[35m[1mPOST /report_dashboard HTTP/1.1[0m" 500 -
2021-04-09 02:25:27,439 INFO werkzeug Thread-25 : 127.0.0.1 - - [09/Apr/2021 02:25:27] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 02:25:27,701 INFO werkzeug Thread-26 : 127.0.0.1 - - [09/Apr/2021 02:25:27] "[35m[1mPOST /report_dashboard HTTP/1.1[0m" 500 -
2021-04-09 02:25:51,215 INFO werkzeug Thread-27 : 127.0.0.1 - - [09/Apr/2021 02:25:51] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 02:25:51,519 INFO werkzeug Thread-28 : 127.0.0.1 - - [09/Apr/2021 02:25:51] "[37mOPTIONS /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 02:25:51,523 INFO werkzeug Thread-29 : 127.0.0.1 - - [09/Apr/2021 02:25:51] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 02:25:51,525 INFO werkzeug Thread-30 : 127.0.0.1 - - [09/Apr/2021 02:25:51] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 02:25:51,858 DEBUG matplotlib.pyplot Thread-31 : Loaded backend agg version unknown.
2021-04-09 02:25:51,994 DEBUG matplotlib.pyplot Thread-31 : Loaded backend agg version unknown.
2021-04-09 02:25:52,124 DEBUG matplotlib.pyplot Thread-31 : Loaded backend agg version unknown.
2021-04-09 02:25:52,313 DEBUG matplotlib.pyplot Thread-31 : Loaded backend agg version unknown.
2021-04-09 02:25:52,481 INFO werkzeug Thread-31 : 127.0.0.1 - - [09/Apr/2021 02:25:52] "[37mPOST /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 02:26:00,425 INFO werkzeug Thread-32 : 127.0.0.1 - - [09/Apr/2021 02:26:00] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 02:26:00,684 INFO werkzeug Thread-33 : 127.0.0.1 - - [09/Apr/2021 02:26:00] "[35m[1mPOST /report_dashboard HTTP/1.1[0m" 500 -
2021-04-09 02:28:03,783 INFO werkzeug Thread-36 : 127.0.0.1 - - [09/Apr/2021 02:28:03] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 02:28:03,784 INFO werkzeug Thread-35 : 127.0.0.1 - - [09/Apr/2021 02:28:03] "[37mOPTIONS /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 02:28:03,786 INFO werkzeug Thread-37 : 127.0.0.1 - - [09/Apr/2021 02:28:03] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 02:28:03,789 INFO werkzeug Thread-38 : 127.0.0.1 - - [09/Apr/2021 02:28:03] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 02:28:04,050 DEBUG matplotlib.pyplot Thread-39 : Loaded backend agg version unknown.
2021-04-09 02:28:04,184 DEBUG matplotlib.pyplot Thread-39 : Loaded backend agg version unknown.
2021-04-09 02:28:04,316 DEBUG matplotlib.pyplot Thread-39 : Loaded backend agg version unknown.
2021-04-09 02:28:04,442 DEBUG matplotlib.pyplot Thread-39 : Loaded backend agg version unknown.
2021-04-09 02:28:04,605 INFO werkzeug Thread-39 : 127.0.0.1 - - [09/Apr/2021 02:28:04] "[37mPOST /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 02:28:29,968 INFO werkzeug Thread-40 : 127.0.0.1 - - [09/Apr/2021 02:28:29] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 02:28:30,305 DEBUG matplotlib.pyplot Thread-41 : Loaded backend agg version unknown.
2021-04-09 02:28:30,458 DEBUG matplotlib.pyplot Thread-41 : Loaded backend agg version unknown.
2021-04-09 02:28:30,610 DEBUG matplotlib.pyplot Thread-41 : Loaded backend agg version unknown.
2021-04-09 02:28:30,797 DEBUG matplotlib.pyplot Thread-41 : Loaded backend agg version unknown.
2021-04-09 02:28:30,957 INFO werkzeug Thread-41 : 127.0.0.1 - - [09/Apr/2021 02:28:30] "[35m[1mPOST /report_dashboard HTTP/1.1[0m" 500 -
2021-04-09 02:30:39,400 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-09 02:30:41,378 INFO logger Thread-1 : backend started
2021-04-09 02:30:42,024 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:30:42,024 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:30:42,029 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:30:42,032 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-09 02:30:42,032 DEBUG matplotlib Thread-1 : interactive is False
2021-04-09 02:30:42,032 DEBUG matplotlib Thread-1 : platform is win32
2021-04-09 02:30:42,033 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'flask_cors', 'werkzeug.security', 'flask_cors.decorator', 'werkzeug.debug.console', 'flask_cors.core', 'code', 'six', 'codeop', 'flask_cors.extension', 'flask_cors.version', 'werkzeug.debug.repr', 'flask_bcrypt', 'werkzeug.debug.tbtools', 'bcrypt', 'ctypes.util', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'bson.code', 'werkzeug._reloader', 'bson.codec_options', 'bson.dbref', 'bson.son', 'bson.decimal128', 'encodings.idna', 'bson.errors', 'bson.int64', 'stringprep', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 02:30:42,085 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:30:42,090 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-09 02:30:42,333 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-09 02:30:42,334 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-09 02:30:43,187 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 02:30:43] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 02:30:43,453 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:30:43,477 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-04-09 02:30:43,477 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,477 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,477 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,477 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,477 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,477 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,477 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,477 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,478 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,478 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:30:43,478 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,478 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:30:43,478 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,478 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,478 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,478 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,478 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,478 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,478 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:30:43,478 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:30:43,479 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:30:43,479 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,479 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,479 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:30:43,479 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,479 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,479 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,479 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,479 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,480 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,480 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,480 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,480 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,480 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,480 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,480 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,480 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,480 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,480 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:30:43,480 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,480 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,480 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:30:43,481 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:30:43,481 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,481 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,481 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,481 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,481 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,481 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,481 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,481 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,481 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,481 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,481 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,481 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,481 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:30:43,481 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,482 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,482 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,482 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,482 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:30:43,482 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,482 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,482 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:30:43,482 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,482 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,482 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,482 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:30:43,482 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,482 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:30:43,482 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,482 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,483 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:30:43,483 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,483 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:30:43,483 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,483 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,483 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:30:43,483 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,483 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,483 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,483 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,483 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,483 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,483 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:30:43,483 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:30:43,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:30:43,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:30:43,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:30:43,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:30:43,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:30:43,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,486 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:30:43,486 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,486 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,486 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,486 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,486 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,486 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,486 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:30:43,486 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,486 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,486 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,487 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,487 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,487 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:30:43,487 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,487 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,487 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,487 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:30:43,487 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,487 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:30:43,487 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,487 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,487 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,487 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,487 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,488 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:30:43,488 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,488 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:30:43,488 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,488 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,488 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,488 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,488 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:30:43,488 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,488 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:30:43,488 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,488 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:30:43,488 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,488 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,488 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:30:43,489 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,489 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,489 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,489 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,489 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:30:43,489 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,489 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,489 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:30:43,489 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,489 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:30:43,489 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,489 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,489 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:30:43,489 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,489 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,490 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,490 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,490 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,490 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,490 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,490 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,490 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,490 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,490 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:30:43,490 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:30:43,490 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,490 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,490 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,490 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,491 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,491 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,491 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,491 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:30:43,491 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,491 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,491 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,492 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,492 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:30:43,492 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,492 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,492 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:30:43,492 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,492 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,492 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,492 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,492 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,492 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,492 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,492 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:30:43,492 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,493 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,493 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,493 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,493 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,493 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,493 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,493 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,493 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,493 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,493 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,493 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,494 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,494 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,494 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,494 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:30:43,494 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,494 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,494 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,494 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,494 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,494 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:30:43,494 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,494 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,494 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:30:43,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:30:43,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:30:43,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:30:43,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:30:43,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:30:43,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:30:43,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:30:43,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:30:43,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:30:43,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:30:43,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:30:43,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:30:43,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:30:43,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:30:43,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:30:43,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:30:43,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:30:43,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:30:43,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:30:43,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:30:43,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:30:43,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:30:43,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:30:43,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:30:43,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:30:43,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:30:43,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:30:43,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:30:43,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:30:43,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:30:43,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:30:43,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,504 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:30:43,508 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-04-09 02:30:43,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:30:43,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:30:43,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:30:43,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:30:43,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:30:43,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:30:43,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:30:43,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:30:43,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:30:43,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,512 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,512 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,512 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,512 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,512 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,512 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,512 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,512 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,512 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,512 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:30:43,512 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,512 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,512 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,512 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,512 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:30:43,513 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,513 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,513 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:30:43,513 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,513 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,513 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,513 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:30:43,513 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,513 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:30:43,513 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,513 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,513 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:30:43,513 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,513 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:30:43,513 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,513 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,514 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:30:43,514 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,514 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,514 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,514 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,514 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,514 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,514 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:30:43,514 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,514 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,514 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,514 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,514 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:30:43,514 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,514 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,514 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:30:43,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:30:43,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:30:43,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:30:43,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:30:43,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:30:43,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:30:43,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:30:43,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:30:43,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:30:43,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:30:43,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:30:43,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:30:43,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:30:43,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:30:43,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:30:43,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:30:43,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:30:43,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:30:43,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:30:43,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:30:43,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:30:43,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:30:43,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:30:43,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:30:43,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:30:43,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:30:43,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:30:43,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:30:43,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:30:43,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:30:43,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:30:43,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:30:43,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:30:43,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:30:43,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:30:43,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:30:43,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:30:43,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:30:43,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:30:43,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:30:43,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:30:43,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:30:43,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:30:43,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:30:43,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:30:43,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:30:43,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:30:43,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:30:43,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:30:43,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:30:43,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:30:43,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:30:43,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:30:43,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:30:43,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:30:43,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:30:43,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:30:43,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:30:43,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:30:43,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:30:43,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:30:43,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,533 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:30:43,533 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:30:43,533 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:30:43,694 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:30:43,883 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:30:44,077 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:30:44,265 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 02:30:44] "[35m[1mPOST /report_dashboard HTTP/1.1[0m" 500 -
2021-04-09 02:31:47,238 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-09 02:31:48,839 INFO logger Thread-1 : backend started
2021-04-09 02:31:49,496 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:31:49,496 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:31:49,500 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:31:49,503 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-09 02:31:49,503 DEBUG matplotlib Thread-1 : interactive is False
2021-04-09 02:31:49,503 DEBUG matplotlib Thread-1 : platform is win32
2021-04-09 02:31:49,503 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'flask_cors', 'flask_cors.decorator', 'werkzeug.security', 'flask_cors.core', 'werkzeug.debug.console', 'six', 'code', 'flask_cors.extension', 'codeop', 'flask_cors.version', 'werkzeug.debug.repr', 'flask_bcrypt', 'werkzeug.debug.tbtools', 'bcrypt', 'ctypes.util', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'werkzeug._reloader', 'bson.code', 'bson.codec_options', 'bson.dbref', 'encodings.idna', 'bson.son', 'stringprep', 'bson.decimal128', 'bson.errors', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 02:31:49,550 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:31:49,553 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-09 02:31:49,771 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-09 02:31:49,772 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-09 02:31:49,805 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 02:31:49] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 02:31:49,827 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:31:49,857 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-04-09 02:31:49,858 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,858 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,858 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,858 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,858 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,858 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,858 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,858 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,858 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,858 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:31:49,859 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,859 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:31:49,859 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,859 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,859 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,859 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,859 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,859 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,859 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:31:49,859 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:31:49,860 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:31:49,860 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,860 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,860 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:31:49,860 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,860 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,860 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,860 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,860 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,861 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,861 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,861 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,861 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,861 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,861 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,861 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,862 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,862 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,862 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:31:49,862 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,862 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,862 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:31:49,862 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:31:49,862 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,862 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,862 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,863 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,863 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,863 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,863 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,863 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,863 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,863 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,863 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,863 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,863 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:31:49,864 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,864 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,864 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,864 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,864 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:31:49,864 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,864 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,864 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:31:49,864 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,864 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,864 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,865 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:31:49,865 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,865 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:31:49,865 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,865 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,865 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:31:49,865 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,865 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:31:49,865 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,865 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,865 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:31:49,866 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,866 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,866 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,866 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,866 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,866 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,866 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:31:49,866 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,866 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,866 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,866 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,867 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:31:49,867 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,867 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,867 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,867 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,867 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,867 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:31:49,867 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,868 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,868 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,868 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,868 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,868 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,868 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:31:49,868 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:31:49,868 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,868 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:31:49,868 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:31:49,868 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,868 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,869 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,869 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,869 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,869 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,869 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,869 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,869 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,869 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:31:49,869 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,869 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,869 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,869 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,870 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,870 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,870 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:31:49,870 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,870 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,870 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,870 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,870 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,870 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:31:49,871 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,871 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,871 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,871 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:31:49,871 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,871 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:31:49,871 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,871 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,872 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,872 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,872 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,872 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:31:49,872 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,872 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:31:49,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:31:49,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:31:49,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:31:49,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:31:49,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:31:49,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:31:49,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:31:49,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:31:49,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:31:49,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:31:49,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:31:49,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:31:49,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:31:49,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:31:49,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:31:49,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:31:49,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:31:49,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:31:49,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:31:49,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:31:49,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:31:49,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:31:49,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:31:49,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:31:49,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:31:49,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:31:49,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:31:49,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:31:49,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:31:49,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,888 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,888 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,888 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,888 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,888 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,888 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:31:49,888 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,888 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,889 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,889 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,889 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,889 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,889 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,889 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,889 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,889 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,890 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:31:49,890 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,890 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:31:49,890 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,890 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,890 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,891 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,891 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,891 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,891 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,891 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,891 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,891 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:31:49,891 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,892 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,892 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,892 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:31:49,892 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,892 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,892 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,892 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,893 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:31:49,893 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,893 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,893 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:31:49,893 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:31:49,893 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:31:49,893 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:31:49,894 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:31:49,894 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,894 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,894 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,894 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,894 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,894 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:31:49,895 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,895 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,895 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,895 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,895 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,895 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,895 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:31:49,895 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,896 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,896 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,896 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,896 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,896 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:31:49,896 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,896 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,897 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:31:49,897 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:31:49,897 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,897 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,897 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,897 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,897 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:31:49,897 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:31:49,897 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,897 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,898 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:31:49,898 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,898 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:31:49,903 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-04-09 02:31:49,903 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,903 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,903 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,903 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,904 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,904 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,904 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,904 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,904 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,904 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:31:49,904 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,904 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:31:49,904 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,904 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,905 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,905 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,905 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,905 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,905 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:31:49,905 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:31:49,905 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:31:49,905 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,906 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,906 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:31:49,906 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,906 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,906 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,906 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,906 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,907 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,907 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,907 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,907 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,907 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,907 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,907 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,907 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,907 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,907 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:31:49,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:31:49,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:31:49,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,909 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,909 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,909 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,909 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,909 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,909 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:31:49,909 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,909 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,910 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,910 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,910 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:31:49,910 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,910 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,910 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:31:49,910 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,910 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,910 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,910 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:31:49,910 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:31:49,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:31:49,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:31:49,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:31:49,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:31:49,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:31:49,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:31:49,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:31:49,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:31:49,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:31:49,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:31:49,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:31:49,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:31:49,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:31:49,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:31:49,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:31:49,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,917 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,917 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,917 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,917 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,917 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:31:49,917 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,917 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:31:49,917 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,917 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,918 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,918 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,918 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:31:49,918 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,918 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:31:49,918 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,918 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:31:49,918 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:31:49,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:31:49,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:31:49,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:31:49,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:31:49,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:31:49,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:31:49,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:31:49,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:31:49,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:31:49,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:31:49,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,924 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,924 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,924 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,924 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,924 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,924 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,924 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,924 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,924 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,924 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,924 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,925 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,925 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:31:49,925 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,925 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,925 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,925 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,925 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,925 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:31:49,925 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,925 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,925 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,926 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,926 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,926 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:31:49,926 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,926 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,926 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,926 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,926 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,926 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,927 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,927 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,927 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:31:49,927 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,927 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:31:49,927 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:31:49,927 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:31:49,927 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,927 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:31:49,928 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,928 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,928 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,928 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,928 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,928 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:31:49,928 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,928 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,928 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,928 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,928 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,929 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,929 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,929 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,929 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,929 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,929 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,929 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,929 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,929 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,929 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,929 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,930 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,930 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,930 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,930 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:31:49,930 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,930 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,930 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,930 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,930 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:31:49,930 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,930 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,931 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,931 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,931 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,931 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,931 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:31:49,931 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,931 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,931 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,932 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,932 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,932 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:31:49,932 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,932 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,932 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:31:49,932 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:31:49,933 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,933 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,933 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,933 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,933 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,933 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,934 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,934 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,934 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:31:49,934 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,934 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,934 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,934 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,935 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,935 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,935 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,935 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,935 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,935 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,936 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:31:49,936 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,936 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:31:49,936 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,936 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,936 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,937 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,937 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,937 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,937 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,937 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,937 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,937 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:31:49,937 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,937 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,937 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,938 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:31:49,938 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,938 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,938 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,938 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,938 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:31:49,938 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,938 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,939 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:31:49,939 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:31:49,939 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:31:49,939 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:31:49,939 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:31:49,939 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,940 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,940 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,940 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,940 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,940 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:31:49,940 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,940 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,941 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,941 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,941 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,941 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,941 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:31:49,941 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,942 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,942 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,942 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,942 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,942 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:31:49,942 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,943 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:31:49,943 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:31:49,943 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:31:49,943 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,943 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,943 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,943 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:31:49,944 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:31:49,944 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:31:49,944 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:31:49,944 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,944 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:31:49,944 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:31:49,945 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:31:50,117 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:31:50,307 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:31:50,463 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:31:50,647 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 02:31:50] "[35m[1mPOST /report_dashboard HTTP/1.1[0m" 500 -
2021-04-09 02:32:27,725 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-09 02:32:29,197 INFO logger Thread-1 : backend started
2021-04-09 02:32:29,814 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:32:29,814 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:32:29,822 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:32:29,824 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-09 02:32:29,824 DEBUG matplotlib Thread-1 : interactive is False
2021-04-09 02:32:29,824 DEBUG matplotlib Thread-1 : platform is win32
2021-04-09 02:32:29,824 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'flask_cors', 'werkzeug.security', 'flask_cors.decorator', 'werkzeug.debug.console', 'flask_cors.core', 'code', 'six', 'codeop', 'flask_cors.extension', 'flask_cors.version', 'werkzeug.debug.repr', 'flask_bcrypt', 'werkzeug.debug.tbtools', 'bcrypt', 'ctypes.util', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'bson.code', 'bson.codec_options', 'werkzeug._reloader', 'bson.dbref', 'bson.son', 'bson.decimal128', 'encodings.idna', 'bson.errors', 'stringprep', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 02:32:29,865 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:32:29,870 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-09 02:32:30,074 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-09 02:32:30,075 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-09 02:32:30,103 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 02:32:30] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 02:32:30,124 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:32:30,150 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-04-09 02:32:30,150 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,150 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,150 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,150 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,151 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,151 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,151 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,151 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,151 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,151 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:32:30,151 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,151 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:32:30,151 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,151 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,151 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,152 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,152 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,152 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,152 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:32:30,152 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:32:30,152 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:32:30,152 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,152 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,152 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:32:30,152 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,153 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,153 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,153 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,153 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,153 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,153 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,153 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,154 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,154 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,154 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,154 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,154 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,154 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,154 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:32:30,154 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,154 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,155 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:32:30,155 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:32:30,155 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,155 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,155 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,155 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,155 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,155 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,155 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,155 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,155 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,155 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:32:30,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:32:30,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:32:30,157 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,157 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,157 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,157 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:32:30,157 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,157 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:32:30,157 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,157 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,157 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:32:30,157 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,157 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:32:30,157 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,158 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,158 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:32:30,158 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,158 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,158 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,158 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,158 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,158 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,158 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:32:30,158 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,158 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,158 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,159 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,159 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:32:30,159 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,159 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,159 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,159 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,159 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,159 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:32:30,159 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,159 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,159 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:32:30,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:32:30,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:32:30,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:32:30,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,161 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,161 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,161 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,161 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,161 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,161 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:32:30,161 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,161 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,162 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,162 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,162 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,162 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,162 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:32:30,162 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,162 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,163 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,163 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,163 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,163 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:32:30,163 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,163 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,163 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,163 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:32:30,163 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,164 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:32:30,164 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,164 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,164 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,164 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,164 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,164 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:32:30,164 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,164 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:32:30,164 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,164 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,165 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,165 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,165 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:32:30,165 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,165 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:32:30,165 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,165 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:32:30,165 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,165 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,165 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:32:30,165 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,166 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,166 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,166 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,166 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:32:30,166 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,166 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,166 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:32:30,166 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,166 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:32:30,166 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,166 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:32:30,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:32:30,168 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:32:30,168 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,168 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,168 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,168 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,168 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,168 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,168 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,168 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:32:30,168 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:32:30,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:32:30,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,170 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,170 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,170 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,170 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,170 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:32:30,170 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,170 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,170 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,170 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,170 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,170 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,171 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,171 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,171 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,171 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,171 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,171 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,171 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,171 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,171 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,171 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:32:30,171 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,171 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,172 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,172 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,172 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,172 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:32:30,172 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,172 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,172 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,172 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,172 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,172 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:32:30,172 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,172 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,173 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,173 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,173 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,173 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,173 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,173 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,173 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:32:30,173 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,173 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:32:30,173 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:32:30,173 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:32:30,173 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,174 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:32:30,174 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,174 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,174 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,174 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,174 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,174 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:32:30,174 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,174 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,174 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,174 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,174 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,174 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,175 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,175 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,175 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,175 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,175 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,175 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,175 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,175 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,176 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,176 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,176 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,176 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,176 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,176 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:32:30,176 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,177 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,177 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,177 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,177 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:32:30,177 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,177 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,177 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,177 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,177 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,177 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,178 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:32:30,178 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,178 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,178 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,178 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,178 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,178 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:32:30,178 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,178 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,178 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:32:30,178 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:32:30,179 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,179 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,179 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,179 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,179 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,179 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,179 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,179 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,179 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:32:30,179 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,179 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,180 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,180 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,180 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,180 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,180 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,180 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,180 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,180 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,180 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:32:30,180 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,180 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:32:30,181 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,181 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,181 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,181 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,181 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,181 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,181 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,181 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,181 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,181 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:32:30,181 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,181 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,182 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,182 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:32:30,182 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,182 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,182 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,182 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,182 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:32:30,182 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,182 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,182 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:32:30,182 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:32:30,183 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:32:30,183 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:32:30,183 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:32:30,183 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,183 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,183 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,183 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,183 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,183 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:32:30,183 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,183 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:32:30,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,185 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,185 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:32:30,185 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,185 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,185 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:32:30,185 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:32:30,185 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,185 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,185 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,186 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,186 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:32:30,186 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:32:30,186 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,186 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,186 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:32:30,186 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,186 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:32:30,192 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-04-09 02:32:30,192 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,192 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,192 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,192 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,192 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,192 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,193 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,193 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,193 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,193 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:32:30,193 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,193 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:32:30,193 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,193 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,193 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,194 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,194 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,194 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,194 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:32:30,194 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:32:30,194 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:32:30,194 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,194 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,194 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:32:30,195 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,195 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,195 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,195 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,195 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,195 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,195 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,195 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,195 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,195 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,195 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:32:30,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:32:30,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:32:30,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,197 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,197 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,197 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,197 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,197 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,197 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,197 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,197 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,197 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:32:30,197 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,198 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,198 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,198 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,198 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:32:30,198 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,198 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,198 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:32:30,198 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,199 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,199 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,199 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:32:30,199 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,199 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:32:30,199 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,199 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,199 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:32:30,199 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,199 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:32:30,200 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,200 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,200 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:32:30,200 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,200 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,200 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,200 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,200 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,200 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,200 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:32:30,200 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,201 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,201 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,201 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,201 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:32:30,201 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,201 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,201 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,201 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,201 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,201 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:32:30,201 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,201 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,202 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,202 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,202 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,202 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,202 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:32:30,202 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:32:30,202 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,202 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:32:30,202 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:32:30,202 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,202 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:32:30,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,204 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,204 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,204 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:32:30,204 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,204 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,204 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,204 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,204 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,204 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:32:30,205 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,205 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,205 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,205 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:32:30,205 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,205 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:32:30,205 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,206 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,206 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,206 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,206 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,206 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:32:30,206 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,206 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:32:30,206 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,207 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,207 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,207 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,207 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:32:30,207 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,207 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:32:30,207 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,207 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:32:30,207 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,208 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,208 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:32:30,208 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,208 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,208 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,208 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,208 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:32:30,208 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,208 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,208 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:32:30,208 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,208 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:32:30,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:32:30,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,210 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,210 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,210 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:32:30,210 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:32:30,210 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,210 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,210 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,210 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,210 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,210 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,210 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:32:30,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:32:30,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:32:30,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,212 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,212 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,212 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,212 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,212 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,212 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:32:30,212 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,212 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,212 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,212 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,213 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,213 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,213 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,213 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,213 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,213 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,213 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,213 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,213 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,213 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,214 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,214 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:32:30,214 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,214 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,214 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,214 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,214 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,214 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:32:30,214 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,214 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,214 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,214 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,214 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,215 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:32:30,215 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,215 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,215 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,215 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,215 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,215 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,215 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,215 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,215 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:32:30,215 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,216 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:32:30,216 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:32:30,216 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:32:30,216 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,216 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:32:30,216 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,216 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,216 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,216 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,216 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,216 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:32:30,216 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,216 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,217 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,217 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,217 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,217 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,217 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,217 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,217 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,217 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,217 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,217 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,217 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,218 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,218 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,218 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,218 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,218 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,218 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,218 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:32:30,218 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,218 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,218 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,218 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,219 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:32:30,219 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,219 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,219 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,219 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,219 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,219 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,219 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:32:30,219 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,220 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,220 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,220 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,220 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,220 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:32:30,220 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,220 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,220 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:32:30,220 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:32:30,220 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,221 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,221 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,221 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,221 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,221 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,221 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,221 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,221 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:32:30,221 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,221 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,222 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,222 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,222 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,222 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,222 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,222 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,222 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,222 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,222 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:32:30,222 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,222 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:32:30,222 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,223 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,223 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,223 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,223 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,223 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,223 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,223 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,223 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,223 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:32:30,223 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,223 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,223 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,224 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:32:30,224 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,224 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,224 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,224 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,224 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:32:30,224 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,224 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,224 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:32:30,224 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:32:30,224 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:32:30,224 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:32:30,225 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:32:30,225 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,225 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,225 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,225 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,225 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,225 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:32:30,225 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,225 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,225 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,225 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,225 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,226 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,226 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:32:30,226 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,226 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,226 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,226 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,226 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,226 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:32:30,226 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,226 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:32:30,226 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:32:30,226 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:32:30,227 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,227 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,227 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,227 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:32:30,227 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:32:30,227 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:32:30,227 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:32:30,227 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,227 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:32:30,227 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:32:30,227 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:32:30,385 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:32:30,564 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:32:30,737 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:32:30,920 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 02:32:30] "[35m[1mPOST /report_dashboard HTTP/1.1[0m" 500 -
2021-04-09 02:32:56,278 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-09 02:32:58,052 INFO logger Thread-1 : backend started
2021-04-09 02:32:58,064 WARNING flask_cors.core Thread-3 : Unknown option passed to Flask-CORS: support_credentials
2021-04-09 02:32:58,064 WARNING flask_cors.core Thread-3 : Unknown option passed to Flask-CORS: support_credentials
2021-04-09 02:32:58,064 INFO logger Thread-3 : backend started
2021-04-09 02:32:58,078 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 02:32:58] "[35m[1mOPTIONS /report_dashboard HTTP/1.1[0m" 500 -
2021-04-09 02:33:18,115 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 02:33:18] "[35m[1mOPTIONS /report_dashboard HTTP/1.1[0m" 500 -
2021-04-09 02:33:21,979 WARNING flask_cors.core Thread-5 : Unknown option passed to Flask-CORS: support_credentials
2021-04-09 02:33:21,979 WARNING flask_cors.core Thread-5 : Unknown option passed to Flask-CORS: support_credentials
2021-04-09 02:33:21,979 INFO logger Thread-5 : backend started
2021-04-09 02:33:22,533 DEBUG matplotlib Thread-5 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:33:22,533 DEBUG matplotlib Thread-5 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:33:22,536 DEBUG matplotlib Thread-5 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:33:22,538 DEBUG matplotlib Thread-5 : matplotlib version 3.3.4
2021-04-09 02:33:22,538 DEBUG matplotlib Thread-5 : interactive is False
2021-04-09 02:33:22,538 DEBUG matplotlib Thread-5 : platform is win32
2021-04-09 02:33:22,538 DEBUG matplotlib Thread-5 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'getpass', 'app', 'flask_cors', 'flask_cors.decorator', 'werkzeug.security', 'flask_cors.core', 'werkzeug.debug.console', 'six', 'code', 'flask_cors.extension', 'codeop', 'flask_cors.version', 'werkzeug.debug.repr', 'flask_bcrypt', 'werkzeug.debug.tbtools', 'bcrypt', 'ctypes.util', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'bson.code', 'bson.codec_options', 'bson.dbref', 'bson.son', 'werkzeug._reloader', 'bson.decimal128', 'bson.errors', 'bson.int64', 'bson.max_key', 'encodings.idna', 'bson.min_key', 'stringprep', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'wsgi', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 02:33:22,573 DEBUG matplotlib Thread-5 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:33:22,576 DEBUG matplotlib.font_manager Thread-5 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-09 02:33:22,738 DEBUG matplotlib.pyplot Thread-5 : Loaded backend tkagg version unknown.
2021-04-09 02:33:22,739 DEBUG matplotlib.pyplot Thread-5 : Loaded backend TkAgg version unknown.
2021-04-09 02:33:22,762 INFO werkzeug Thread-5 : 127.0.0.1 - - [09/Apr/2021 02:33:22] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 02:33:22,777 DEBUG matplotlib.pyplot Thread-6 : Loaded backend agg version unknown.
2021-04-09 02:33:22,801 DEBUG matplotlib.font_manager Thread-6 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-04-09 02:33:22,801 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,801 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,801 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,801 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,801 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,802 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,802 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,802 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,802 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,802 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:33:22,802 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,802 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:33:22,802 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,802 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,802 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,802 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,802 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,802 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,802 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:33:22,802 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:33:22,803 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:33:22,803 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,803 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,803 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:33:22,803 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,803 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,803 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,803 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,803 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,803 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,803 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,803 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,803 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,803 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,803 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,803 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,804 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,804 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,804 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:33:22,804 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,804 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,804 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:33:22,804 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:33:22,804 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,804 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,804 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,804 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,804 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,804 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,804 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,804 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,804 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,805 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,805 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,805 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,805 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:33:22,805 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,805 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,805 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,805 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,805 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:33:22,805 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,805 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,805 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:33:22,805 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,805 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,805 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,806 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:33:22,806 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,806 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:33:22,806 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,806 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,806 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:33:22,806 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,806 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:33:22,806 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,806 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,806 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:33:22,806 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,806 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,806 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,806 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,806 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,807 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,807 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:33:22,807 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,807 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,807 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,807 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,807 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:33:22,807 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,807 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,807 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,807 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,807 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,807 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:33:22,807 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,807 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,807 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,808 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,808 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,808 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,808 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:33:22,808 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:33:22,808 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,808 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:33:22,808 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:33:22,808 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,808 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,808 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,808 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,808 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,808 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,808 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,809 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,809 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,809 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:33:22,809 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,809 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,809 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,809 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,809 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,809 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,809 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:33:22,809 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,809 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,809 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,809 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,809 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,810 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:33:22,810 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,810 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,810 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,810 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:33:22,810 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,810 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:33:22,810 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,810 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,810 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,810 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,810 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,810 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:33:22,810 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,810 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:33:22,810 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,811 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,811 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,811 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,811 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:33:22,811 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,811 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:33:22,811 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,811 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:33:22,811 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,811 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,811 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:33:22,811 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,811 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,811 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,811 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,812 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:33:22,812 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,812 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,812 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:33:22,812 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,812 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:33:22,812 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,812 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,812 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:33:22,812 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,812 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,812 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,812 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,812 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,812 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,812 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,813 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,813 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,813 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,813 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:33:22,813 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:33:22,813 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,813 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,813 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,813 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,813 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,813 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,813 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,813 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:33:22,813 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,813 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,813 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,814 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,814 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:33:22,814 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,814 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,814 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:33:22,814 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,814 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,814 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,814 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,814 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,814 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,814 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,814 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:33:22,814 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,814 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,814 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,815 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,815 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,815 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,815 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,815 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,815 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,816 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,816 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,816 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,816 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,816 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,816 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,816 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:33:22,817 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,817 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,817 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,817 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,817 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,817 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:33:22,817 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,817 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,817 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,817 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,817 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,817 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:33:22,817 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,817 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,818 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,818 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,818 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,818 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,818 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,818 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,818 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:33:22,818 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,818 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:33:22,818 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:33:22,818 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:33:22,818 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,818 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:33:22,818 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,819 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,819 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,819 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,819 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,819 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:33:22,819 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,819 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,819 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,819 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,819 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,819 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,819 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,819 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,819 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,819 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,820 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,820 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,820 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,820 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,820 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,820 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,820 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,820 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,820 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,820 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:33:22,820 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,820 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,820 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,820 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,820 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:33:22,821 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,821 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,821 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,821 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,821 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,821 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,821 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:33:22,821 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,821 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,821 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,821 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,821 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,821 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:33:22,821 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,821 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,821 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:33:22,822 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:33:22,822 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,822 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,822 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,822 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,822 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,822 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,822 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,822 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,822 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:33:22,822 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,822 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,822 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,822 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,822 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,823 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,823 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,823 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,823 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,823 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,823 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:33:22,823 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,823 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:33:22,823 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,823 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,823 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,823 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,823 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,823 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,823 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,824 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,824 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,824 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:33:22,824 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,824 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,824 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,824 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:33:22,824 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,824 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,824 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,824 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,824 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:33:22,824 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,824 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,824 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:33:22,824 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:33:22,825 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:33:22,825 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:33:22,825 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:33:22,825 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,825 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,825 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,825 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,825 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,825 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:33:22,825 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,825 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,825 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,825 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,825 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,826 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,826 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:33:22,826 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,826 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,826 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,826 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,826 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,826 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:33:22,826 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,826 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,826 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:33:22,826 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:33:22,826 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,826 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,826 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,826 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,827 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:33:22,827 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:33:22,827 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,827 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,827 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:33:22,827 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,827 DEBUG matplotlib.font_manager Thread-6 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:33:22,831 DEBUG matplotlib.font_manager Thread-6 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-04-09 02:33:22,831 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,831 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,831 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,831 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,831 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,831 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,832 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,832 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,832 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,832 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:33:22,832 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,832 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:33:22,832 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,832 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,832 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,832 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,832 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,832 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,832 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:33:22,832 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:33:22,832 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:33:22,833 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,833 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,833 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:33:22,833 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,833 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,833 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,833 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,833 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,833 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,833 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,833 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,833 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,833 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,833 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,833 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,833 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,834 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,834 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:33:22,834 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,834 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,834 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:33:22,834 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:33:22,834 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,834 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,834 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,834 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,834 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,834 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,834 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,834 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,834 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,834 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,835 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,835 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,835 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:33:22,835 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,835 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,835 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,835 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,835 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:33:22,835 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,835 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,835 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:33:22,835 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,835 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,835 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,835 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:33:22,835 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,836 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:33:22,836 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,836 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,836 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:33:22,836 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,836 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:33:22,836 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,836 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,836 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:33:22,836 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,836 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,836 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,836 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,836 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,836 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,836 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:33:22,837 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,837 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,837 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,837 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,837 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:33:22,837 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,837 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,837 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,837 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,837 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,837 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:33:22,837 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,837 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,837 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,838 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,838 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,838 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,838 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:33:22,838 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:33:22,838 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,838 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:33:22,838 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:33:22,838 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,838 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,838 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,838 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,838 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,838 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,838 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,838 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,839 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,839 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:33:22,839 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,839 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,839 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,839 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,839 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,839 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,839 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:33:22,839 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,839 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,839 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,839 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,839 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,839 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:33:22,840 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,840 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,840 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,840 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:33:22,840 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,840 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:33:22,840 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,840 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,840 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,840 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,840 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,840 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:33:22,841 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,841 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:33:22,841 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,841 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,841 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,841 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,841 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:33:22,841 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,841 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:33:22,841 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,841 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:33:22,841 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,841 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,841 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:33:22,842 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,842 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,842 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,842 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,842 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:33:22,842 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,842 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,842 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:33:22,842 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,842 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:33:22,842 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,842 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,842 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:33:22,842 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,842 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,843 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,843 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,843 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,843 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,843 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,843 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,843 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,843 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,843 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:33:22,843 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:33:22,843 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,843 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,843 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,843 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,843 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,843 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,844 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,844 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:33:22,844 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,844 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,844 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,844 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,844 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:33:22,844 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,844 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,844 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:33:22,844 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,844 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,844 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,844 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,845 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,845 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,845 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,845 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:33:22,845 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,845 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,845 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,845 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,845 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,845 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,845 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,845 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,845 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,845 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,845 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,845 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,846 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,846 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,846 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,846 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:33:22,846 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,846 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,846 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,846 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,846 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,846 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:33:22,846 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,846 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,846 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,846 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,847 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,847 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:33:22,847 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,847 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,847 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,847 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,847 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,847 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,847 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,847 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,847 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:33:22,847 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,847 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:33:22,847 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:33:22,847 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:33:22,847 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,848 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:33:22,848 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,848 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,848 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,848 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,848 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,848 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:33:22,848 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,848 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,848 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,848 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,848 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,848 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,848 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,848 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,848 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,849 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,849 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,849 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,849 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,849 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,849 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,849 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,849 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,849 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,849 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,849 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:33:22,849 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,849 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,849 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,849 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,850 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:33:22,850 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,850 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,850 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,850 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,850 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,850 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,850 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:33:22,850 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,850 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,850 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,850 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,850 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,850 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:33:22,850 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,850 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,851 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:33:22,851 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:33:22,851 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,851 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,851 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,851 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,851 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,851 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,851 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,851 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,851 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:33:22,851 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,851 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,851 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,851 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,851 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,851 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,852 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,852 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,852 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,852 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,852 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:33:22,852 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,852 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:33:22,852 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,852 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,852 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,852 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,852 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,852 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,852 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,852 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,853 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,853 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:33:22,853 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,853 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,853 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,853 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:33:22,853 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,854 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,854 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,854 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,854 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:33:22,854 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,854 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,854 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:33:22,854 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:33:22,854 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:33:22,855 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:33:22,855 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:33:22,855 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,855 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,855 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,855 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,855 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,855 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:33:22,855 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,855 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,855 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,855 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,855 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,855 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,855 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:33:22,855 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,856 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,856 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,856 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,856 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,856 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:33:22,856 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,856 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:33:22,856 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:33:22,856 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:33:22,856 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,856 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,856 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,856 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:33:22,857 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:33:22,857 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:33:22,857 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:33:22,857 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,857 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:33:22,857 DEBUG matplotlib.font_manager Thread-6 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:33:22,857 DEBUG matplotlib.font_manager Thread-6 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:33:22,970 DEBUG matplotlib.pyplot Thread-6 : Loaded backend agg version unknown.
2021-04-09 02:33:23,099 DEBUG matplotlib.pyplot Thread-6 : Loaded backend agg version unknown.
2021-04-09 02:33:23,249 DEBUG matplotlib.pyplot Thread-6 : Loaded backend agg version unknown.
2021-04-09 02:33:23,426 INFO werkzeug Thread-6 : 127.0.0.1 - - [09/Apr/2021 02:33:23] "[35m[1mPOST /report_dashboard HTTP/1.1[0m" 500 -
2021-04-09 02:36:24,579 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-09 02:36:26,189 INFO logger Thread-1 : backend started
2021-04-09 02:36:40,803 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 02:36:40] "[35m[1mOPTIONS /report_dashboard HTTP/1.1[0m" 500 -
2021-04-09 02:37:03,295 WARNING flask_cors.core Thread-4 : Unknown option passed to Flask-CORS: support_credentials
2021-04-09 02:37:03,295 WARNING flask_cors.core Thread-4 : Unknown option passed to Flask-CORS: support_credentials
2021-04-09 02:37:03,295 INFO logger Thread-4 : backend started
2021-04-09 02:37:03,837 DEBUG matplotlib Thread-4 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:37:03,837 DEBUG matplotlib Thread-4 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:37:03,840 DEBUG matplotlib Thread-4 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:37:03,842 DEBUG matplotlib Thread-4 : matplotlib version 3.3.4
2021-04-09 02:37:03,842 DEBUG matplotlib Thread-4 : interactive is False
2021-04-09 02:37:03,842 DEBUG matplotlib Thread-4 : platform is win32
2021-04-09 02:37:03,842 DEBUG matplotlib Thread-4 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'getpass', 'app', 'werkzeug.security', 'flask_cors', 'werkzeug.debug.console', 'flask_cors.decorator', 'code', 'flask_cors.core', 'codeop', 'six', 'werkzeug.debug.repr', 'flask_cors.extension', 'werkzeug.debug.tbtools', 'flask_cors.version', 'ctypes.util', 'flask_bcrypt', 'bcrypt', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'bson.code', 'werkzeug._reloader', 'bson.codec_options', 'bson.dbref', 'bson.son', 'encodings.idna', 'bson.decimal128', 'bson.errors', 'stringprep', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'wsgi', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 02:37:03,877 DEBUG matplotlib Thread-4 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:37:03,880 DEBUG matplotlib.font_manager Thread-4 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-09 02:37:04,029 DEBUG matplotlib.pyplot Thread-4 : Loaded backend tkagg version unknown.
2021-04-09 02:37:04,029 DEBUG matplotlib.pyplot Thread-4 : Loaded backend TkAgg version unknown.
2021-04-09 02:37:04,052 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 02:37:04] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 02:37:04,378 DEBUG matplotlib.pyplot Thread-5 : Loaded backend agg version unknown.
2021-04-09 02:37:04,399 DEBUG matplotlib.font_manager Thread-5 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-04-09 02:37:04,400 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,400 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,400 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,400 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,400 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,400 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,400 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,400 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,400 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,400 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:37:04,400 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,400 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:37:04,400 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,400 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,400 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,401 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,401 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,401 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,401 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:37:04,401 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:37:04,401 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:37:04,401 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,401 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,401 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:37:04,401 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,401 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,401 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,401 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,401 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,401 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,402 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,402 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,402 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,402 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,402 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,402 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,402 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,402 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,402 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:37:04,402 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,402 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,402 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:37:04,402 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:37:04,402 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,402 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,402 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,403 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,403 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,403 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,403 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,403 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,403 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,403 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,403 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,403 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,403 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:37:04,403 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,403 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,403 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,403 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,403 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:37:04,404 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,404 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,404 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:37:04,404 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,404 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,404 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,404 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:37:04,404 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,404 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:37:04,404 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,404 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,404 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:37:04,404 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,404 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:37:04,404 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,405 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,405 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:37:04,405 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,405 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,405 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,405 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,405 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,405 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,405 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:37:04,405 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,405 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,405 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,405 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,405 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:37:04,405 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,405 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,406 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,406 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,406 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,406 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:37:04,406 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,406 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,406 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,406 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,406 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,406 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,406 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:37:04,406 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:37:04,406 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,406 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:37:04,406 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:37:04,407 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,407 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,407 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,407 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,407 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,407 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,407 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,407 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,407 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,407 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:37:04,407 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,407 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,407 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,407 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,407 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,407 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,408 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:37:04,408 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,408 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,408 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,408 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,408 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,408 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:37:04,408 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,408 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,408 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,408 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:37:04,408 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,408 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:37:04,408 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,408 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,408 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,409 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,409 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,409 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:37:04,409 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,409 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:37:04,409 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,409 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,409 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,409 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,409 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:37:04,409 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,409 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:37:04,409 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,409 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:37:04,409 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,410 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,410 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:37:04,410 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,410 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,410 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,410 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,410 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:37:04,410 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,410 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,410 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:37:04,410 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,410 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:37:04,410 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,410 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,410 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:37:04,410 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,411 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,411 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,411 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,411 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,411 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,411 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,411 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,411 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,411 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,411 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:37:04,411 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:37:04,411 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,411 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,411 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,411 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,411 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,412 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,412 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,412 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:37:04,412 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,412 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,412 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,412 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,412 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:37:04,412 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,412 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,412 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:37:04,412 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,412 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,412 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,412 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,412 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,413 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,413 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,413 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:37:04,413 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,413 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,413 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,413 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,413 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,413 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,413 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,413 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,413 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,413 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,413 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,414 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,414 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,414 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,414 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,414 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:37:04,414 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,414 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,414 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,414 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,414 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,414 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:37:04,414 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,414 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,414 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,414 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,414 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,415 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:37:04,415 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,415 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,415 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,415 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,415 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,415 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,415 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,415 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,415 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:37:04,415 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,415 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:37:04,415 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:37:04,415 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:37:04,415 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,415 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:37:04,416 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,416 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,416 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,416 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,416 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,416 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:37:04,416 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,416 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,416 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,416 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,416 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,416 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,416 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,416 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,416 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,417 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,417 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,417 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,417 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,417 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,417 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,417 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,417 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,417 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,417 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,417 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:37:04,417 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,417 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,417 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,417 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,417 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:37:04,418 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,418 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,418 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,418 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,418 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,418 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,418 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:37:04,418 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,418 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,418 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,418 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,418 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,418 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:37:04,418 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,418 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,419 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:37:04,419 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:37:04,419 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,419 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,419 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,419 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,419 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,419 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,419 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,419 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,419 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:37:04,419 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,419 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,419 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,419 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,420 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,420 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,420 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,420 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,420 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,420 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,420 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:37:04,420 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,420 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:37:04,420 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,420 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,420 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,420 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,420 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,420 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,421 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,421 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,421 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,421 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:37:04,421 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,421 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,421 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,421 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:37:04,421 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,421 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,421 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,421 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,421 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:37:04,421 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,421 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,421 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:37:04,422 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:37:04,422 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:37:04,422 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:37:04,422 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:37:04,422 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,422 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,422 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,422 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,422 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,422 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:37:04,422 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,422 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,422 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,422 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,422 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,423 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,423 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:37:04,423 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,423 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,423 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,423 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,423 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,423 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:37:04,423 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,423 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,423 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:37:04,423 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:37:04,423 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,423 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,423 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,423 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,424 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:37:04,424 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:37:04,424 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,424 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,424 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:37:04,424 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,424 DEBUG matplotlib.font_manager Thread-5 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:37:04,428 DEBUG matplotlib.font_manager Thread-5 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-04-09 02:37:04,428 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,428 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,428 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,428 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,428 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,428 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,428 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,428 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,429 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,429 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:37:04,429 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,429 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:37:04,429 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,429 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,429 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,429 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,429 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,429 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,429 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:37:04,429 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:37:04,429 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:37:04,429 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,429 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,430 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:37:04,430 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,430 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,430 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,430 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,430 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,430 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,430 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,430 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,430 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,430 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,430 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,430 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,430 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,430 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,430 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:37:04,431 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,431 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,431 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:37:04,431 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:37:04,431 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,431 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,431 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,431 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,431 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,431 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,431 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,431 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,431 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,431 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,432 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,432 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,432 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:37:04,432 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,432 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,432 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,432 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,432 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:37:04,432 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,432 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,432 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:37:04,432 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,432 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,432 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,432 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:37:04,432 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,433 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:37:04,433 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,433 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,433 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:37:04,433 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,433 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:37:04,433 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,433 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,433 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:37:04,433 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,433 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,433 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,433 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,433 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,433 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,434 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:37:04,434 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,434 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,434 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,434 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,434 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:37:04,434 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,434 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,434 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,434 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,434 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,434 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:37:04,434 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,434 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,434 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,434 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,435 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,435 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,435 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:37:04,435 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:37:04,435 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,435 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:37:04,435 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:37:04,435 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,435 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,435 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,435 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,435 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,435 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,435 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,435 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,435 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,436 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:37:04,436 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,436 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,436 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,436 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,436 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,436 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,436 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:37:04,436 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,436 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,436 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,436 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,436 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,436 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:37:04,436 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,437 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,437 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,437 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:37:04,437 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,437 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:37:04,437 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,437 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,437 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,437 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,437 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,437 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:37:04,437 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,437 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:37:04,437 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,437 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,437 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,438 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,438 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:37:04,438 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,438 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:37:04,438 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,438 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:37:04,438 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,438 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,438 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:37:04,438 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,438 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,438 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,438 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,438 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:37:04,438 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,438 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,439 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:37:04,439 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,439 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:37:04,439 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,439 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,439 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:37:04,439 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,439 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,439 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,439 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,439 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,439 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,439 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,439 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,439 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,440 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,440 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:37:04,440 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:37:04,440 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,440 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,440 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,440 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,440 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,440 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,440 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,440 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:37:04,440 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,440 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,440 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,440 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,440 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:37:04,441 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,441 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,441 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:37:04,441 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,441 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,441 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,441 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,441 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,441 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,441 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,441 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:37:04,441 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,441 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,441 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,441 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,442 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,442 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,442 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,442 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,442 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,442 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,442 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,442 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,442 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,442 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,442 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,442 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:37:04,442 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,442 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,442 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,442 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,443 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,443 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:37:04,443 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,443 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,443 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,443 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,443 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,443 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:37:04,443 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,443 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,443 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,443 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,443 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,443 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,443 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,444 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,444 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:37:04,444 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,444 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:37:04,444 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:37:04,444 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:37:04,444 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,444 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:37:04,444 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,444 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,444 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,444 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,444 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,444 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:37:04,444 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,444 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,445 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,445 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,445 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,445 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,445 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,445 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,445 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,445 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,445 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,445 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,445 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,445 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,445 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,445 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,445 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,446 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,446 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,446 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:37:04,446 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,446 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,446 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,446 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,446 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:37:04,446 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,446 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,446 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,446 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,446 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,446 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,446 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:37:04,446 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,447 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,447 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,447 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,447 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,447 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:37:04,447 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,447 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,447 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:37:04,447 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:37:04,447 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,447 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,447 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,447 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,447 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,447 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,447 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,448 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,448 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:37:04,448 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,448 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,448 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,448 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,448 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,448 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,448 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,448 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,448 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,448 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,448 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:37:04,448 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,448 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:37:04,448 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,449 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,449 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,449 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,449 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,449 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,449 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,449 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,449 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,449 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:37:04,449 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,449 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,449 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,449 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:37:04,449 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,449 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,449 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,450 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,450 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:37:04,450 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,450 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,450 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:37:04,450 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:37:04,450 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:37:04,450 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:37:04,450 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:37:04,450 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,450 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,450 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,450 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,450 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,450 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:37:04,451 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,451 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,451 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,451 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,451 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,451 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,451 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:37:04,451 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,451 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,451 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,451 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,451 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,451 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:37:04,451 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,451 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:37:04,451 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:37:04,452 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:37:04,452 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,452 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,452 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,452 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:37:04,452 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:37:04,452 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:37:04,452 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:37:04,452 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,452 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:37:04,452 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:37:04,452 DEBUG matplotlib.font_manager Thread-5 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:37:04,566 DEBUG matplotlib.pyplot Thread-5 : Loaded backend agg version unknown.
2021-04-09 02:37:04,701 DEBUG matplotlib.pyplot Thread-5 : Loaded backend agg version unknown.
2021-04-09 02:37:04,835 DEBUG matplotlib.pyplot Thread-5 : Loaded backend agg version unknown.
2021-04-09 02:37:05,013 INFO werkzeug Thread-5 : 127.0.0.1 - - [09/Apr/2021 02:37:05] "[35m[1mPOST /report_dashboard HTTP/1.1[0m" 500 -
2021-04-09 02:39:23,354 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-09 02:39:25,117 INFO logger Thread-1 : backend started
2021-04-09 02:39:25,728 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:39:25,728 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:39:25,732 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:39:25,734 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-09 02:39:25,734 DEBUG matplotlib Thread-1 : interactive is False
2021-04-09 02:39:25,734 DEBUG matplotlib Thread-1 : platform is win32
2021-04-09 02:39:25,735 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'flask_cors', 'werkzeug.security', 'flask_cors.decorator', 'werkzeug.debug.console', 'flask_cors.core', 'code', 'six', 'codeop', 'flask_cors.extension', 'flask_cors.version', 'werkzeug.debug.repr', 'flask_bcrypt', 'werkzeug.debug.tbtools', 'bcrypt', 'ctypes.util', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'bson.code', 'bson.codec_options', 'bson.dbref', 'werkzeug._reloader', 'bson.son', 'bson.decimal128', 'encodings.idna', 'bson.errors', 'stringprep', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 02:39:25,771 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:39:25,774 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-09 02:39:25,966 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-09 02:39:25,966 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-09 02:39:25,992 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 02:39:25] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 02:39:26,016 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:39:26,041 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-04-09 02:39:26,041 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,041 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,041 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,042 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,042 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,042 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,042 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,042 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,042 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,042 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:39:26,042 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,042 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:39:26,042 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,042 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:39:26,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:39:26,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:39:26,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:39:26,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,044 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,044 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,044 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,044 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,044 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,044 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,044 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,044 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,044 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,044 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,044 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,045 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,045 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:39:26,045 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,045 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,045 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:39:26,045 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:39:26,045 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,045 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,045 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,045 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,045 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:39:26,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:39:26,047 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,047 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,047 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:39:26,047 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,047 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,047 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,047 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:39:26,048 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,048 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:39:26,048 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,048 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,048 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:39:26,048 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,048 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:39:26,048 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,048 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,049 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:39:26,049 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,049 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,049 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,049 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,049 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,049 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,049 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:39:26,049 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,049 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,050 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,050 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,050 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:39:26,050 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,050 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,050 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,050 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,050 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,050 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:39:26,050 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,050 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,051 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,051 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,051 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,051 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,051 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:39:26,051 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:39:26,051 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,051 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:39:26,051 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:39:26,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:39:26,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:39:26,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:39:26,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:39:26,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:39:26,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:39:26,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:39:26,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:39:26,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:39:26,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:39:26,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:39:26,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:39:26,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:39:26,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:39:26,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:39:26,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:39:26,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:39:26,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:39:26,059 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,059 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,059 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,059 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,059 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:39:26,059 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,059 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,059 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:39:26,059 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,059 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,059 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,060 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,060 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,060 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,060 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,060 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:39:26,060 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,062 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,062 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,062 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,062 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:39:26,062 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,062 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,062 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,062 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,062 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:39:26,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:39:26,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,064 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,064 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,064 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,064 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:39:26,064 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,064 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:39:26,064 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:39:26,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:39:26,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:39:26,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:39:26,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:39:26,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:39:26,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:39:26,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:39:26,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:39:26,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:39:26,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:39:26,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,070 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,070 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,070 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,070 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,070 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,070 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,070 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,070 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,072 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:39:26,072 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,072 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:39:26,072 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,072 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,072 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,072 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,072 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,072 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,072 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:39:26,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:39:26,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:39:26,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,074 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,074 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:39:26,074 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:39:26,074 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:39:26,074 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:39:26,074 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:39:26,074 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,074 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,074 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,074 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,074 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,075 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:39:26,075 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,075 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,075 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,075 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,075 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,075 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,075 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:39:26,075 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,075 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,075 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,075 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,076 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,076 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:39:26,076 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,076 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,076 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:39:26,076 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:39:26,076 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,076 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,076 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,076 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,076 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:39:26,076 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:39:26,076 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,077 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,077 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:39:26,077 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,077 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:39:26,083 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-04-09 02:39:26,083 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,083 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,083 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,083 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,083 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,083 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,083 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:39:26,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:39:26,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:39:26,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:39:26,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:39:26,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:39:26,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:39:26,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:39:26,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:39:26,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:39:26,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:39:26,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:39:26,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:39:26,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:39:26,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:39:26,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:39:26,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:39:26,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:39:26,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,091 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,091 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,091 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,091 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:39:26,091 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,091 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,091 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,091 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,091 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,091 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:39:26,091 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,091 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,091 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,091 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:39:26,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:39:26,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:39:26,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:39:26,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:39:26,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:39:26,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:39:26,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,095 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,095 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,095 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:39:26,095 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,095 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:39:26,095 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,095 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,095 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,095 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,095 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,095 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:39:26,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:39:26,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:39:26,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:39:26,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:39:26,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:39:26,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:39:26,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:39:26,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:39:26,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:39:26,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,099 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,099 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:39:26,099 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:39:26,099 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,099 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,099 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,099 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,099 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,099 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,099 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,099 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:39:26,099 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:39:26,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:39:26,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,101 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,101 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,101 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,101 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:39:26,101 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,101 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,101 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,101 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,101 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,101 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,101 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,102 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,102 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,102 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,102 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,102 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,102 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,102 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,102 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,102 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:39:26,102 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,102 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,103 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,103 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,103 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,103 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:39:26,103 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,103 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,103 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,103 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,103 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,103 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:39:26,104 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,104 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,104 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,104 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,104 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,104 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,104 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,104 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,105 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:39:26,105 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,105 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:39:26,105 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:39:26,105 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:39:26,105 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,105 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:39:26,105 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,105 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,105 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,106 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,106 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,106 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:39:26,106 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,106 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,106 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,106 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,106 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,106 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,106 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,107 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,107 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,107 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,107 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,107 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,107 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,107 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,107 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,107 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,107 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,107 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,108 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,108 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:39:26,108 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,108 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,108 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,108 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,108 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:39:26,108 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,108 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,108 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,108 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,108 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,109 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,109 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:39:26,109 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,109 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,109 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,109 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,109 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,109 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:39:26,109 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,109 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,110 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:39:26,110 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:39:26,110 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,110 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,110 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,110 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,110 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,110 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,110 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,110 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,110 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:39:26,111 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,111 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,111 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,111 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,111 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,111 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,111 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,111 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,111 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,111 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,111 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:39:26,111 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,112 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:39:26,112 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,112 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,112 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,112 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,112 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,112 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,112 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,113 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,113 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,113 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:39:26,113 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,113 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,113 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,113 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:39:26,113 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,113 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,113 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,114 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,114 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:39:26,114 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,114 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,114 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:39:26,114 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:39:26,114 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:39:26,114 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:39:26,114 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:39:26,114 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,114 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,114 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,114 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,115 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,115 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:39:26,115 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,115 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,115 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,115 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,115 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,115 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,115 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:39:26,115 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,115 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,115 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,115 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,116 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,116 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:39:26,116 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,116 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:39:26,116 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:39:26,116 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:39:26,116 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,116 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,116 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,116 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:39:26,116 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:39:26,116 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:39:26,116 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:39:26,117 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,117 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:39:26,117 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:39:26,117 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:39:26,270 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:39:26,442 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:39:26,658 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:39:26,903 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 02:39:26] "[35m[1mPOST /report_dashboard HTTP/1.1[0m" 500 -
2021-04-09 02:42:25,502 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-09 02:42:27,398 INFO logger Thread-1 : backend started
2021-04-09 02:42:28,078 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:42:28,078 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:42:28,081 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:42:28,085 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-09 02:42:28,086 DEBUG matplotlib Thread-1 : interactive is False
2021-04-09 02:42:28,086 DEBUG matplotlib Thread-1 : platform is win32
2021-04-09 02:42:28,086 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'flask_cors', 'flask_cors.decorator', 'werkzeug.security', 'flask_cors.core', 'werkzeug.debug.console', 'six', 'code', 'flask_cors.extension', 'flask_cors.version', 'codeop', 'flask_bcrypt', 'werkzeug.debug.repr', 'bcrypt', 'werkzeug.debug.tbtools', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'ctypes.util', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'bson.code', 'bson.codec_options', 'bson.dbref', 'bson.son', 'bson.decimal128', 'werkzeug._reloader', 'bson.errors', 'bson.int64', 'bson.max_key', 'encodings.idna', 'bson.min_key', 'bson.objectid', 'stringprep', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 02:42:28,141 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:42:28,144 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-09 02:42:28,355 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-09 02:42:28,356 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-09 02:42:30,756 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 02:42:30] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 02:42:31,029 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:42:31,049 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-04-09 02:42:31,050 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,050 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,050 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,050 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,050 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,050 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,050 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,050 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,050 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,050 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:42:31,050 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,050 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:42:31,050 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,051 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,051 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,051 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,051 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,051 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,051 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:42:31,051 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:42:31,051 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:42:31,051 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,051 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,051 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:42:31,051 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,051 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,051 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,051 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,051 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:42:31,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:42:31,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:31,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,052 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:42:31,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:42:31,053 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:42:31,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:42:31,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:42:31,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:42:31,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:42:31,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,054 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:42:31,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:42:31,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:42:31,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,055 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:42:31,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:31,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:42:31,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:42:31,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:42:31,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,056 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:42:31,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:42:31,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,057 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:42:31,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:42:31,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:42:31,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:42:31,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,058 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:42:31,059 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,059 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,059 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,059 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,059 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:42:31,059 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,059 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:42:31,059 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,059 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:31,060 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,060 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,060 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:31,060 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,060 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,060 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,060 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,060 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:42:31,060 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,060 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,060 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:31,060 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:42:31,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:42:31,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,061 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:42:31,062 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:42:31,062 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,062 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,062 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,062 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,062 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,062 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,062 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,062 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:42:31,062 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,062 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,062 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,062 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,062 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:31,062 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:42:31,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:42:31,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,063 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,064 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,064 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,064 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,064 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,064 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,064 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,064 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,064 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,064 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,064 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,064 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,064 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:42:31,064 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,064 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,064 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:42:31,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:42:31,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,065 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:42:31,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:42:31,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:31,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:31,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:42:31,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:42:31,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,066 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,067 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:31,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:42:31,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:42:31,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,068 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:42:31,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:42:31,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:42:31,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:42:31,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,069 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,070 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,070 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,070 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,070 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,070 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,070 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,070 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,070 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:42:31,070 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,070 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:42:31,070 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,070 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,070 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,070 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,070 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,071 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,071 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,071 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,071 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,071 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:42:31,071 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,071 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,071 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,071 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:42:31,071 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,071 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,071 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,071 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,071 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:42:31,071 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,071 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,071 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:31,072 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:42:31,072 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:31,072 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:42:31,072 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:42:31,072 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,072 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,072 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,072 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,072 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,072 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:42:31,072 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,072 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,072 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,072 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,072 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:42:31,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:42:31,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:42:31,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:42:31,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,073 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:42:31,074 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:42:31,074 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,074 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,074 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:42:31,074 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,074 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:42:31,077 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-04-09 02:42:31,078 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,078 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,078 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,078 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,078 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,078 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,078 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,078 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,078 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,078 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:42:31,078 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,078 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:42:31,078 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,078 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,079 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,079 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,079 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,079 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,079 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:42:31,079 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:42:31,079 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:42:31,079 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,079 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,079 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:42:31,079 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,079 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,079 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,079 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,079 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,080 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,080 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,080 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,080 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,080 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,080 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,080 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,080 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,080 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,080 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:42:31,080 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,080 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,080 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:42:31,080 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:31,080 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,080 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,081 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,081 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,081 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,081 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,081 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,081 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,081 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,081 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,081 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,081 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,081 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:42:31,081 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,081 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,081 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,081 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,081 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:42:31,082 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,082 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,082 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:42:31,082 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,082 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,082 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,082 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:42:31,082 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,082 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:42:31,082 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,082 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,082 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:42:31,082 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,082 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:42:31,082 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,082 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,083 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:42:31,083 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,083 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,083 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,083 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,083 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,083 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,083 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:42:31,083 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,083 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,083 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,083 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,083 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:42:31,083 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,083 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,083 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,083 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,083 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:42:31,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:31,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:42:31,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:42:31,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:42:31,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,084 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:42:31,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:42:31,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,085 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:42:31,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:42:31,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:42:31,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:42:31,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,086 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:42:31,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:42:31,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:42:31,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:31,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:31,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,087 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:42:31,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:31,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:42:31,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:42:31,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,088 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:42:31,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:42:31,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:42:31,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,089 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:31,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:42:31,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:42:31,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,090 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,091 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,091 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:42:31,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:42:31,092 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:42:31,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:42:31,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,093 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:42:31,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:31,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:31,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:42:31,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:42:31,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,094 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,095 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,095 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,095 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,095 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,095 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,095 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,095 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,095 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,095 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,095 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,095 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:31,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:42:31,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:42:31,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,096 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:42:31,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:42:31,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:42:31,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:42:31,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,097 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:42:31,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:42:31,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,098 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,099 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:42:31,099 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,099 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,099 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,099 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:42:31,099 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,099 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,099 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,099 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:42:31,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:31,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:42:31,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:31,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:42:31,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:42:31,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:42:31,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,100 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,101 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,101 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:42:31,101 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,101 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,101 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,101 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,101 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,101 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:42:31,101 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,101 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:31,101 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:42:31,101 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:42:31,101 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,102 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,102 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,102 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:31,102 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:42:31,102 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:42:31,102 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:42:31,102 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,102 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:42:31,102 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:31,102 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:42:31,209 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:42:31,332 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:42:31,455 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:42:31,600 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 02:42:31] "[35m[1mPOST /report_dashboard HTTP/1.1[0m" 500 -
2021-04-09 02:42:44,876 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-09 02:42:46,402 INFO logger Thread-1 : backend started
2021-04-09 02:42:47,003 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:42:47,003 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:42:47,006 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:42:47,010 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-09 02:42:47,010 DEBUG matplotlib Thread-1 : interactive is False
2021-04-09 02:42:47,010 DEBUG matplotlib Thread-1 : platform is win32
2021-04-09 02:42:47,010 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'werkzeug.security', 'flask_cors', 'werkzeug.debug.console', 'flask_cors.decorator', 'code', 'flask_cors.core', 'codeop', 'six', 'werkzeug.debug.repr', 'flask_cors.extension', 'werkzeug.debug.tbtools', 'flask_cors.version', 'flask_bcrypt', 'ctypes.util', 'bcrypt', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'werkzeug._reloader', 'bson.code', 'bson.codec_options', 'bson.dbref', 'encodings.idna', 'bson.son', 'bson.decimal128', 'stringprep', 'bson.errors', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 02:42:47,051 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:42:47,054 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-09 02:42:47,265 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-09 02:42:47,266 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-09 02:42:47,850 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 02:42:47] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 02:42:48,126 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:42:48,149 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-04-09 02:42:48,150 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,150 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,150 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,150 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,150 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,150 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,150 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,150 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,150 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,150 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:42:48,151 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,151 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:42:48,151 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,151 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,151 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,151 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,151 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,151 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,151 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:42:48,151 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:42:48,151 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:42:48,151 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,151 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,151 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:42:48,152 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,152 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,152 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,152 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,152 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,152 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,152 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,152 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,152 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,152 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,152 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,152 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,152 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,152 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,152 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:42:48,153 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,153 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,153 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:42:48,153 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:48,153 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,153 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,153 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,153 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,153 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,154 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,154 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,154 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,154 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,154 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,154 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,154 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,154 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:42:48,154 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,154 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,154 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,154 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,154 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:42:48,155 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,155 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,155 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:42:48,155 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,155 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,155 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,155 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:42:48,155 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,155 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:42:48,155 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,155 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,155 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:42:48,155 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:42:48,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:42:48,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:42:48,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,156 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,157 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:42:48,157 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,157 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,157 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,157 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,157 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,157 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:42:48,157 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,157 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,157 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,157 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,157 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,157 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,158 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:48,158 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:42:48,158 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,158 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:42:48,158 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:42:48,158 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,158 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,158 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,158 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,158 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,158 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,158 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,159 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,159 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,159 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:42:48,159 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,159 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,159 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,159 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,159 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,159 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,159 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:42:48,159 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,159 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,159 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,159 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:42:48,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:42:48,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:42:48,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,160 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:42:48,161 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,161 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:42:48,161 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,161 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,161 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,161 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,161 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:42:48,161 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,161 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:42:48,161 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,161 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:48,161 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,161 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,161 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:48,162 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,162 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,162 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,162 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,162 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:42:48,162 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,162 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,162 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:48,162 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,162 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:42:48,162 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,162 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,162 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:42:48,162 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,162 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,163 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,163 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,163 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,163 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,163 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,163 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,163 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,163 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,163 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:42:48,163 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:42:48,163 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,163 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,163 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,163 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,164 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,164 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,164 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,164 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:42:48,164 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,164 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,164 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,164 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,164 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:48,164 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,165 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,165 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:42:48,165 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,165 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,165 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,165 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,165 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,165 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,165 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,165 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:42:48,165 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,165 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,165 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,166 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,166 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,166 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,166 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,166 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,166 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,166 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,166 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,166 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,166 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,166 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,166 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,166 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:42:48,166 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:42:48,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:42:48,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,167 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,168 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,168 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,168 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,168 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,168 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:42:48,168 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,168 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:42:48,168 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:48,168 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:48,168 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,168 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:42:48,168 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,168 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,168 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:42:48,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,169 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,170 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,170 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,170 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,170 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,170 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,170 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,170 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:48,170 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,170 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,170 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,170 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,170 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:42:48,170 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,170 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,171 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,171 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,171 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,171 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,171 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:42:48,171 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,171 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,171 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,172 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,172 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,172 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:42:48,172 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,172 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,172 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:42:48,172 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:42:48,172 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,173 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,173 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,173 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,173 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,173 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,173 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,173 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,173 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:42:48,173 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,174 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,174 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,174 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,174 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,174 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,174 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,174 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,174 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,174 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,174 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:42:48,174 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,175 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:42:48,175 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,175 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,175 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,175 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,175 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,175 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,175 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,175 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,175 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,175 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:42:48,175 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,175 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,175 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,175 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:42:48,175 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,176 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,176 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,176 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,176 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:42:48,176 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,176 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,176 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:48,176 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:42:48,176 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:48,176 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:42:48,176 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:42:48,176 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,176 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,176 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,176 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,176 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,177 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:42:48,177 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,177 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,177 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,177 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,177 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,177 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,177 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:42:48,177 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,177 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,177 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,177 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,177 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,177 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:42:48,178 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,178 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,178 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:42:48,178 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:42:48,178 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,178 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,178 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,178 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,179 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:42:48,179 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:42:48,179 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,179 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,179 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:42:48,179 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,179 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:42:48,183 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-04-09 02:42:48,183 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:42:48,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:42:48,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:42:48,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:42:48,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:42:48,184 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,185 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,185 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:42:48,185 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,185 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,185 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,185 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,185 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,185 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,185 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,185 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,185 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,185 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,185 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,185 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,185 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,186 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,186 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:42:48,186 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,186 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,186 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:42:48,186 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:48,186 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,186 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,186 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,186 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,186 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,186 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,186 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,186 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,187 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,187 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,187 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,187 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,187 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:42:48,187 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,187 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,187 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,187 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,187 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:42:48,187 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,187 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,187 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:42:48,188 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,188 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,188 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,188 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:42:48,188 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,188 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:42:48,188 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,188 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,188 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:42:48,188 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,188 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:42:48,188 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,188 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,188 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:42:48,189 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,189 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,189 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,189 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,189 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,189 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,189 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:42:48,189 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,189 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,189 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,189 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,189 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:42:48,189 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,189 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,189 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,190 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,190 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,190 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:42:48,190 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,190 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,190 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,190 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,190 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,190 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,190 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:48,190 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:42:48,190 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,191 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:42:48,191 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:42:48,191 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,191 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,191 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,191 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,191 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,191 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,191 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,191 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,191 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,192 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:42:48,192 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,192 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,192 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,192 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,192 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,192 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,192 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:42:48,192 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,192 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,192 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,192 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,192 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,192 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:42:48,193 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,193 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,193 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,193 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:42:48,193 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,193 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:42:48,193 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,193 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,193 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,193 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,193 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,193 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:42:48,193 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,193 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:42:48,193 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,194 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,194 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,194 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,194 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:42:48,194 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,194 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:42:48,194 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,194 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:48,194 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,194 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,194 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:48,194 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,194 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,195 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,195 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,195 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:42:48,195 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,195 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,195 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:48,195 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,195 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:42:48,195 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,195 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,195 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:42:48,195 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,195 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,195 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:42:48,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:42:48,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,196 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,197 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,197 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:42:48,197 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,197 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,197 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,197 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,197 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:48,197 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,197 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,197 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:42:48,197 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,197 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,197 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,198 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,198 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,198 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,198 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,198 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:42:48,198 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,198 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,198 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,198 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,198 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,198 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,198 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,198 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,198 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,199 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,199 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,199 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,199 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,199 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,199 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,199 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:42:48,199 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,200 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,200 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,200 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,200 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,200 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:42:48,200 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,200 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,201 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,201 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,201 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,201 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:42:48,201 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,201 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,201 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,201 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,202 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,202 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,202 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,202 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,202 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:42:48,202 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,202 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:42:48,202 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:48,202 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:48,202 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:42:48,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:42:48,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,203 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,204 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,204 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,204 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,204 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,204 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,204 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,204 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,204 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,204 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,204 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,204 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,204 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,205 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:48,205 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,205 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,205 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,205 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,205 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:42:48,205 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,205 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,205 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,205 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,205 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,205 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,205 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:42:48,205 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,205 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,206 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,206 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,206 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,206 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:42:48,206 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,206 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,206 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:42:48,206 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:42:48,206 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,206 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,206 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,206 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,206 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,206 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,207 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,207 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,207 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:42:48,207 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,207 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,207 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,207 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,207 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,207 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,207 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,207 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,207 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,207 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,207 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:42:48,207 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,208 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:42:48,208 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,208 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,208 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,208 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,208 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,208 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,208 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,208 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,208 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,208 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:42:48,208 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,208 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:42:48,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:42:48,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:48,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:42:48,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:42:48,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:42:48,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:42:48,209 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,210 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,210 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,210 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,210 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,210 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:42:48,210 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,210 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,210 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,210 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,210 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,210 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,210 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:42:48,210 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,210 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:42:48,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:42:48,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:42:48,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:42:48,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:42:48,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:42:48,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:42:48,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:42:48,211 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,212 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:42:48,212 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:42:48,212 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:42:48,344 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:42:48,491 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:42:48,679 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:42:51,847 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 02:42:51] "[37mPOST /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 02:45:05,353 INFO werkzeug Thread-6 : 127.0.0.1 - - [09/Apr/2021 02:45:05] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 02:45:05,615 DEBUG matplotlib.pyplot Thread-7 : Loaded backend agg version unknown.
2021-04-09 02:45:05,742 DEBUG matplotlib.pyplot Thread-7 : Loaded backend agg version unknown.
2021-04-09 02:45:05,894 DEBUG matplotlib.pyplot Thread-7 : Loaded backend agg version unknown.
2021-04-09 02:45:06,081 DEBUG matplotlib.pyplot Thread-7 : Loaded backend agg version unknown.
2021-04-09 02:45:12,264 INFO werkzeug Thread-7 : 127.0.0.1 - - [09/Apr/2021 02:45:12] "[37mPOST /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 02:53:43,560 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-09 02:53:45,446 INFO logger Thread-1 : backend started
2021-04-09 02:53:46,110 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:53:46,111 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:53:46,115 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:53:46,119 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-09 02:53:46,119 DEBUG matplotlib Thread-1 : interactive is False
2021-04-09 02:53:46,119 DEBUG matplotlib Thread-1 : platform is win32
2021-04-09 02:53:46,120 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'flask_cors', 'werkzeug.security', 'flask_cors.decorator', 'werkzeug.debug.console', 'flask_cors.core', 'code', 'six', 'codeop', 'flask_cors.extension', 'flask_cors.version', 'werkzeug.debug.repr', 'flask_bcrypt', 'werkzeug.debug.tbtools', 'bcrypt', 'ctypes.util', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'bson.code', 'bson.codec_options', 'bson.dbref', 'bson.son', 'werkzeug._reloader', 'bson.decimal128', 'bson.errors', 'bson.int64', 'encodings.idna', 'bson.max_key', 'bson.min_key', 'stringprep', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 02:53:46,167 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:53:46,171 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-09 02:53:46,393 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-09 02:53:46,394 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-09 02:53:46,422 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 02:53:46] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 02:53:46,446 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:53:46,472 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-04-09 02:53:46,473 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,473 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,473 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,473 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,473 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,473 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,473 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,473 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,474 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,474 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:53:46,474 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,474 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:53:46,474 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,474 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,474 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,474 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,474 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,475 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,475 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:53:46,475 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:53:46,475 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:53:46,475 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,475 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,476 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:53:46,476 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,476 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,476 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,476 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,476 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,477 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,477 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,477 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,477 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,477 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,477 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,477 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,478 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,478 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,478 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:53:46,478 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,478 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,478 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:53:46,479 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:53:46,479 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,479 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,479 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,479 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,479 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,480 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,480 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,480 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,480 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,480 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,480 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,481 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,481 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:53:46,481 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,481 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,481 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,481 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,482 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:53:46,482 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,482 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,482 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:53:46,482 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,482 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,482 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,482 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:53:46,482 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,483 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:53:46,483 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,483 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,483 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:53:46,483 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,483 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:53:46,483 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,483 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,483 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:53:46,483 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,483 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:53:46,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:53:46,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,484 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:53:46,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,485 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:53:46,486 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:53:46,486 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,486 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:53:46,486 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:53:46,486 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,486 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,486 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,486 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,486 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,486 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,486 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,486 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,487 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,487 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:53:46,487 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,487 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,487 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,487 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,487 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,487 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,487 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:53:46,487 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,487 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,488 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,488 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,488 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,488 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:53:46,488 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,488 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,489 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,489 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:53:46,489 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,489 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:53:46,489 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,489 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,490 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,490 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,490 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,490 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:53:46,490 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,490 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:53:46,490 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,490 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,490 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,490 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,490 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:53:46,491 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,491 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:53:46,491 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,491 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:53:46,491 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,491 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,491 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:53:46,491 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,491 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,491 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,491 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,492 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:53:46,492 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,492 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,492 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:53:46,492 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,492 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:53:46,492 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,492 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,492 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:53:46,492 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,492 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,493 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,493 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,493 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,493 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,493 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,493 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,493 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,493 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,493 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:53:46,493 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:53:46,493 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,493 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,494 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,494 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,494 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,494 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,494 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,494 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:53:46,494 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,494 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,494 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,494 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,494 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:53:46,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:53:46,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:53:46,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:53:46,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:53:46,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:53:46,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:53:46,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:53:46,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:53:46,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:53:46,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:53:46,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:53:46,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:53:46,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:53:46,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:53:46,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:53:46,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:53:46,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:53:46,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:53:46,505 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,505 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,505 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,505 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,505 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,505 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,505 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,505 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,505 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,505 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,505 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:53:46,506 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,506 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:53:46,506 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,506 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,506 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,506 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,506 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,506 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,506 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,506 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,506 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,507 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:53:46,507 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,507 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,507 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,507 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:53:46,507 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,507 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,507 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,507 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,507 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:53:46,507 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,508 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,508 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:53:46,508 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:53:46,508 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:53:46,508 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:53:46,508 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:53:46,508 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,508 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,508 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,508 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,508 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:53:46,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:53:46,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:53:46,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:53:46,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:53:46,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:53:46,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:53:46,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:53:46,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,511 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:53:46,517 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-04-09 02:53:46,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:53:46,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:53:46,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:53:46,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:53:46,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:53:46,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:53:46,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:53:46,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:53:46,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:53:46,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:53:46,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:53:46,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:53:46,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:53:46,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:53:46,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:53:46,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:53:46,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:53:46,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:53:46,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:53:46,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:53:46,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:53:46,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:53:46,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:53:46,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:53:46,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:53:46,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:53:46,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:53:46,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:53:46,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:53:46,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,532 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,533 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:53:46,533 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,533 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:53:46,533 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,533 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,533 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,533 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,533 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:53:46,533 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,533 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:53:46,533 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,533 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:53:46,534 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,534 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,534 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:53:46,534 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,534 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,534 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,534 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,535 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:53:46,535 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,535 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,535 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:53:46,535 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,535 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:53:46,535 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,535 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,535 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:53:46,536 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,536 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,536 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,536 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,536 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,536 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,536 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,536 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,536 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,536 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,536 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:53:46,537 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:53:46,537 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,537 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,537 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,537 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,537 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,537 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,537 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,537 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:53:46,537 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,537 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,537 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,538 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,538 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:53:46,538 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,538 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,538 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:53:46,538 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,538 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,538 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,538 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,538 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,538 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,539 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,539 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:53:46,539 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,539 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,539 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,539 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,539 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,539 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,539 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,539 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,540 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,540 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,540 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,540 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,541 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,541 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,541 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,541 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:53:46,541 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,541 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,541 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,541 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,541 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,542 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:53:46,542 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,542 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,542 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,542 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,542 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,542 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:53:46,542 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,542 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,542 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,543 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,543 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,543 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,543 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,543 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,543 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:53:46,543 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,544 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:53:46,544 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:53:46,544 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:53:46,544 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,544 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:53:46,544 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,545 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,545 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,545 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,545 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,545 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:53:46,545 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,545 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,546 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,546 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,546 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,546 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,546 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,546 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,547 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,547 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,547 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,547 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,547 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,547 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,547 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,548 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,548 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,548 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,548 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,548 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:53:46,548 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,548 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,548 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,548 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,549 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:53:46,549 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,549 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,549 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,549 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,549 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,549 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,549 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:53:46,549 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,549 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,550 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,550 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,550 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,550 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:53:46,550 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,550 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,550 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:53:46,550 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:53:46,550 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,551 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,551 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,551 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,551 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,551 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,551 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,551 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:53:46,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:53:46,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:53:46,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:53:46,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:53:46,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:53:46,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:53:46,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:53:46,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:53:46,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:53:46,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:53:46,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:53:46,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:53:46,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:53:46,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:53:46,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:53:46,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:53:46,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:53:46,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:53:46,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:53:46,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:53:46,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:53:46,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:53:46,559 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:53:46,754 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:53:46,953 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:53:47,140 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:53:53,284 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 02:53:53] "[37mPOST /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 02:54:48,911 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-09 02:54:50,439 INFO logger Thread-1 : backend started
2021-04-09 02:54:51,117 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:54:51,117 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:54:51,121 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:54:51,126 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-09 02:54:51,126 DEBUG matplotlib Thread-1 : interactive is False
2021-04-09 02:54:51,126 DEBUG matplotlib Thread-1 : platform is win32
2021-04-09 02:54:51,126 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'werkzeug.security', 'flask_cors', 'werkzeug.debug.console', 'flask_cors.decorator', 'code', 'flask_cors.core', 'codeop', 'six', 'werkzeug.debug.repr', 'flask_cors.extension', 'werkzeug.debug.tbtools', 'flask_cors.version', 'ctypes.util', 'flask_bcrypt', 'bcrypt', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'werkzeug._reloader', 'bson.binary', 'bson.py3compat', 'bson.code', 'encodings.idna', 'bson.codec_options', 'bson.dbref', 'stringprep', 'bson.son', 'bson.decimal128', 'bson.errors', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 02:54:51,186 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:54:51,191 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-09 02:54:51,409 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-09 02:54:51,410 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-09 02:56:03,952 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-09 02:56:05,478 INFO logger Thread-1 : backend started
2021-04-09 02:56:06,168 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:56:06,168 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:56:06,173 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:56:06,175 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-09 02:56:06,176 DEBUG matplotlib Thread-1 : interactive is False
2021-04-09 02:56:06,176 DEBUG matplotlib Thread-1 : platform is win32
2021-04-09 02:56:06,176 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'flask_cors', 'werkzeug.security', 'flask_cors.decorator', 'werkzeug.debug.console', 'flask_cors.core', 'code', 'six', 'codeop', 'flask_cors.extension', 'werkzeug.debug.repr', 'flask_cors.version', 'werkzeug.debug.tbtools', 'flask_bcrypt', 'ctypes.util', 'bcrypt', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'bson.code', 'bson.codec_options', 'bson.dbref', 'bson.son', 'bson.decimal128', 'bson.errors', 'bson.int64', 'werkzeug._reloader', 'bson.max_key', 'bson.min_key', 'encodings.idna', 'bson.objectid', 'bson.tz_util', 'stringprep', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 02:56:06,215 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:56:06,219 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-09 02:56:06,420 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-09 02:56:06,420 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-09 02:56:06,448 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 02:56:06] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 02:56:06,467 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:56:06,494 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-04-09 02:56:06,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:56:06,495 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:56:06,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:56:06,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:56:06,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:56:06,496 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:56:06,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,497 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:56:06,498 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:56:06,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:56:06,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,499 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:56:06,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,500 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:56:06,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:56:06,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:56:06,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:56:06,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,501 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:56:06,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:56:06,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:56:06,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,502 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:56:06,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:56:06,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,503 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:56:06,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,504 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:56:06,505 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:56:06,505 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,505 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:56:06,505 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:56:06,505 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,505 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,505 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,505 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,505 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,505 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,506 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,506 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,506 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,506 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:56:06,506 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,506 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,506 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,506 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,506 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,506 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,506 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:56:06,506 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,507 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,507 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,507 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,507 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,507 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:56:06,507 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,507 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,507 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,507 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:56:06,507 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,507 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:56:06,507 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,508 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,508 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,508 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,508 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,508 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:56:06,508 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,508 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:56:06,508 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,508 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,508 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,508 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,508 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:56:06,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:56:06,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:56:06,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:56:06,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,509 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:56:06,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:56:06,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:56:06,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:56:06,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,510 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:56:06,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:56:06,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,511 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,512 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,512 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,512 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,512 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:56:06,512 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,512 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,512 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,512 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,513 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:56:06,513 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,513 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,513 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:56:06,513 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,513 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,513 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,514 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,514 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,514 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,514 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,514 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:56:06,514 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,514 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,515 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:56:06,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,516 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:56:06,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:56:06,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,517 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:56:06,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:56:06,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:56:06,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:56:06,518 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:56:06,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,519 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:56:06,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,520 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,521 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:56:06,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:56:06,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,522 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:56:06,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,523 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:56:06,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:56:06,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:56:06,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,524 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:56:06,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,525 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:56:06,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:56:06,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,526 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:56:06,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:56:06,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:56:06,527 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:56:06,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:56:06,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:56:06,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:56:06,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:56:06,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,528 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:56:06,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,529 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:56:06,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:56:06,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:56:06,530 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:56:06,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:56:06,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:56:06,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:56:06,531 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,531 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:56:06,538 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-04-09 02:56:06,538 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,538 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,538 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,538 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,538 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,538 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,539 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,539 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,539 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,539 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:56:06,539 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,539 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:56:06,539 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,539 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,539 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,539 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,539 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,539 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,539 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:56:06,540 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:56:06,540 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:56:06,540 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,540 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,540 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:56:06,540 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,540 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,540 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,540 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,541 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,541 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,541 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,541 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,541 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,541 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,541 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,541 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,541 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,541 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,541 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:56:06,542 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,542 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,542 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:56:06,542 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:56:06,542 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,542 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,542 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,542 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,542 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,542 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,542 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,542 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,543 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,543 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,543 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,543 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,543 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:56:06,543 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,543 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,543 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,543 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,543 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:56:06,543 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,543 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,544 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:56:06,544 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,544 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,544 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,544 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:56:06,544 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,544 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:56:06,544 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,544 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,544 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:56:06,544 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,545 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:56:06,545 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,545 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,545 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:56:06,545 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,545 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,545 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,545 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,545 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,545 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,545 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:56:06,546 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,546 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,546 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,546 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,546 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:56:06,546 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,546 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,546 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,546 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,546 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,546 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:56:06,546 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,547 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,547 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,547 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,547 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,547 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,547 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:56:06,547 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:56:06,547 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,547 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:56:06,547 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:56:06,548 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,548 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,548 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,548 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,548 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,548 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,548 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,548 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,548 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,548 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:56:06,549 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,549 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,549 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,549 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,549 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,549 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,549 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:56:06,549 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,549 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,549 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,550 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,550 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,550 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:56:06,550 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,550 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,550 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,550 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:56:06,550 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,550 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:56:06,550 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,550 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,550 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,551 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,551 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,551 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:56:06,551 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,551 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:56:06,551 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,551 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,551 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,551 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,551 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:56:06,551 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,551 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:56:06,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:56:06,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:56:06,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:56:06,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:56:06,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:56:06,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:56:06,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:56:06,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:56:06,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:56:06,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:56:06,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:56:06,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:56:06,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:56:06,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:56:06,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,560 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,560 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,560 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,560 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:56:06,560 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,560 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,560 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,560 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,560 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,560 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,560 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,561 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,561 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:56:06,561 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,561 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:56:06,561 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:56:06,561 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:56:06,561 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,562 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:56:06,562 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,562 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,562 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,562 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,562 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,562 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:56:06,563 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,563 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,563 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,563 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,563 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,563 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,563 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,563 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,563 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,563 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,563 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,564 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,564 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,564 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,564 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,564 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,564 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,564 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,564 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,564 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:56:06,564 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,565 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,565 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,565 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,565 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:56:06,565 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,565 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,565 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,565 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,565 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,565 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,565 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:56:06,566 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,566 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,566 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,566 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,566 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,566 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:56:06,566 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,566 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,566 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:56:06,566 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:56:06,567 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,567 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,567 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,567 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,567 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,567 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,567 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,567 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,567 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:56:06,567 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,568 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,568 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,568 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,568 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,568 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,568 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,568 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,568 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,569 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,569 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:56:06,569 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,569 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:56:06,569 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,569 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,569 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,570 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,570 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,570 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,570 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,570 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,570 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,570 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:56:06,571 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,571 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,571 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,571 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:56:06,571 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,571 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,571 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,572 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,572 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:56:06,572 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,572 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,572 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:56:06,572 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:56:06,572 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:56:06,573 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:56:06,573 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:56:06,573 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,573 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,573 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,573 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,573 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,573 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:56:06,574 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,574 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,574 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,574 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,574 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,574 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,574 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:56:06,575 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,575 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,575 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,575 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,575 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,575 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:56:06,575 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,576 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:56:06,576 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:56:06,576 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:56:06,576 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,576 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,576 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,576 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:56:06,576 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:56:06,576 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:56:06,577 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:56:06,577 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,577 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:56:06,577 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:56:06,577 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:56:06,747 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:56:06,937 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:56:07,106 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:56:07,282 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 02:56:07] "[35m[1mPOST /report_dashboard HTTP/1.1[0m" 500 -
2021-04-09 02:56:32,675 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-09 02:56:34,343 INFO logger Thread-1 : backend started
2021-04-09 02:56:49,482 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 02:56:49] "[35m[1mOPTIONS /report_dashboard HTTP/1.1[0m" 500 -
2021-04-09 02:57:07,908 WARNING flask_cors.core Thread-4 : Unknown option passed to Flask-CORS: support_credentials
2021-04-09 02:57:07,908 WARNING flask_cors.core Thread-4 : Unknown option passed to Flask-CORS: support_credentials
2021-04-09 02:57:07,908 INFO logger Thread-4 : backend started
2021-04-09 02:57:08,460 DEBUG matplotlib Thread-4 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:57:08,460 DEBUG matplotlib Thread-4 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:57:08,463 DEBUG matplotlib Thread-4 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:57:08,465 DEBUG matplotlib Thread-4 : matplotlib version 3.3.4
2021-04-09 02:57:08,465 DEBUG matplotlib Thread-4 : interactive is False
2021-04-09 02:57:08,465 DEBUG matplotlib Thread-4 : platform is win32
2021-04-09 02:57:08,465 DEBUG matplotlib Thread-4 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'getpass', 'app', 'werkzeug.security', 'flask_cors', 'werkzeug.debug.console', 'flask_cors.decorator', 'code', 'flask_cors.core', 'codeop', 'six', 'werkzeug.debug.repr', 'flask_cors.extension', 'werkzeug.debug.tbtools', 'flask_cors.version', 'ctypes.util', 'flask_bcrypt', 'bcrypt', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'werkzeug._reloader', 'bson.py3compat', 'bson.code', 'encodings.idna', 'bson.codec_options', 'bson.dbref', 'stringprep', 'bson.son', 'bson.decimal128', 'bson.errors', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'wsgi', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 02:57:08,499 DEBUG matplotlib Thread-4 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:57:08,502 DEBUG matplotlib.font_manager Thread-4 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-09 02:57:08,657 DEBUG matplotlib.pyplot Thread-4 : Loaded backend tkagg version unknown.
2021-04-09 02:57:08,657 DEBUG matplotlib.pyplot Thread-4 : Loaded backend TkAgg version unknown.
2021-04-09 02:57:08,678 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 02:57:08] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 02:57:09,046 DEBUG matplotlib.pyplot Thread-5 : Loaded backend agg version unknown.
2021-04-09 02:57:09,067 DEBUG matplotlib.font_manager Thread-5 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-04-09 02:57:09,068 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,068 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,068 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,068 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,068 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,068 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,068 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,068 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,068 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,068 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:57:09,069 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,069 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:57:09,069 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,069 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,069 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,069 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,069 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,069 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,069 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:57:09,069 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:57:09,069 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:57:09,069 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,069 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,069 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:57:09,069 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,070 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,070 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,070 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,070 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,070 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,070 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,070 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,070 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,070 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,070 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,070 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,070 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,070 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,070 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:57:09,070 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,070 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,071 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:57:09,071 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:57:09,071 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,071 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,071 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,071 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,071 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,071 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,071 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,071 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,071 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,071 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,071 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,071 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,071 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:57:09,072 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,072 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,072 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,072 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,072 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:57:09,072 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,072 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,072 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:57:09,072 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,072 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,072 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,072 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:57:09,072 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,072 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:57:09,072 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,072 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,073 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:57:09,073 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,073 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:57:09,073 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,073 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,073 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:57:09,073 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,073 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,073 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,073 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,073 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,073 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,073 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:57:09,073 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,073 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,073 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,074 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,074 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:57:09,074 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,074 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,074 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,074 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,074 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,074 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:57:09,074 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,074 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,074 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,074 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,074 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,074 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,074 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:57:09,074 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:57:09,075 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,075 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:57:09,075 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:57:09,075 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,075 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,075 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,075 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,075 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,075 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,075 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,075 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,075 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,075 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:57:09,075 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,075 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,075 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,076 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,076 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,076 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,076 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:57:09,076 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,076 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,076 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,076 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,076 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,076 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:57:09,076 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,076 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,076 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,076 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:57:09,076 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,076 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:57:09,077 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,077 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,077 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,077 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,077 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,077 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:57:09,077 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,077 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:57:09,077 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,077 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,077 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,077 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,077 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:57:09,077 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,077 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:57:09,078 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,078 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:57:09,078 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,078 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,078 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:57:09,078 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,078 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,078 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,078 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,078 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:57:09,078 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,078 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,078 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:57:09,078 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,078 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:57:09,078 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,079 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,079 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:57:09,079 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,079 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,079 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,079 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,079 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,079 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,079 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,079 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,079 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,079 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,079 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:57:09,079 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:57:09,079 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,079 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,080 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,080 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,080 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,080 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,080 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,080 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:57:09,080 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,080 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,080 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,080 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,080 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:57:09,080 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,080 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,080 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:57:09,080 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,080 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,081 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,081 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,081 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,081 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,081 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,081 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:57:09,081 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,081 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,081 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,081 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,081 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,081 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,081 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,081 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,081 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,082 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,082 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,082 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,082 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,082 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,082 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,082 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:57:09,082 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,082 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,082 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,082 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,082 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,082 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:57:09,082 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,082 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,082 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,083 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,083 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,083 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:57:09,083 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,083 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,083 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,083 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,083 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,083 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,083 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,083 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,083 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:57:09,083 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,083 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:57:09,083 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:57:09,083 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:57:09,084 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,084 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:57:09,084 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,084 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,084 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,084 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,084 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,084 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:57:09,084 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,084 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,084 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,084 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,084 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,084 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,084 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,084 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,085 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,085 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,085 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,085 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,085 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,085 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,085 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,085 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,085 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,085 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,085 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,085 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:57:09,085 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,085 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,085 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,085 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,085 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:57:09,086 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,086 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,086 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,086 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,086 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,086 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,086 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:57:09,086 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,086 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,086 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,086 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,086 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,086 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:57:09,086 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,086 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,087 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:57:09,087 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:57:09,087 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,087 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,087 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,087 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,087 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,087 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,087 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,087 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,087 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:57:09,087 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,087 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,087 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,087 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,087 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,088 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,088 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,088 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,088 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,088 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,088 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:57:09,088 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,088 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:57:09,088 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,088 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,088 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,088 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,088 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,088 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,088 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,088 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,089 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,089 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:57:09,089 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,089 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,089 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,089 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:57:09,089 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,089 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,089 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,089 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,089 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:57:09,089 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,089 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,089 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:57:09,089 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:57:09,089 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:57:09,090 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:57:09,090 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:57:09,090 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,090 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,090 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,090 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,090 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,090 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:57:09,090 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,090 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,090 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,090 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,090 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,090 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,090 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:57:09,091 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,091 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,091 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,091 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,091 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,091 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:57:09,091 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,091 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,092 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:57:09,092 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:57:09,092 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,092 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,092 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,092 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,092 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:57:09,092 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:57:09,092 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,092 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,092 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:57:09,092 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,092 DEBUG matplotlib.font_manager Thread-5 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:57:09,096 DEBUG matplotlib.font_manager Thread-5 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-04-09 02:57:09,096 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,097 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,097 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,097 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,097 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,097 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,097 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,097 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,097 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,097 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:57:09,097 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,097 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:57:09,097 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,097 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,097 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,097 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,097 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,097 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,097 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:57:09,097 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:57:09,097 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:57:09,097 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,098 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,098 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:57:09,098 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,098 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,098 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,098 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,098 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,098 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,098 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,098 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,099 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,099 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,099 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,099 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,099 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,099 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,099 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:57:09,099 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,099 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,099 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:57:09,099 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:57:09,099 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,099 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,099 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,099 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,099 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,099 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,099 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,100 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,100 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,100 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,100 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,100 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,100 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:57:09,100 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,100 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,100 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,100 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,100 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:57:09,100 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,100 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,100 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:57:09,100 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,100 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,100 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,100 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:57:09,101 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,101 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:57:09,101 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,101 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,101 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:57:09,101 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,101 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:57:09,101 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,101 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,101 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:57:09,101 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,101 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,101 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,101 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,101 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,101 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,101 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:57:09,101 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,102 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,102 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,102 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,102 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:57:09,102 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,102 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,102 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,102 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,103 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,103 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:57:09,103 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,103 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,103 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,103 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,103 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,103 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,103 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:57:09,103 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:57:09,103 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,103 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:57:09,103 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:57:09,103 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,103 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,103 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,103 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,104 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,104 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,104 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,104 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,104 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,104 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:57:09,104 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,104 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,104 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,104 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,104 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,104 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,104 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:57:09,104 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,104 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,104 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,104 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,104 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,104 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:57:09,105 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,105 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,105 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,105 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:57:09,105 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,105 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:57:09,105 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,105 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,105 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,105 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,105 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,105 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:57:09,105 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,105 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:57:09,106 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,106 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,106 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,106 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,106 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:57:09,106 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,106 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:57:09,106 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,106 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:57:09,106 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,106 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,106 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:57:09,106 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,106 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,106 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,106 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,107 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:57:09,107 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,107 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,107 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:57:09,107 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,107 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:57:09,107 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,107 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,107 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:57:09,107 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,107 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,107 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,107 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,107 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,107 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,107 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,107 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,108 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,108 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,108 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:57:09,108 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:57:09,108 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,108 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,108 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,108 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,108 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,108 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,108 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,108 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:57:09,108 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,108 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,108 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,108 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,109 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:57:09,109 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,109 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,109 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:57:09,109 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,109 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,109 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,109 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,109 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,109 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,109 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,109 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:57:09,109 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,109 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,109 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,109 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,110 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,110 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,110 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,110 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,110 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,110 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,110 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,110 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,110 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,110 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,110 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,110 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:57:09,110 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,110 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,110 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,110 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,111 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,111 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:57:09,111 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,111 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,111 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,111 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,111 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,111 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:57:09,111 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,111 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,111 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,111 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,111 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,111 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,111 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,111 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,111 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:57:09,112 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,112 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:57:09,112 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:57:09,112 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:57:09,112 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,112 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:57:09,112 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,112 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,112 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,112 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,112 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,112 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:57:09,112 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,112 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,112 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,112 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,113 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,113 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,113 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,113 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,113 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,113 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,113 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,113 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,113 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,113 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,113 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,113 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,113 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,113 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,113 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,114 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:57:09,114 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,114 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,114 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,114 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,114 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:57:09,114 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,114 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,114 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,114 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,114 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,114 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,114 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:57:09,114 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,114 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,114 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,114 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,115 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,115 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:57:09,115 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,115 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,115 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:57:09,115 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:57:09,115 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,115 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,115 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,115 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,115 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,115 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,115 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,115 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,115 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:57:09,115 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,116 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,116 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,116 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,116 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,116 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,116 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,116 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,116 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,116 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,116 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:57:09,116 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,116 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:57:09,116 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,116 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,116 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,116 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,117 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,117 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,117 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,117 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,117 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,117 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:57:09,117 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,117 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,117 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,117 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:57:09,117 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,117 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,117 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,117 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,117 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:57:09,117 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,118 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,118 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:57:09,118 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:57:09,118 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:57:09,118 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:57:09,118 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:57:09,118 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,118 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,118 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,118 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,118 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,118 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:57:09,118 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,118 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,118 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,118 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,119 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,119 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,119 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:57:09,119 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,119 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,119 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,119 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,119 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,119 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:57:09,119 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,119 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:57:09,119 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:57:09,119 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:57:09,119 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,119 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,119 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,120 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:57:09,120 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:57:09,120 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:57:09,120 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:57:09,120 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,120 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:57:09,120 DEBUG matplotlib.font_manager Thread-5 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:57:09,120 DEBUG matplotlib.font_manager Thread-5 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:57:09,230 DEBUG matplotlib.pyplot Thread-5 : Loaded backend agg version unknown.
2021-04-09 02:57:09,356 DEBUG matplotlib.pyplot Thread-5 : Loaded backend agg version unknown.
2021-04-09 02:57:09,483 DEBUG matplotlib.pyplot Thread-5 : Loaded backend agg version unknown.
2021-04-09 02:57:15,405 INFO werkzeug Thread-5 : 127.0.0.1 - - [09/Apr/2021 02:57:15] "[37mPOST /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 02:58:21,142 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-09 02:58:22,894 INFO logger Thread-1 : backend started
2021-04-09 02:58:23,478 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:58:23,479 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 02:58:23,482 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:58:23,485 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-09 02:58:23,485 DEBUG matplotlib Thread-1 : interactive is False
2021-04-09 02:58:23,485 DEBUG matplotlib Thread-1 : platform is win32
2021-04-09 02:58:23,485 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'flask_cors', 'werkzeug.security', 'flask_cors.decorator', 'werkzeug.debug.console', 'flask_cors.core', 'code', 'six', 'codeop', 'flask_cors.extension', 'flask_cors.version', 'werkzeug.debug.repr', 'flask_bcrypt', 'werkzeug.debug.tbtools', 'bcrypt', 'ctypes.util', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'bson.code', 'bson.codec_options', 'bson.dbref', 'bson.son', 'werkzeug._reloader', 'bson.decimal128', 'bson.errors', 'bson.int64', 'encodings.idna', 'bson.max_key', 'stringprep', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 02:58:23,525 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-09 02:58:23,528 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-09 02:58:23,723 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-09 02:58:23,723 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-09 02:58:25,563 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 02:58:25] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 02:58:25,850 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:58:25,872 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-04-09 02:58:25,872 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:58:25,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:58:25,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:58:25,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:58:25,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:58:25,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:58:25,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:58:25,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:58:25,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:58:25,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:58:25,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:58:25,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:58:25,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:58:25,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:58:25,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:58:25,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:58:25,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:58:25,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:58:25,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:58:25,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:58:25,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:58:25,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:58:25,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:58:25,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:58:25,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:58:25,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:58:25,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:58:25,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:58:25,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:58:25,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:58:25,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:58:25,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:58:25,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:58:25,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:58:25,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:58:25,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:58:25,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:58:25,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:58:25,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:58:25,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:58:25,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:58:25,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:58:25,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:58:25,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:58:25,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:58:25,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:58:25,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:58:25,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,888 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:58:25,888 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,888 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,888 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,888 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,888 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,888 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,888 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,888 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,888 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:58:25,888 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,888 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:58:25,888 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:58:25,888 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:58:25,888 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,888 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:58:25,888 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,889 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,889 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,889 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,889 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,889 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:58:25,889 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,889 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,889 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,889 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,889 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,889 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,889 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,889 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,889 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,889 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,890 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,890 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,890 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,890 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,890 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,890 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,890 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,890 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,890 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,890 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:58:25,890 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,890 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,890 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,890 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,890 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:58:25,890 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,890 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,891 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,891 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,891 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,891 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,891 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:58:25,891 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,891 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,891 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,891 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,891 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,891 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:58:25,891 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,891 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,891 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:58:25,891 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:58:25,891 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,891 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,892 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,892 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,892 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,892 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,892 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,892 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,892 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:58:25,892 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,892 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,892 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,892 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,892 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,892 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,892 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,892 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,892 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,893 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,893 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:58:25,893 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,893 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:58:25,893 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,893 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,893 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,893 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,893 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,893 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,893 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,893 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,893 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,893 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:58:25,893 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,893 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,893 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,894 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:58:25,894 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,894 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,894 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,894 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,894 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:58:25,894 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,894 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,894 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:58:25,894 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:58:25,894 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:58:25,894 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:58:25,894 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:58:25,894 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,894 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,894 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,894 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,895 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,895 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:58:25,895 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,895 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,895 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,895 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,895 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,895 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,895 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:58:25,895 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,895 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,895 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,895 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,895 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,895 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:58:25,895 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,896 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,896 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:58:25,896 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:58:25,896 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,896 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,896 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,896 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,896 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:58:25,896 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:58:25,896 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,896 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,896 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:58:25,896 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,896 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:58:25,900 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-04-09 02:58:25,900 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,900 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,900 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,900 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,900 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,901 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,901 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,901 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,901 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,901 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 02:58:25,901 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,901 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 02:58:25,901 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,901 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,901 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,901 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,901 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,901 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,901 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 02:58:25,901 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 02:58:25,902 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 02:58:25,902 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,902 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,902 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 02:58:25,902 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,902 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,902 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,902 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,902 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,902 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,902 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,902 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,902 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,902 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,902 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,902 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,903 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,903 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,903 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 02:58:25,903 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,903 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,903 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 02:58:25,903 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:58:25,903 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,903 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,903 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,903 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,903 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,903 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,903 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,903 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,903 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,904 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,904 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,904 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,904 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 02:58:25,904 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,904 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,904 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,904 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,904 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 02:58:25,904 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,904 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,904 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 02:58:25,904 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,904 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,905 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,905 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 02:58:25,905 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,905 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 02:58:25,905 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,905 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,905 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 02:58:25,905 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,905 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:58:25,905 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,905 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,905 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 02:58:25,905 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,905 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,906 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,906 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,906 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,906 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,906 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 02:58:25,906 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,906 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,906 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,906 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,906 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:58:25,906 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,906 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,906 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,906 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,906 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,906 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 02:58:25,907 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,907 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,907 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,907 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,907 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,907 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,907 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:58:25,907 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:58:25,907 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,907 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:58:25,907 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:58:25,907 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,907 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,907 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,907 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 02:58:25,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 02:58:25,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,908 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,909 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,909 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,909 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,909 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 02:58:25,909 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,909 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,909 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,909 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:58:25,909 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,909 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 02:58:25,909 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,909 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,909 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,909 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,909 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,910 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 02:58:25,910 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,910 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:58:25,910 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,910 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,910 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,910 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,910 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 02:58:25,910 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,910 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 02:58:25,910 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,910 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:58:25,910 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:58:25,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:58:25,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:58:25,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:58:25,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:58:25,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,911 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:58:25,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:58:25,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,912 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:58:25,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:58:25,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:58:25,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,913 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 02:58:25,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,914 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 02:58:25,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:58:25,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 02:58:25,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,915 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 02:58:25,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 02:58:25,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:58:25,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:58:25,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:58:25,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,916 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,917 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,917 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:58:25,917 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,917 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,917 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,917 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,917 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,917 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,917 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,917 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,917 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,917 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,917 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,917 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,917 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,917 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,918 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,918 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,918 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,918 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,918 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,918 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:58:25,918 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,918 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,918 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,918 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,918 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:58:25,918 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,918 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,918 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,918 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:58:25,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:58:25,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:58:25,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 02:58:25,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,919 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 02:58:25,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,920 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 02:58:25,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 02:58:25,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:58:25,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 02:58:25,921 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 02:58:25,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:58:25,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 02:58:25,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 02:58:25,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 02:58:25,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 02:58:25,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,922 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 02:58:25,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 02:58:25,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 02:58:25,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 02:58:25,923 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 02:58:25,924 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 02:58:25,924 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,924 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,924 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,924 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 02:58:25,924 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 02:58:25,924 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:58:25,924 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 02:58:25,924 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,924 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 02:58:25,924 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 02:58:25,924 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 02:58:26,036 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:58:26,173 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:58:26,334 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 02:58:31,992 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 02:58:31] "[37mPOST /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 03:00:24,727 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-09 03:00:26,359 INFO logger Thread-1 : backend started
2021-04-09 03:00:26,937 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 03:00:26,937 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 03:00:26,940 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-09 03:00:26,943 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-09 03:00:26,943 DEBUG matplotlib Thread-1 : interactive is False
2021-04-09 03:00:26,943 DEBUG matplotlib Thread-1 : platform is win32
2021-04-09 03:00:26,943 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'flask_cors', 'flask_cors.decorator', 'werkzeug.security', 'flask_cors.core', 'werkzeug.debug.console', 'six', 'code', 'flask_cors.extension', 'codeop', 'flask_cors.version', 'flask_bcrypt', 'werkzeug.debug.repr', 'bcrypt', 'werkzeug.debug.tbtools', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'ctypes.util', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'bson.code', 'bson.codec_options', 'bson.dbref', 'bson.son', 'werkzeug._reloader', 'bson.decimal128', 'bson.errors', 'bson.int64', 'encodings.idna', 'bson.max_key', 'bson.min_key', 'stringprep', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 03:00:26,986 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-09 03:00:26,993 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-09 03:00:27,197 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-09 03:00:27,198 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-09 03:00:27,238 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 03:00:27] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 03:00:27,258 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 03:00:27,292 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-04-09 03:00:27,293 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,293 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,293 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,293 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,293 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,293 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,293 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,293 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,293 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,293 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 03:00:27,293 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,294 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 03:00:27,294 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,294 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,294 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,294 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,294 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,294 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,294 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 03:00:27,294 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 03:00:27,295 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 03:00:27,295 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,295 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,295 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 03:00:27,295 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,295 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,295 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,295 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,295 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,295 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,296 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,296 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,296 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,296 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,296 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,296 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,296 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,296 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,296 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 03:00:27,296 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,296 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,297 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 03:00:27,297 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:00:27,297 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,297 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,297 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,297 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,298 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,298 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,298 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,298 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,298 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,298 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,299 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,299 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,299 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 03:00:27,299 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,299 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,299 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,299 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,300 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 03:00:27,300 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,300 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,300 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 03:00:27,300 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,300 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,301 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,301 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 03:00:27,301 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,301 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 03:00:27,301 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,301 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,302 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 03:00:27,302 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,302 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:00:27,302 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,302 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,302 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 03:00:27,302 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,303 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,303 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,303 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,303 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,303 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,303 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 03:00:27,304 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,304 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,304 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,304 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,304 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:00:27,304 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,305 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,305 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,305 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,305 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,305 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 03:00:27,305 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,305 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,306 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,306 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,306 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,306 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,306 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:00:27,306 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:00:27,307 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,307 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:00:27,307 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:00:27,307 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,307 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,307 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,307 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,308 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,308 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,308 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,308 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,308 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,308 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:00:27,309 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,309 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,309 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,309 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,309 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,309 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,309 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 03:00:27,310 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,310 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,310 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,310 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,310 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,310 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 03:00:27,311 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,311 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,311 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,311 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:00:27,311 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,311 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 03:00:27,312 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,312 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,312 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,312 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,312 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,312 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 03:00:27,312 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,313 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:00:27,313 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,313 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,313 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,313 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,313 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 03:00:27,314 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,314 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 03:00:27,314 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,314 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:00:27,314 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,314 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,314 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:00:27,314 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,315 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,315 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,315 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,315 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:00:27,315 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,315 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,315 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:00:27,315 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,315 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:00:27,315 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,315 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,315 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:00:27,315 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,316 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,316 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,316 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,316 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,316 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,316 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,316 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,316 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,316 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,316 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:00:27,316 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:00:27,317 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,317 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,317 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,317 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,317 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,317 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,317 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,317 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:00:27,317 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,317 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,317 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,317 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,318 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:00:27,318 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,318 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,318 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:00:27,318 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,318 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,318 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,318 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,318 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,318 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,318 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,318 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 03:00:27,319 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,319 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,319 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,319 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,319 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,319 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,319 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,319 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,320 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,320 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,320 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,320 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,320 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,320 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,320 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,320 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 03:00:27,320 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,320 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,321 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,321 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,321 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,321 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:00:27,321 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,321 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,321 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,321 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,321 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,321 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:00:27,321 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,321 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,322 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,322 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,322 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,322 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,322 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,322 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,322 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 03:00:27,322 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,322 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 03:00:27,322 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:00:27,323 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:00:27,323 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,323 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:00:27,323 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,323 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,323 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,323 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,323 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,323 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:00:27,323 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,323 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,324 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,324 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,324 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,324 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,324 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,324 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,324 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,324 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,324 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,324 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,325 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,325 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,325 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,325 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,325 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,325 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,325 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,325 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:00:27,325 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,325 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,325 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,326 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,326 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:00:27,326 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,326 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,326 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,326 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,326 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,326 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,326 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:00:27,326 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,326 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,327 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,327 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,327 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,327 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:00:27,327 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,327 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,327 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:00:27,327 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:00:27,328 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,328 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,328 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,328 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,328 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,328 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,328 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,328 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,328 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:00:27,328 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,328 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,328 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,329 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,329 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,329 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,329 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,329 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,329 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,329 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,329 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 03:00:27,329 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,329 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:00:27,330 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,330 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,330 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,330 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,330 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,330 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,330 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,330 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,330 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,330 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:00:27,331 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,331 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,331 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,331 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 03:00:27,331 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,331 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,331 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,331 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,331 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 03:00:27,331 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,331 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,332 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:00:27,332 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:00:27,332 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:00:27,332 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:00:27,332 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 03:00:27,332 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,332 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,332 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,332 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,332 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,332 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:00:27,332 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,333 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,333 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,333 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,333 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,333 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,333 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:00:27,333 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,333 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,333 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,333 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,333 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,334 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 03:00:27,334 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,334 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,334 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 03:00:27,334 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 03:00:27,334 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,334 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,334 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,334 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,334 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 03:00:27,335 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:00:27,335 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,335 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,335 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:00:27,335 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,335 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 03:00:27,340 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-04-09 03:00:27,341 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,341 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,341 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,341 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,341 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,341 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,341 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,341 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,342 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,342 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 03:00:27,342 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,342 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 03:00:27,342 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,342 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,342 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,342 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,342 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,342 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,342 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 03:00:27,342 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 03:00:27,342 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 03:00:27,343 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,343 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,343 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 03:00:27,343 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,343 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,343 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,343 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,343 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,343 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,343 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,343 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,344 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,344 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,344 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,344 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,344 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,344 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,344 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 03:00:27,344 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,344 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,344 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 03:00:27,345 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:00:27,345 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,345 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,345 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,345 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,345 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,345 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,345 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,345 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,345 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,345 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,345 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,346 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,346 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 03:00:27,346 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,346 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,346 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,346 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,346 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 03:00:27,346 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,346 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,346 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 03:00:27,346 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,346 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,347 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,347 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 03:00:27,347 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,347 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 03:00:27,347 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,347 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,347 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 03:00:27,348 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,348 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:00:27,348 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,348 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,348 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 03:00:27,348 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,348 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,348 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,348 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,348 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,348 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,349 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 03:00:27,349 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,349 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,349 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,349 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,349 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:00:27,349 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,349 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,349 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,349 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,349 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,349 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 03:00:27,350 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,350 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,350 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,350 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,350 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,350 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,350 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:00:27,350 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:00:27,350 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,350 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:00:27,350 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:00:27,351 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,351 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,351 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,351 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,351 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,351 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,351 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,351 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,351 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,351 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:00:27,351 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,352 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,352 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,352 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,352 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,352 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,352 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 03:00:27,352 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,352 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,352 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,352 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,352 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,353 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 03:00:27,353 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,353 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,353 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,353 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:00:27,353 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,353 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 03:00:27,353 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,353 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,353 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,354 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,354 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,354 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 03:00:27,354 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,354 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:00:27,354 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,354 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,354 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,354 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,354 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 03:00:27,355 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,355 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 03:00:27,355 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,355 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:00:27,355 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,355 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,355 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:00:27,355 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,355 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,355 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,355 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,355 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:00:27,356 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,356 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,356 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:00:27,356 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,356 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:00:27,356 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,356 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,356 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:00:27,356 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,357 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,357 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,357 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,357 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,357 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,357 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,357 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,357 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,357 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,357 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:00:27,357 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:00:27,357 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,358 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,358 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,358 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,358 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,358 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,358 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,358 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:00:27,358 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,358 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,358 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,358 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,359 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:00:27,359 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,359 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,359 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:00:27,359 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,359 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,359 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,359 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,359 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,359 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,360 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,360 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 03:00:27,360 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,360 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,360 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,360 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,360 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,360 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,360 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,360 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,360 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,360 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,361 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,361 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,361 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,361 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,361 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,361 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 03:00:27,361 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,361 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,362 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,362 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,362 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,362 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:00:27,362 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,362 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,362 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,362 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,362 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,363 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:00:27,363 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,363 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,363 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,363 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,363 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,363 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,363 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,363 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,364 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 03:00:27,364 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,364 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 03:00:27,364 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:00:27,364 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:00:27,364 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,364 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:00:27,364 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,364 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,364 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,364 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,364 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,365 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:00:27,365 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,365 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,365 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,365 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,365 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,365 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,365 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,365 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,365 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,365 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,366 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,366 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,366 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,366 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,366 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,366 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,366 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,366 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,366 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,366 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:00:27,366 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,367 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,367 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,367 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,367 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:00:27,367 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,367 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,367 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,367 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,367 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,367 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,367 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:00:27,368 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,368 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,368 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,368 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,368 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,368 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:00:27,368 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,368 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,368 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:00:27,369 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:00:27,369 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,369 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,369 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,369 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,369 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,369 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,369 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,369 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,370 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:00:27,370 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,370 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,370 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,370 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,370 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,370 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,370 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,370 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,370 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,370 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,371 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 03:00:27,371 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,371 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:00:27,371 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,371 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,371 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,371 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,371 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,371 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,371 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,371 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,372 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,372 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:00:27,372 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,372 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,372 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,372 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 03:00:27,372 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,372 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,372 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,372 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,372 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 03:00:27,372 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,373 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,373 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:00:27,373 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:00:27,373 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:00:27,373 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:00:27,373 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 03:00:27,373 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,373 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,373 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,373 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,373 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,374 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:00:27,374 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,374 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,374 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,374 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,374 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,374 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,374 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:00:27,374 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,374 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,374 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,374 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,375 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,375 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 03:00:27,375 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,375 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:00:27,375 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 03:00:27,375 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 03:00:27,375 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,375 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,375 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,375 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:00:27,375 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 03:00:27,376 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:00:27,376 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:00:27,376 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,376 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:00:27,376 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:00:27,376 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 03:00:27,540 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 03:00:27,727 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 03:00:27,915 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 03:00:33,805 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 03:00:33] "[37mPOST /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 03:01:59,112 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-09 03:02:00,804 INFO logger Thread-1 : backend started
2021-04-09 03:02:01,396 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 03:02:01,396 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 03:02:01,401 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-09 03:02:01,403 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-09 03:02:01,403 DEBUG matplotlib Thread-1 : interactive is False
2021-04-09 03:02:01,403 DEBUG matplotlib Thread-1 : platform is win32
2021-04-09 03:02:01,403 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'flask_cors', 'werkzeug.security', 'flask_cors.decorator', 'werkzeug.debug.console', 'flask_cors.core', 'code', 'six', 'codeop', 'flask_cors.extension', 'flask_cors.version', 'werkzeug.debug.repr', 'flask_bcrypt', 'werkzeug.debug.tbtools', 'bcrypt', 'ctypes.util', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'bson.code', 'bson.codec_options', 'bson.dbref', 'werkzeug._reloader', 'bson.son', 'bson.decimal128', 'encodings.idna', 'bson.errors', 'bson.int64', 'stringprep', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 03:02:01,447 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-09 03:02:01,450 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-09 03:02:01,636 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-09 03:02:01,637 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-09 03:02:01,665 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 03:02:01] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 03:02:01,696 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 03:02:01,722 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-04-09 03:02:01,722 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,723 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,723 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,723 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,723 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,723 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,723 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,723 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,723 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,724 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 03:02:01,724 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,724 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 03:02:01,724 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,724 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,724 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,724 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,724 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,724 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,724 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 03:02:01,724 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 03:02:01,725 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 03:02:01,725 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,725 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,725 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 03:02:01,725 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,725 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,725 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,725 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,725 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,725 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,725 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,725 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,726 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,726 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,726 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,726 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,726 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,726 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,726 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 03:02:01,726 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,726 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,726 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 03:02:01,726 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:01,727 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,727 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,727 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,727 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,727 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,727 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,727 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,727 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,727 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,727 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,727 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,727 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,728 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 03:02:01,728 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,728 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,728 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,728 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,728 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 03:02:01,728 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,728 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,728 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 03:02:01,728 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,728 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,729 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,729 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 03:02:01,729 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,729 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 03:02:01,729 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,729 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,729 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 03:02:01,729 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,729 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:02:01,730 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,730 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,730 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 03:02:01,730 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,730 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,730 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,730 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,730 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,730 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,730 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 03:02:01,730 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,731 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,731 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,731 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,731 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:02:01,731 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,731 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,731 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,731 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,731 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,731 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 03:02:01,731 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,731 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,732 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,732 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,732 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,732 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,732 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:01,732 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:02:01,732 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,732 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:02:01,732 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:02:01,732 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,732 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,733 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,733 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,733 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,733 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,733 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,733 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,733 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,733 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:02:01,733 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,733 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,733 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,734 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,734 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,734 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,734 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 03:02:01,734 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,734 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,734 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,734 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,734 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,734 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 03:02:01,734 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,734 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,735 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,735 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:02:01,735 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,735 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 03:02:01,735 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,735 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,735 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,735 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,735 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,735 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 03:02:01,735 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,736 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:02:01,736 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,736 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,736 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,736 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,736 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 03:02:01,736 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,736 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 03:02:01,736 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,737 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:01,737 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,737 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,737 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:01,737 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,737 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,737 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,737 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,737 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:02:01,738 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,738 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,738 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:01,738 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,738 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:02:01,738 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,738 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,738 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:02:01,738 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,738 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,738 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,738 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,739 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,739 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,739 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,739 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,739 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,739 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,739 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:02:01,739 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:02:01,739 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,739 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,739 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,740 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,740 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,740 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,740 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,740 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:02:01,740 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,740 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,740 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,740 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,740 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:01,740 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,740 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,740 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:02:01,741 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,741 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,741 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,741 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,741 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,741 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,741 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,741 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 03:02:01,741 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,741 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,741 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,742 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,742 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,742 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,742 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,742 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,742 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,742 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,742 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,742 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,742 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,742 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,743 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,743 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 03:02:01,743 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,743 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,743 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,743 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,743 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,743 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:02:01,743 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,744 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,744 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,744 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,744 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,744 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:02:01,744 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,744 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,744 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,744 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,744 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,744 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,745 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,745 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,745 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 03:02:01,745 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,745 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 03:02:01,745 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:01,745 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:01,745 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,745 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:02:01,745 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,745 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,745 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,745 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,746 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,746 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:02:01,746 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,746 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,746 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,746 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,746 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,746 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,746 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,746 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,746 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,746 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,747 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,747 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,747 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,747 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,747 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,747 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,747 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,747 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,747 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,747 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:01,747 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,747 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,748 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,748 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,748 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:02:01,748 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,748 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,748 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,748 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,748 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,748 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,748 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:02:01,748 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,749 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,749 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,749 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,749 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,749 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:02:01,749 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,749 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,749 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:02:01,749 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:02:01,749 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,749 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,749 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,750 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,750 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,750 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,750 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,750 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,750 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:02:01,750 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,750 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,750 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,750 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,750 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,751 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,751 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,751 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,751 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,751 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,751 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 03:02:01,751 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,751 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:02:01,751 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,751 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,752 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,752 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,752 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,752 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,752 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,752 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,752 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,752 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:02:01,752 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,753 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,753 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,753 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 03:02:01,753 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,753 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,753 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,753 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,753 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 03:02:01,753 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,753 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,754 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:01,754 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:02:01,754 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:01,754 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:02:01,754 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 03:02:01,754 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,754 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,754 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,754 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,754 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,755 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:02:01,755 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,755 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,755 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,755 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,755 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,755 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,755 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:02:01,755 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,755 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,755 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,756 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,756 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,756 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 03:02:01,756 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,756 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,756 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 03:02:01,756 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 03:02:01,756 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,756 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,757 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,757 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,757 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 03:02:01,757 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:02:01,757 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,757 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,757 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:02:01,757 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,757 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 03:02:01,764 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-04-09 03:02:01,764 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,764 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,764 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,764 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,764 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,764 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,765 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,765 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,765 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,765 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 03:02:01,765 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,765 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 03:02:01,765 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,765 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,766 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,766 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,766 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,766 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,766 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 03:02:01,766 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 03:02:01,766 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 03:02:01,767 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,767 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,767 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 03:02:01,767 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,767 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,767 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,767 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,767 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,767 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,767 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,767 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,768 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,768 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,768 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,768 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,768 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,768 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,768 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 03:02:01,768 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,769 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,769 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 03:02:01,769 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:01,769 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,769 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,769 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,769 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,769 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,769 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,769 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,769 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,770 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,770 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,770 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,770 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,770 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 03:02:01,770 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,770 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,770 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,770 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,770 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 03:02:01,770 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,771 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,771 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 03:02:01,771 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,771 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,771 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,771 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 03:02:01,771 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,771 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 03:02:01,771 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,772 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,772 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 03:02:01,772 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,772 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:02:01,772 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,772 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,772 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 03:02:01,772 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,773 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,773 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,773 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,773 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,773 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,773 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 03:02:01,774 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,774 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,774 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,774 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,774 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:02:01,774 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,774 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,774 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,775 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,775 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,775 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 03:02:01,775 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,775 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,775 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,775 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,775 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,775 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,775 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:01,775 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:02:01,776 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,776 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:02:01,776 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:02:01,776 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,776 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,776 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,776 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,776 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,776 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,777 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,777 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,777 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,777 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:02:01,777 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,777 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,777 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,777 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,777 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,778 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,778 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 03:02:01,778 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,778 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,778 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,778 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,778 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,778 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 03:02:01,778 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,778 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,779 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,779 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:02:01,779 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,779 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 03:02:01,779 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,779 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,779 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,779 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,779 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,779 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 03:02:01,780 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,780 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:02:01,780 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,780 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,780 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,780 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,780 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 03:02:01,781 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,781 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 03:02:01,781 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,781 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:01,781 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,781 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,781 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:01,782 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,782 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,782 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,782 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,782 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:02:01,782 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,782 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,782 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:01,783 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,783 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:02:01,783 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,783 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,783 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:02:01,783 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,783 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,783 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,783 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,783 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,784 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,784 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,784 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,784 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,784 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,784 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:02:01,784 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:02:01,784 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,784 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,784 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,784 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,785 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,785 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,785 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,785 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:02:01,785 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,785 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,785 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,785 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,785 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:01,785 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,786 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,786 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:02:01,786 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,786 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,786 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,786 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,786 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,786 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,786 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,787 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 03:02:01,787 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,787 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,787 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,787 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,787 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,787 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,788 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,788 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,788 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,788 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,788 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,788 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,788 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,789 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,789 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,789 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 03:02:01,789 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,789 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,789 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,789 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,789 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,789 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:02:01,789 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,790 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,790 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,790 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,790 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,790 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:02:01,790 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,790 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,790 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,790 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,790 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,791 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,791 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,791 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,791 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 03:02:01,791 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,791 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 03:02:01,791 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:01,791 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:01,791 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,791 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:02:01,792 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,792 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,792 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,792 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,792 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,792 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:02:01,792 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,792 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,792 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,792 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,793 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,793 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,793 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,793 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,793 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,793 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,793 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,793 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,793 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,793 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,793 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,794 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,794 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,794 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,794 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,794 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:01,794 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,794 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,794 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,795 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,795 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:02:01,795 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,795 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,795 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,795 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,795 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,795 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,795 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:02:01,796 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,796 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,796 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,796 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,796 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,796 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:02:01,796 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,796 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,796 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:02:01,796 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:02:01,797 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,797 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,797 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,797 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,797 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,797 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,797 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,797 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,797 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:02:01,797 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,797 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,798 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,798 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,798 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,798 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,798 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,798 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,798 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,798 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,798 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 03:02:01,799 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,799 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:02:01,799 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,799 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,799 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,799 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,799 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,799 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,799 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,799 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,800 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,800 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:02:01,800 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,800 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,800 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,800 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 03:02:01,800 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,800 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,800 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,800 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,801 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 03:02:01,801 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,801 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,801 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:01,801 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:02:01,801 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:01,801 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:02:01,801 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 03:02:01,801 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,801 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,801 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,802 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,802 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,802 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:02:01,802 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,802 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,802 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,802 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,803 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,803 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,803 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:02:01,803 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,803 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,803 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,803 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,803 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,804 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 03:02:01,804 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,804 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:01,804 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 03:02:01,804 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 03:02:01,804 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,804 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,804 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,804 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:01,805 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 03:02:01,805 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:02:01,805 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:02:01,805 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,805 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:02:01,805 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:01,805 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 03:02:01,973 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 03:02:02,167 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 03:02:02,338 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 03:02:02,518 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 03:02:02] "[35m[1mPOST /report_dashboard HTTP/1.1[0m" 500 -
2021-04-09 03:02:47,944 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-09 03:02:49,751 INFO logger Thread-1 : backend started
2021-04-09 03:02:50,459 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 03:02:50,459 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 03:02:50,463 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-09 03:02:50,466 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-09 03:02:50,466 DEBUG matplotlib Thread-1 : interactive is False
2021-04-09 03:02:50,466 DEBUG matplotlib Thread-1 : platform is win32
2021-04-09 03:02:50,467 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'flask_cors', 'werkzeug.security', 'flask_cors.decorator', 'werkzeug.debug.console', 'flask_cors.core', 'code', 'six', 'codeop', 'flask_cors.extension', 'werkzeug.debug.repr', 'flask_cors.version', 'werkzeug.debug.tbtools', 'flask_bcrypt', 'ctypes.util', 'bcrypt', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'bson.code', 'werkzeug._reloader', 'bson.codec_options', 'bson.dbref', 'encodings.idna', 'bson.son', 'bson.decimal128', 'stringprep', 'bson.errors', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 03:02:50,515 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-09 03:02:50,518 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-09 03:02:50,726 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-09 03:02:50,726 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-09 03:02:50,754 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 03:02:50] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 03:02:50,772 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 03:02:50,799 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-04-09 03:02:50,799 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,799 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,800 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,800 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,800 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,800 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,800 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,800 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,800 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,800 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 03:02:50,800 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,800 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 03:02:50,800 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,801 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,801 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,801 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,801 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,801 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,801 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 03:02:50,801 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 03:02:50,802 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 03:02:50,802 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,802 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,802 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 03:02:50,802 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,802 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,802 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,802 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,802 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,802 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,802 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,802 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,803 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,803 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,803 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,803 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,803 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,803 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,803 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 03:02:50,803 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,803 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,803 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 03:02:50,803 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:50,804 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,804 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,804 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,804 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,804 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,804 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,804 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,804 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,804 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,804 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,804 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,804 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,805 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 03:02:50,805 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,805 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,805 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,805 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,805 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 03:02:50,805 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,805 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,805 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 03:02:50,805 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,805 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,805 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,806 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 03:02:50,806 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,806 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 03:02:50,806 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,806 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,806 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 03:02:50,806 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,806 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:02:50,806 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,806 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,806 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 03:02:50,806 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,807 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,807 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,807 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,807 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,807 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,807 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 03:02:50,807 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,807 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,807 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,807 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,807 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:02:50,808 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,808 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,808 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,808 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,808 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,808 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 03:02:50,808 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,808 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,808 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,809 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,809 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,809 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,809 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:50,809 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:02:50,809 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,809 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:02:50,809 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:02:50,809 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,810 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,810 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,810 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,810 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,810 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,810 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,810 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,810 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,810 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:02:50,810 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,811 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,811 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,811 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,811 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,811 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,811 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 03:02:50,811 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,811 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,811 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,811 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,811 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,812 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 03:02:50,812 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,812 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,812 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,812 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:02:50,812 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,812 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 03:02:50,812 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,812 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,812 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,812 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,812 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,813 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 03:02:50,813 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,813 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:02:50,813 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,813 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,813 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,813 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,813 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 03:02:50,813 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,813 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 03:02:50,813 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,814 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:50,814 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,814 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,814 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:50,814 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,814 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,814 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,814 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,814 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:02:50,814 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,814 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,814 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:50,815 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,815 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:02:50,815 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,815 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,815 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:02:50,815 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,815 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,815 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,815 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,815 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,816 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,816 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,816 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,816 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,816 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,816 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:02:50,816 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:02:50,816 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,816 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,817 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,817 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,817 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,817 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,817 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,817 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:02:50,817 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,817 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,817 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,817 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,817 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:50,818 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,818 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,818 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:02:50,818 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,818 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,818 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,818 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,818 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,818 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,818 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,818 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 03:02:50,818 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,819 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,819 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,819 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,819 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,819 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,819 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,819 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,819 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,819 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,819 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,819 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,819 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,820 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,820 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,820 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 03:02:50,820 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,820 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,820 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,820 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,820 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,820 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:02:50,820 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,820 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,821 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,821 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,821 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,821 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:02:50,821 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,821 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,821 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,821 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,821 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,821 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,822 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,822 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,822 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 03:02:50,822 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,822 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 03:02:50,822 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:50,822 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:50,822 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,823 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:02:50,823 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,823 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,823 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,823 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,823 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,823 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:02:50,823 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,824 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,824 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,824 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,824 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,824 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,824 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,824 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,824 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,824 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,824 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,825 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,825 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,825 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,825 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,825 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,825 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,825 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,825 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,825 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:50,825 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,826 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,826 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,826 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,826 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:02:50,826 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,826 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,826 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,826 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,826 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,826 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,827 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:02:50,827 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,827 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,827 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,827 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,827 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,827 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:02:50,827 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,827 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,828 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:02:50,828 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:02:50,828 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,828 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,828 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,828 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,828 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,828 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,829 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,829 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,829 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:02:50,829 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,829 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,829 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,829 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,829 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,829 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,829 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,830 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,830 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,830 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,830 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 03:02:50,830 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,830 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:02:50,830 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,830 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,830 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,830 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,831 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,831 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,831 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,831 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,831 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,831 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:02:50,831 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,832 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,832 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,832 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 03:02:50,832 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,832 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,832 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,832 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,833 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 03:02:50,833 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,833 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,833 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:50,833 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:02:50,833 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:50,833 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:02:50,833 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 03:02:50,833 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,834 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,834 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,834 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,834 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,834 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:02:50,834 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,834 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,834 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,834 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,834 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,834 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,835 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:02:50,835 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,835 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,835 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,835 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,835 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,835 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 03:02:50,835 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,835 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,835 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 03:02:50,835 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 03:02:50,836 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,836 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,836 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,836 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,836 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 03:02:50,836 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:02:50,836 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,836 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,837 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:02:50,837 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,837 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 03:02:50,844 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-04-09 03:02:50,844 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,844 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,844 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,844 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,844 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,844 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,844 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,844 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,844 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,845 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 03:02:50,845 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,845 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 03:02:50,845 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,845 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,845 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,845 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,845 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,845 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,845 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 03:02:50,846 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 03:02:50,846 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 03:02:50,846 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,846 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,846 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 03:02:50,846 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,846 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,846 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,847 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,847 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,847 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,847 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,847 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,847 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,847 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,847 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,847 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,847 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,848 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,848 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 03:02:50,848 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,848 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,848 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 03:02:50,848 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:50,848 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,848 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,848 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,848 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,848 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,849 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,849 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,849 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,849 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,849 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,849 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,849 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,849 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 03:02:50,850 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,850 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,850 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,850 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,850 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 03:02:50,850 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,850 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,850 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 03:02:50,850 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,850 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,850 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,851 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 03:02:50,851 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,851 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 03:02:50,851 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,851 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,851 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 03:02:50,851 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,851 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:02:50,851 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,851 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,851 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 03:02:50,852 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,852 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,852 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,852 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,852 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,852 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,852 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 03:02:50,852 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,853 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,853 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,853 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,853 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:02:50,853 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,853 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,853 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,853 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,853 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,854 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 03:02:50,854 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,854 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,854 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,854 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,854 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,854 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,855 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:50,855 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:02:50,855 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,855 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:02:50,855 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:02:50,855 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,855 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,855 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,855 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,855 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,856 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,856 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,856 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,856 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,856 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:02:50,856 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,856 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,856 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,857 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,857 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,857 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,857 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 03:02:50,857 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,857 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,857 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,857 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,858 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,858 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 03:02:50,858 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,858 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,858 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,858 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:02:50,858 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,858 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 03:02:50,858 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,859 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,859 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,859 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,859 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,859 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 03:02:50,859 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,859 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:02:50,859 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,859 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,859 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,860 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,860 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 03:02:50,860 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,860 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 03:02:50,860 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,860 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:50,860 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,860 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,860 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:50,860 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,860 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,861 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,861 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,861 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:02:50,861 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,861 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,861 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:50,861 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,862 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:02:50,862 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,862 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,862 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:02:50,862 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,862 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,862 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,862 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,863 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,863 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,863 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,863 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,863 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,863 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,863 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:02:50,863 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:02:50,863 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,864 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,864 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,864 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,864 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,864 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,864 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,864 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:02:50,864 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,864 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,864 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,864 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,865 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:50,865 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,865 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,865 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:02:50,865 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,865 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,865 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,865 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,865 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,866 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,866 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,866 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 03:02:50,866 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,866 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,866 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,866 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,866 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,866 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,867 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,867 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,867 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,867 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,867 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,867 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,867 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,867 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,867 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,867 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 03:02:50,867 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,868 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,868 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,868 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,868 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,868 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:02:50,868 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,868 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,869 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,869 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,869 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,869 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:02:50,869 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,869 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,869 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,870 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,870 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,870 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,870 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,870 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,870 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 03:02:50,870 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,871 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 03:02:50,871 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:50,871 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:50,871 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,871 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:02:50,871 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,872 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,872 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,872 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,872 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,872 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:02:50,872 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,873 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,874 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:50,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,875 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:02:50,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,876 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:02:50,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,877 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:02:50,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:02:50,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:02:50,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,878 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:02:50,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,879 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 03:02:50,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:02:50,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,880 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:02:50,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 03:02:50,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,881 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 03:02:50,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:50,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:02:50,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:02:50,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:02:50,882 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 03:02:50,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:02:50,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,883 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:02:50,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,884 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 03:02:50,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,885 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:02:50,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 03:02:50,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 03:02:50,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:02:50,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 03:02:50,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:02:50,886 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:02:50,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:02:50,887 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:02:50,887 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 03:02:51,060 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 03:02:51,242 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 03:02:51,413 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 03:02:51,599 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 03:02:51] "[35m[1mPOST /report_dashboard HTTP/1.1[0m" 500 -
2021-04-09 03:03:11,112 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-09 03:03:12,733 INFO logger Thread-1 : backend started
2021-04-09 03:03:13,354 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 03:03:13,355 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 03:03:13,359 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-09 03:03:13,361 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-09 03:03:13,361 DEBUG matplotlib Thread-1 : interactive is False
2021-04-09 03:03:13,361 DEBUG matplotlib Thread-1 : platform is win32
2021-04-09 03:03:13,361 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'flask_cors', 'werkzeug.security', 'flask_cors.decorator', 'werkzeug.debug.console', 'flask_cors.core', 'code', 'six', 'codeop', 'flask_cors.extension', 'werkzeug.debug.repr', 'flask_cors.version', 'werkzeug.debug.tbtools', 'flask_bcrypt', 'ctypes.util', 'bcrypt', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'bson.code', 'werkzeug._reloader', 'bson.codec_options', 'bson.dbref', 'encodings.idna', 'bson.son', 'bson.decimal128', 'stringprep', 'bson.errors', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 03:03:13,409 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-09 03:03:13,416 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-09 03:03:13,625 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-09 03:03:13,626 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-09 03:03:13,657 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 03:03:13] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 03:03:13,676 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 03:03:13,705 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-04-09 03:03:13,706 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,706 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,706 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,706 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,706 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,706 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,707 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,707 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,707 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,707 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 03:03:13,707 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,707 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 03:03:13,707 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,707 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,707 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,707 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,708 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,708 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,708 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 03:03:13,708 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 03:03:13,708 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 03:03:13,708 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,708 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,708 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 03:03:13,708 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,708 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,708 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,708 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,709 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,709 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,709 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,709 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,709 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,709 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,709 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,709 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,709 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,709 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,710 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 03:03:13,710 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,710 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,710 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 03:03:13,710 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:03:13,710 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,710 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,710 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,710 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,710 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,711 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,711 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,711 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,711 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,711 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,711 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,711 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,711 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 03:03:13,711 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,711 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,711 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,711 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,712 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 03:03:13,712 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,712 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,712 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 03:03:13,712 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,712 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,712 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,712 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 03:03:13,712 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,713 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 03:03:13,713 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,713 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,713 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 03:03:13,713 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,713 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:03:13,713 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,713 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,714 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 03:03:13,714 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,714 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,714 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,714 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,714 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,714 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,714 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 03:03:13,715 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,715 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,715 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,715 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,715 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:03:13,715 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,715 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,715 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,715 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,715 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,716 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 03:03:13,716 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,716 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,716 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,716 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,716 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,716 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,716 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:03:13,716 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:03:13,716 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,717 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:03:13,717 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:03:13,717 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,717 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,717 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,717 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,717 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,717 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,717 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,718 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,718 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,718 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:03:13,718 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,718 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,718 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,718 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,718 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,718 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,719 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 03:03:13,719 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,719 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,719 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,719 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,719 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,719 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 03:03:13,719 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,719 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,719 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,720 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:03:13,720 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,720 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 03:03:13,720 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,720 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,720 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,720 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,720 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,720 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 03:03:13,720 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,720 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:03:13,721 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,721 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,721 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,721 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,721 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 03:03:13,721 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,721 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 03:03:13,721 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,721 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:03:13,721 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,721 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,722 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:03:13,722 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,722 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,722 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,722 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,722 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:03:13,722 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,722 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,723 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:03:13,723 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,723 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:03:13,723 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,723 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,723 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:03:13,723 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,723 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,724 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,724 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,724 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,724 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,724 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,724 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,724 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,724 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,724 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:03:13,725 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:03:13,725 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,725 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,725 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,725 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,725 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,725 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,725 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,725 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:03:13,725 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,725 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,726 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,726 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,726 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:03:13,726 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,726 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,726 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:03:13,726 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,726 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,726 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,727 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,727 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,727 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,727 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,727 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 03:03:13,727 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,727 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,727 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,727 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,727 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,728 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,728 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,728 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,728 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,728 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,728 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,728 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,728 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,728 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,728 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,728 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 03:03:13,729 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,729 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,729 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,729 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,729 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,729 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:03:13,729 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,729 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,729 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,729 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,729 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,729 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:03:13,729 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,730 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,730 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,730 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,730 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,730 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,730 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,730 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,730 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 03:03:13,730 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,730 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 03:03:13,730 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:03:13,730 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:03:13,731 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,731 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:03:13,731 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,731 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,731 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,731 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,731 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,731 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:03:13,731 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,731 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,731 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,731 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,732 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,732 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,732 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,732 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,732 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,732 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,732 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,732 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,732 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,732 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,732 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,733 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,733 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,733 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,733 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,733 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:03:13,733 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,733 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,733 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,733 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,733 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:03:13,733 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,733 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,734 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,734 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,734 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,734 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,734 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:03:13,734 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,734 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,734 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,734 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,735 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,735 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:03:13,735 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,735 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,735 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:03:13,735 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:03:13,735 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,735 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,735 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,736 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,736 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,736 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,736 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,736 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,736 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:03:13,736 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,736 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,736 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,736 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,736 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,736 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,737 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,737 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,737 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,737 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,737 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 03:03:13,737 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,737 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:03:13,737 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,737 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,737 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,738 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,738 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,738 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,738 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,738 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,738 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,738 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:03:13,738 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,738 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,738 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,738 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 03:03:13,739 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,739 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,739 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,739 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,739 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 03:03:13,739 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,739 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,739 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:03:13,739 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:03:13,739 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:03:13,740 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:03:13,740 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 03:03:13,740 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,740 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,740 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,740 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,740 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,740 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:03:13,740 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,740 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,740 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,741 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,741 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,741 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,741 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:03:13,741 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,741 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,741 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,741 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,741 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,741 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 03:03:13,742 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,742 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,742 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 03:03:13,742 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 03:03:13,742 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,742 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,742 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,742 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,742 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 03:03:13,742 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:03:13,742 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,743 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,743 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:03:13,743 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,743 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 03:03:13,749 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-04-09 03:03:13,749 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,749 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,750 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,750 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,750 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,750 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,750 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,750 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,750 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,750 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 03:03:13,750 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,750 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 03:03:13,751 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,751 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,751 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,751 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,751 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,751 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,751 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 03:03:13,751 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 03:03:13,751 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 03:03:13,751 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,751 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,751 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 03:03:13,752 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,752 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,752 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,752 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,752 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,752 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,752 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,752 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,752 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,752 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,753 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,753 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,753 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,753 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,753 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 03:03:13,753 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,753 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,753 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 03:03:13,753 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:03:13,753 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,754 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,754 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,754 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,754 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,754 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,754 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,754 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,754 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,754 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,755 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,755 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,755 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 03:03:13,755 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,755 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,755 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,755 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,755 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 03:03:13,755 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,755 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,756 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 03:03:13,756 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,756 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,756 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,756 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 03:03:13,756 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,756 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 03:03:13,756 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,756 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,756 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 03:03:13,756 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,757 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:03:13,757 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,757 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,757 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 03:03:13,757 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,757 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,757 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,757 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,757 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,757 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,758 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 03:03:13,758 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,758 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,758 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,758 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,758 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:03:13,758 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,758 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,758 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,758 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,758 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,759 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 03:03:13,759 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,759 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,759 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,759 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,759 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,759 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,759 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:03:13,759 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:03:13,759 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,759 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:03:13,760 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:03:13,760 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,760 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,760 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,760 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,760 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,760 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,760 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,760 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,760 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,761 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:03:13,761 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,761 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,761 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,761 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,761 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,761 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,761 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 03:03:13,761 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,761 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,761 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,761 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,762 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,762 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 03:03:13,762 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,762 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,762 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,762 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:03:13,762 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,762 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 03:03:13,762 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,763 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,763 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,763 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,763 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,763 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 03:03:13,763 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,763 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:03:13,763 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,764 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,764 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,764 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,764 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 03:03:13,764 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,764 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 03:03:13,764 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,764 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:03:13,765 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,765 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,765 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:03:13,765 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,765 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,765 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,765 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,765 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:03:13,765 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,765 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,765 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:03:13,766 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,766 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:03:13,766 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,766 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,766 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:03:13,766 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,766 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,766 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,766 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,766 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,767 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,767 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,767 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,767 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,767 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,767 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:03:13,767 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:03:13,767 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,767 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,768 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,768 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,768 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,768 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,768 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,768 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:03:13,768 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,768 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,768 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,769 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,769 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:03:13,769 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,769 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,769 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:03:13,769 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,769 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,769 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,769 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,769 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,769 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,769 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,770 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 03:03:13,770 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,770 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,770 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,770 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,770 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,770 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,770 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,770 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,770 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,770 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,770 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,771 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,771 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,771 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,771 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,771 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 03:03:13,771 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,771 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,771 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,771 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,771 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,771 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:03:13,772 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,772 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,772 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,772 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,772 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,772 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:03:13,772 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,772 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,772 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,772 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,772 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,772 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,773 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,773 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,773 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 03:03:13,773 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,773 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 03:03:13,773 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:03:13,773 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:03:13,773 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,773 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:03:13,774 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,774 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,774 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,774 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,774 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,774 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:03:13,774 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,774 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,774 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,774 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,775 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,775 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,775 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,775 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,775 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,775 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,775 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,775 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,776 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,776 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,776 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,776 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,776 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,776 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,776 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,776 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:03:13,776 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,776 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,776 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,777 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,777 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:03:13,777 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,777 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,777 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,777 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,777 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,777 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,777 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:03:13,777 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,777 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,778 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,778 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,778 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,778 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:03:13,778 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,778 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,778 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:03:13,778 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:03:13,778 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,778 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,779 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,779 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,779 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,779 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,779 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,779 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,779 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:03:13,779 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,779 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,779 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,779 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,779 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,780 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,780 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,780 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,780 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,780 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,780 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 03:03:13,780 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,780 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:03:13,780 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,780 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,781 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,781 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,781 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,781 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,781 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,781 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,781 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,781 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:03:13,781 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,781 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,781 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,782 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 03:03:13,782 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,782 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,782 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,782 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,782 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 03:03:13,782 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,782 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,782 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:03:13,782 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:03:13,782 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:03:13,783 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:03:13,783 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 03:03:13,783 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,783 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,783 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,783 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,783 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,783 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:03:13,783 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,784 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,784 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,784 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,784 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,784 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,784 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:03:13,784 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,784 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,784 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,784 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,785 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,785 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 03:03:13,785 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,785 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:03:13,785 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 03:03:13,785 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 03:03:13,785 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,785 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,785 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,785 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:03:13,785 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 03:03:13,786 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:03:13,786 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:03:13,786 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,786 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:03:13,786 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:03:13,786 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 03:03:13,955 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 03:03:14,152 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 03:03:14,335 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 03:03:22,502 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 03:03:22] "[37mPOST /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 03:04:50,063 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-09 03:04:51,894 INFO logger Thread-1 : backend started
2021-04-09 03:04:52,587 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 03:04:52,587 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 03:04:52,592 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-09 03:04:52,595 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-09 03:04:52,595 DEBUG matplotlib Thread-1 : interactive is False
2021-04-09 03:04:52,595 DEBUG matplotlib Thread-1 : platform is win32
2021-04-09 03:04:52,595 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'werkzeug.security', 'flask_cors', 'werkzeug.debug.console', 'flask_cors.decorator', 'code', 'flask_cors.core', 'six', 'codeop', 'flask_cors.extension', 'werkzeug.debug.repr', 'flask_cors.version', 'werkzeug.debug.tbtools', 'flask_bcrypt', 'bcrypt', 'ctypes.util', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'bson.code', 'bson.codec_options', 'werkzeug._reloader', 'bson.dbref', 'bson.son', 'bson.decimal128', 'encodings.idna', 'bson.errors', 'bson.int64', 'stringprep', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 03:04:52,640 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-09 03:04:52,645 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-09 03:04:52,857 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-09 03:04:52,857 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-09 03:04:53,692 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 03:04:53] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 03:04:53,958 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 03:04:53,983 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-04-09 03:04:53,983 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:53,983 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,984 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,984 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,984 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,984 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,984 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,984 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,984 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,984 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 03:04:53,984 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:53,984 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 03:04:53,984 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,984 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,984 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,984 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,985 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,985 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,985 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 03:04:53,985 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 03:04:53,985 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 03:04:53,985 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,985 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,985 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 03:04:53,985 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,985 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:53,985 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:53,985 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:53,985 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:53,985 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,985 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,986 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,986 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,986 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,986 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,986 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,986 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,986 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,986 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 03:04:53,986 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,986 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,986 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 03:04:53,986 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:04:53,986 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:53,986 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,987 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,987 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:53,987 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:53,987 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,987 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,987 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,987 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:53,987 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,987 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,987 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,987 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 03:04:53,988 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,988 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:53,988 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,988 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,988 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 03:04:53,988 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:53,988 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:53,988 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 03:04:53,988 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,988 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,988 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,988 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 03:04:53,989 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,989 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 03:04:53,989 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,989 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,989 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 03:04:53,989 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:53,989 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:04:53,989 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:53,989 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,989 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 03:04:53,989 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:53,989 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,989 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:04:53,989 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:53,989 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,990 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,990 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 03:04:53,990 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:53,990 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,990 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,990 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:53,990 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:04:53,990 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,990 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:53,990 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:53,990 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,990 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,990 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 03:04:53,990 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,990 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,991 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,991 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,991 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,991 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,991 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:04:53,991 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:04:53,991 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,991 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:04:53,991 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:04:53,991 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,991 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:53,991 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:53,991 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,991 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,992 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:53,992 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,992 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:53,992 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:53,992 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:04:53,992 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,992 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,992 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,992 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,992 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,992 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,992 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 03:04:53,992 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:04:53,992 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,992 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,993 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,993 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,993 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 03:04:53,993 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,993 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,993 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,993 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:04:53,993 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,993 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 03:04:53,993 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,993 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,993 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,993 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,993 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,994 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 03:04:53,994 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,994 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:04:53,994 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,994 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,994 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,994 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:53,994 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 03:04:53,994 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,994 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 03:04:53,994 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,994 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:04:53,994 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,994 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,995 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:04:53,995 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,995 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,995 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,995 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,995 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:04:53,995 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,995 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:04:53,995 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:04:53,996 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,996 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:04:53,996 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,996 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,996 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:04:53,996 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,997 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:53,997 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:53,997 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,997 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,997 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 03:04:53,997 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,997 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:53,997 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,997 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,997 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:04:53,997 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:04:53,997 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,997 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:53,998 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,998 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:04:53,998 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,998 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,998 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,998 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:04:53,998 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,998 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,998 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:53,998 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,998 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:04:53,998 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,998 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,998 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:04:53,999 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:53,999 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,999 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,999 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,999 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,999 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,999 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:53,999 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 03:04:53,999 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,999 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,999 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:53,999 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:53,999 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,000 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,000 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,000 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,000 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,000 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,000 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,000 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,000 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,000 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,000 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,000 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 03:04:54,000 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,001 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,001 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,001 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,001 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,001 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:04:54,001 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,001 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,001 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,001 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,001 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,001 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:04:54,001 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,001 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,001 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,002 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,002 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,002 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,002 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,002 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,002 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 03:04:54,002 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,002 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 03:04:54,002 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:04:54,002 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:04:54,003 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,003 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:04:54,003 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,003 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,003 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,003 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,003 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,003 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:04:54,003 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,003 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,003 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,003 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,003 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,004 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,004 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,004 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,004 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,004 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,004 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,004 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,004 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,004 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,004 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,004 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,004 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,004 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,004 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,005 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:04:54,005 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,005 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,005 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,005 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,005 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:04:54,005 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,005 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,005 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,005 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,005 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,005 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,005 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:04:54,005 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,006 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,006 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,006 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,006 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,006 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:04:54,006 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,006 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,006 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:04:54,006 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:04:54,006 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,006 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,006 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,006 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,006 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,007 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,007 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,007 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,007 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:04:54,007 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,007 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,007 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,007 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,007 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,007 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,007 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,007 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,007 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,007 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,008 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 03:04:54,008 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,008 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:04:54,008 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,008 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,008 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,008 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,008 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,008 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,008 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,008 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,008 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,008 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:04:54,008 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,008 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,009 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,009 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 03:04:54,009 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,009 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,009 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,009 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,009 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 03:04:54,009 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,009 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,009 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:04:54,009 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:04:54,009 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:04:54,009 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:04:54,009 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 03:04:54,010 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,010 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,010 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,010 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,010 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,010 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:04:54,010 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,010 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,010 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,010 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,011 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,011 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,011 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:04:54,011 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,011 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,011 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,011 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,011 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,011 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 03:04:54,011 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,011 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,011 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 03:04:54,011 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 03:04:54,012 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,012 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,012 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,012 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,012 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 03:04:54,012 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:04:54,012 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,012 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,013 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:04:54,013 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,013 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 03:04:54,017 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-04-09 03:04:54,017 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,017 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,017 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,017 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,017 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,017 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,018 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,018 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,018 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,018 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 03:04:54,018 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,018 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 03:04:54,018 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,018 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,018 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,018 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,018 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,018 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,018 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 03:04:54,018 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 03:04:54,019 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 03:04:54,019 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,019 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,019 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 03:04:54,019 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,019 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,020 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,020 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,020 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,020 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,020 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,020 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,020 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,020 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,020 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,021 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,021 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,021 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,021 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 03:04:54,021 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,021 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,021 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 03:04:54,021 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:04:54,021 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,021 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,021 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,021 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,021 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,021 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,021 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,021 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,021 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,021 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,021 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,021 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,022 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 03:04:54,022 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,022 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,022 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,022 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,022 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 03:04:54,022 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,022 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,022 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 03:04:54,022 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,022 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,023 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,023 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 03:04:54,023 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,023 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 03:04:54,023 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,023 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,023 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 03:04:54,023 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,023 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:04:54,023 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,023 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,023 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 03:04:54,023 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,023 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,024 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,024 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,024 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,024 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,024 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 03:04:54,024 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,024 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,024 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,024 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,024 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:04:54,024 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,024 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,024 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,025 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,025 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,025 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 03:04:54,025 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,025 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,025 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,025 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,025 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,025 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,025 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:04:54,025 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:04:54,025 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,025 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:04:54,025 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:04:54,026 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,026 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,026 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,026 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,026 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,026 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,026 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,026 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,026 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,026 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:04:54,026 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,026 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,026 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,026 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,027 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,027 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,027 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 03:04:54,027 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,027 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,027 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,027 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,027 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,027 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 03:04:54,027 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,027 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,027 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,027 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:04:54,027 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,028 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 03:04:54,028 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,028 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,028 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,028 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,028 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,028 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 03:04:54,028 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,028 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:04:54,028 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,028 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,028 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,028 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,028 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 03:04:54,029 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,029 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 03:04:54,029 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,029 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:04:54,029 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,029 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,029 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:04:54,029 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,029 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,029 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,029 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,030 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:04:54,030 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,030 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,030 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:04:54,030 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,030 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:04:54,030 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,030 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,030 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:04:54,030 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,030 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,031 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,031 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,031 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,031 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,031 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,031 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,031 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,031 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,031 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:04:54,031 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:04:54,032 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,032 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,032 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,032 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,032 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,032 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,032 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,032 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:04:54,032 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,032 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,032 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,032 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,032 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:04:54,032 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,033 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,033 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:04:54,033 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,033 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,033 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,033 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,033 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,033 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,033 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,033 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 03:04:54,033 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,033 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,033 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,033 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,034 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,034 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,034 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,034 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,034 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,034 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,034 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,034 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,034 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,034 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,034 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,034 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 03:04:54,034 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,035 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,035 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,035 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,035 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,035 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:04:54,035 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,035 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,035 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,035 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,035 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,035 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:04:54,035 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,035 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,035 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,036 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,036 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,036 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,036 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,036 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,036 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 03:04:54,036 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,036 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 03:04:54,036 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:04:54,036 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:04:54,036 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,036 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:04:54,036 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,037 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,037 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,037 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,037 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,037 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:04:54,037 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,037 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,037 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,037 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,037 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,037 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,037 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,038 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,038 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,038 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,038 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,038 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,038 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,038 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,038 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,038 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,038 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,038 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,038 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,038 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:04:54,039 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,039 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,039 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,039 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,039 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:04:54,039 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,039 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,039 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,039 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,039 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,040 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,040 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:04:54,040 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,040 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,040 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,040 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,040 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,040 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:04:54,040 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,040 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,040 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:04:54,040 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:04:54,040 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,040 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,041 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,041 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,041 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,041 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,041 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,041 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,041 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:04:54,041 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,041 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,041 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,041 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,041 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,041 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,041 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,042 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,042 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,042 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,042 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 03:04:54,042 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,042 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:04:54,042 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,042 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,042 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,042 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,042 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,042 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,042 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,042 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:04:54,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 03:04:54,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 03:04:54,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,043 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:04:54,044 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:04:54,044 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:04:54,044 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:04:54,044 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 03:04:54,044 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,044 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,044 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,044 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,044 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,044 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:04:54,044 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,044 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,044 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,045 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,045 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,045 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,045 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:04:54,045 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,045 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,045 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,045 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,045 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,045 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 03:04:54,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:04:54,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 03:04:54,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 03:04:54,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:04:54,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 03:04:54,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:04:54,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:04:54,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,046 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:04:54,047 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:04:54,047 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 03:04:54,223 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 03:04:54,417 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 03:04:54,615 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 03:05:02,804 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 03:05:02] "[37mPOST /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 03:05:05,904 INFO werkzeug Thread-5 : 127.0.0.1 - - [09/Apr/2021 03:05:05] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 03:05:06,211 INFO werkzeug Thread-6 : 127.0.0.1 - - [09/Apr/2021 03:05:06] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 03:05:15,760 INFO werkzeug Thread-7 : 127.0.0.1 - - [09/Apr/2021 03:05:15] "[37mOPTIONS /login HTTP/1.1[0m" 200 -
2021-04-09 03:05:19,040 INFO logger Thread-8 : MihirChhiber is attemping to log in
2021-04-09 03:05:19,045 INFO werkzeug Thread-8 : 127.0.0.1 - - [09/Apr/2021 03:05:19] "[37mPOST /login HTTP/1.1[0m" 200 -
2021-04-09 03:05:52,815 INFO werkzeug Thread-9 : 127.0.0.1 - - [09/Apr/2021 03:05:52] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 03:05:56,226 INFO werkzeug Thread-10 : 127.0.0.1 - - [09/Apr/2021 03:05:56] "[37mOPTIONS /login_verified HTTP/1.1[0m" 200 -
2021-04-09 03:05:56,504 INFO werkzeug Thread-11 : 127.0.0.1 - - [09/Apr/2021 03:05:56] "[35m[1mPOST /login_verified HTTP/1.1[0m" 500 -
2021-04-09 03:06:01,930 INFO werkzeug Thread-12 : 127.0.0.1 - - [09/Apr/2021 03:06:01] "[37mGET /staff_get_photo_notification HTTP/1.1[0m" 200 -
2021-04-09 03:06:04,608 INFO werkzeug Thread-13 : 127.0.0.1 - - [09/Apr/2021 03:06:04] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 03:06:04,616 INFO werkzeug Thread-14 : 127.0.0.1 - - [09/Apr/2021 03:06:04] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 03:06:09,805 INFO werkzeug Thread-15 : 127.0.0.1 - - [09/Apr/2021 03:06:09] "[37mOPTIONS /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 03:06:10,110 INFO werkzeug Thread-16 : 127.0.0.1 - - [09/Apr/2021 03:06:10] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 03:06:10,114 INFO werkzeug Thread-17 : 127.0.0.1 - - [09/Apr/2021 03:06:10] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 03:06:10,115 INFO werkzeug Thread-18 : 127.0.0.1 - - [09/Apr/2021 03:06:10] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 03:06:10,127 INFO werkzeug Thread-19 : 127.0.0.1 - - [09/Apr/2021 03:06:10] "[37mPOST /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 03:06:19,653 INFO werkzeug Thread-20 : 127.0.0.1 - - [09/Apr/2021 03:06:19] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 03:06:22,297 INFO werkzeug Thread-21 : 127.0.0.1 - - [09/Apr/2021 03:06:22] "[37mGET /tenant_list_non_FB HTTP/1.1[0m" 200 -
2021-04-09 03:06:22,597 INFO werkzeug Thread-22 : 127.0.0.1 - - [09/Apr/2021 03:06:22] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 03:06:22,599 INFO werkzeug Thread-23 : 127.0.0.1 - - [09/Apr/2021 03:06:22] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 03:06:26,676 INFO werkzeug Thread-24 : 127.0.0.1 - - [09/Apr/2021 03:06:26] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 03:06:26,680 INFO werkzeug Thread-25 : 127.0.0.1 - - [09/Apr/2021 03:06:26] "[37mGET /tenant_list_FB HTTP/1.1[0m" 200 -
2021-04-09 03:06:26,681 INFO werkzeug Thread-26 : 127.0.0.1 - - [09/Apr/2021 03:06:26] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 03:07:26,830 INFO werkzeug Thread-27 : 127.0.0.1 - - [09/Apr/2021 03:07:26] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 03:07:27,133 INFO werkzeug Thread-28 : 127.0.0.1 - - [09/Apr/2021 03:07:27] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 03:07:30,131 INFO werkzeug Thread-29 : 127.0.0.1 - - [09/Apr/2021 03:07:30] "[37mOPTIONS /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 03:07:30,134 INFO werkzeug Thread-30 : 127.0.0.1 - - [09/Apr/2021 03:07:30] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 03:07:30,143 INFO werkzeug Thread-32 : 127.0.0.1 - - [09/Apr/2021 03:07:30] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 03:07:30,144 INFO werkzeug Thread-31 : 127.0.0.1 - - [09/Apr/2021 03:07:30] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 03:07:30,379 DEBUG matplotlib.pyplot Thread-33 : Loaded backend agg version unknown.
2021-04-09 03:07:30,554 DEBUG matplotlib.pyplot Thread-33 : Loaded backend agg version unknown.
2021-04-09 03:07:30,732 DEBUG matplotlib.pyplot Thread-33 : Loaded backend agg version unknown.
2021-04-09 03:07:30,906 DEBUG matplotlib.pyplot Thread-33 : Loaded backend agg version unknown.
2021-04-09 03:07:31,056 INFO werkzeug Thread-33 : 127.0.0.1 - - [09/Apr/2021 03:07:31] "[37mPOST /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 03:07:41,223 INFO werkzeug Thread-34 : 127.0.0.1 - - [09/Apr/2021 03:07:41] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 03:07:41,563 DEBUG matplotlib.pyplot Thread-35 : Loaded backend agg version unknown.
2021-04-09 03:07:41,718 DEBUG matplotlib.pyplot Thread-35 : Loaded backend agg version unknown.
2021-04-09 03:07:41,853 DEBUG matplotlib.pyplot Thread-35 : Loaded backend agg version unknown.
2021-04-09 03:07:41,989 DEBUG matplotlib.pyplot Thread-35 : Loaded backend agg version unknown.
2021-04-09 03:07:42,144 INFO werkzeug Thread-35 : 127.0.0.1 - - [09/Apr/2021 03:07:42] "[35m[1mPOST /report_dashboard HTTP/1.1[0m" 500 -
2021-04-09 03:08:18,691 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-09 03:08:20,567 INFO logger Thread-1 : backend started
2021-04-09 03:08:21,192 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 03:08:21,192 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 03:08:21,197 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-09 03:08:21,199 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-09 03:08:21,199 DEBUG matplotlib Thread-1 : interactive is False
2021-04-09 03:08:21,200 DEBUG matplotlib Thread-1 : platform is win32
2021-04-09 03:08:21,200 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'flask_cors', 'werkzeug.security', 'flask_cors.decorator', 'werkzeug.debug.console', 'flask_cors.core', 'code', 'six', 'codeop', 'flask_cors.extension', 'flask_cors.version', 'werkzeug.debug.repr', 'flask_bcrypt', 'werkzeug.debug.tbtools', 'bcrypt', 'ctypes.util', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'bson.code', 'bson.codec_options', 'bson.dbref', 'bson.son', 'bson.decimal128', 'bson.errors', 'bson.int64', 'werkzeug._reloader', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'encodings.idna', 'bson.tz_util', 'bson.regex', 'stringprep', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 03:08:21,242 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-09 03:08:21,245 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-09 03:08:21,460 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-09 03:08:21,461 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-09 03:08:21,488 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 03:08:21] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 03:08:21,522 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 03:08:21,551 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-04-09 03:08:21,551 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,551 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 03:08:21,552 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 03:08:21,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 03:08:21,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 03:08:21,553 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 03:08:21,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 03:08:21,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,554 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 03:08:21,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,555 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 03:08:21,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:08:21,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,556 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 03:08:21,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 03:08:21,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,557 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 03:08:21,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 03:08:21,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 03:08:21,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,558 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 03:08:21,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:08:21,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 03:08:21,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,559 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,560 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,560 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 03:08:21,560 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,560 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,560 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,560 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,560 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:08:21,560 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,560 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,560 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,560 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,560 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,561 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 03:08:21,561 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,561 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,561 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,561 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,561 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,561 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,561 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:08:21,561 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:08:21,561 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,562 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:08:21,562 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:08:21,562 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,562 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,562 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,562 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,562 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,562 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,562 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,562 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,562 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,563 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:08:21,563 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,563 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,563 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,563 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,563 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,563 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,563 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 03:08:21,563 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,563 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,563 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,564 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,564 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,564 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 03:08:21,564 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,564 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,564 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,564 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:08:21,564 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,564 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 03:08:21,565 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,565 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,565 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,565 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,565 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,565 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 03:08:21,565 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,565 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:08:21,565 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,565 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,566 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,566 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,566 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 03:08:21,566 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,566 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 03:08:21,566 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,566 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:08:21,566 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,566 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,567 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:08:21,567 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,567 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,567 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,567 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,567 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:08:21,567 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,567 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,567 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:08:21,567 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,567 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:08:21,567 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,568 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,568 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:08:21,568 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,568 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,568 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,568 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,568 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,568 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,568 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,568 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,569 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,569 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,569 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:08:21,569 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:08:21,569 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,569 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,569 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,569 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,569 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,569 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,570 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,570 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:08:21,570 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,570 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,570 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,570 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,570 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:08:21,570 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,570 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,570 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:08:21,571 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,571 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,571 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,571 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,571 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,571 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,571 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,571 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 03:08:21,571 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,571 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,572 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,572 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,572 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,572 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,572 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,572 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,572 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,572 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,572 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,573 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,573 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,573 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,573 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,573 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 03:08:21,573 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,573 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,573 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,573 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,573 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,573 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:08:21,573 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,574 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,574 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,574 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,574 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,574 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:08:21,574 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,574 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,574 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,574 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,575 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,575 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,575 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,575 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,575 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 03:08:21,575 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,575 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 03:08:21,575 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:08:21,575 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:08:21,575 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,575 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:08:21,575 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,576 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,576 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,576 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,576 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,576 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:08:21,576 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,576 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,576 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,576 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,576 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,576 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,577 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,577 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,577 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,577 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,577 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,577 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,577 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,577 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,577 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,577 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,578 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,578 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,578 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,578 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:08:21,578 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,578 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,578 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,578 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,578 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:08:21,579 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,579 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,579 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,579 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,579 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,579 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,579 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:08:21,579 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,579 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,580 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,580 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,580 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,580 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:08:21,580 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,580 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,580 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:08:21,580 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:08:21,580 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,580 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,581 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,581 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,581 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,581 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,581 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,581 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,581 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:08:21,581 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,581 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,582 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,582 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,582 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,582 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,582 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,582 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,582 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,582 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,582 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 03:08:21,582 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,583 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:08:21,583 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,583 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,583 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,583 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,583 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,583 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,583 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,583 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,584 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,584 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:08:21,584 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,584 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,584 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,584 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 03:08:21,584 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,584 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,584 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,585 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,585 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 03:08:21,585 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,585 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,585 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:08:21,585 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:08:21,585 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:08:21,585 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:08:21,585 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 03:08:21,585 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,586 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,586 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,586 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,586 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,586 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:08:21,586 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,586 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,586 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,586 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,587 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,587 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,587 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:08:21,587 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,587 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,587 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,587 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,587 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,587 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 03:08:21,588 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,588 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,588 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 03:08:21,588 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 03:08:21,588 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,588 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,588 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,588 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,588 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 03:08:21,588 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:08:21,589 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,589 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,589 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:08:21,589 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,589 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 03:08:21,595 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-04-09 03:08:21,595 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,595 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,595 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,595 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,596 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,596 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,596 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,596 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,596 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,596 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 03:08:21,596 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,596 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 03:08:21,596 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,596 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,596 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,597 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,597 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,597 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,597 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 03:08:21,597 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 03:08:21,597 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 03:08:21,597 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,597 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,597 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 03:08:21,597 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,597 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,597 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,598 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,598 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,598 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,598 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,598 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,598 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,598 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,598 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,598 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,598 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,598 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,599 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 03:08:21,599 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,599 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,599 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 03:08:21,599 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:08:21,599 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,599 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,599 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,600 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,600 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,600 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,600 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,600 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,600 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,600 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,601 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,601 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,601 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 03:08:21,601 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,601 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,601 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,601 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,602 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 03:08:21,602 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,602 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,602 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 03:08:21,602 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,602 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,602 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,602 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 03:08:21,603 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,603 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 03:08:21,603 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,603 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,603 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 03:08:21,603 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,603 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:08:21,604 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,604 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,604 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 03:08:21,604 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,604 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,604 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,604 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,605 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,605 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,605 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 03:08:21,605 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,605 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,605 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,605 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,605 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:08:21,606 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,606 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,606 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,606 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,606 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,606 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 03:08:21,606 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,607 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,607 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,607 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,607 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,607 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,607 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:08:21,607 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:08:21,608 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,608 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:08:21,608 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:08:21,608 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,608 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,608 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,609 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,609 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,609 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,609 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,609 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,609 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,609 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:08:21,610 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,610 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,610 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,610 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,610 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,610 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,610 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 03:08:21,610 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,610 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,610 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,610 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,611 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,611 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 03:08:21,611 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,611 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,611 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,611 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:08:21,611 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,611 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 03:08:21,611 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,611 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,611 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,612 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,612 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,612 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 03:08:21,612 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,612 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:08:21,612 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,612 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,612 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,612 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,613 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 03:08:21,613 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,613 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 03:08:21,613 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,613 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:08:21,613 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,613 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,613 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:08:21,614 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,614 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,614 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,614 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,614 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:08:21,614 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,614 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,614 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:08:21,614 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,614 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:08:21,614 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,615 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,615 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:08:21,615 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,615 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,615 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,615 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,615 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,615 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,615 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,615 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,615 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,616 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,616 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:08:21,616 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:08:21,616 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,616 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,616 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,616 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,616 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,616 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,616 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,616 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:08:21,617 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,617 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,617 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,617 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,617 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:08:21,617 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,617 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,617 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:08:21,617 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,617 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,617 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,618 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,618 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,618 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,618 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,618 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 03:08:21,618 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,618 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,618 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,618 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,618 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,619 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,619 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,619 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,619 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,619 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,619 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,619 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,619 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,619 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,619 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,620 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 03:08:21,620 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,620 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,620 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,620 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,620 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,620 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:08:21,620 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,621 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,621 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,621 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,621 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,621 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:08:21,621 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,621 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,621 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,621 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,622 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,622 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,622 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,622 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,622 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 03:08:21,622 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,622 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 03:08:21,622 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:08:21,622 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:08:21,623 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,623 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:08:21,623 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,623 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,623 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,623 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,623 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,623 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:08:21,623 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,624 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,624 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,624 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,624 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,624 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,624 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,624 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,624 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,624 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,624 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,625 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,625 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,625 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,625 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,625 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,625 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,625 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,625 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,625 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:08:21,625 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,626 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,626 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,626 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,626 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:08:21,626 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,626 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,626 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,626 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,626 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,626 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,626 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:08:21,626 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,627 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,627 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,627 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,627 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,627 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:08:21,627 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,627 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,627 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:08:21,627 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:08:21,627 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,628 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,628 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,628 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,628 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,628 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,628 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,628 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,629 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:08:21,629 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,629 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,629 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,629 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,629 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,629 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,629 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,630 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,630 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,630 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,630 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 03:08:21,630 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,630 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:08:21,630 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,630 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,630 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,630 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,631 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,631 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,631 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,631 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,631 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,632 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:08:21,632 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,632 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,633 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,633 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 03:08:21,633 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,633 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,633 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,633 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,633 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 03:08:21,633 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,634 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,634 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:08:21,634 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:08:21,634 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:08:21,634 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:08:21,634 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 03:08:21,634 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,634 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,634 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,634 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,634 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,635 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:08:21,635 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,635 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,635 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,635 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,635 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,635 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,636 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:08:21,636 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,636 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,636 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,636 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,636 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,636 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 03:08:21,636 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,636 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:08:21,637 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 03:08:21,637 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 03:08:21,637 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,637 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,637 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,637 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:08:21,637 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 03:08:21,637 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:08:21,637 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:08:21,637 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,638 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:08:21,638 DEBUG matplotlib.font_manager Thread-4 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:08:21,638 DEBUG matplotlib.font_manager Thread-4 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 03:08:21,821 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 03:08:22,039 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 03:08:22,228 DEBUG matplotlib.pyplot Thread-4 : Loaded backend agg version unknown.
2021-04-09 03:08:26,361 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 03:08:26] "[37mPOST /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 03:08:58,147 INFO werkzeug Thread-5 : 127.0.0.1 - - [09/Apr/2021 03:08:58] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 03:08:58,406 DEBUG matplotlib.pyplot Thread-6 : Loaded backend agg version unknown.
2021-04-09 03:08:58,548 DEBUG matplotlib.pyplot Thread-6 : Loaded backend agg version unknown.
2021-04-09 03:08:58,686 DEBUG matplotlib.pyplot Thread-6 : Loaded backend agg version unknown.
2021-04-09 03:08:58,852 DEBUG matplotlib.pyplot Thread-6 : Loaded backend agg version unknown.
2021-04-09 03:09:02,789 INFO werkzeug Thread-6 : 127.0.0.1 - - [09/Apr/2021 03:09:02] "[37mPOST /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 03:09:15,142 INFO werkzeug Thread-7 : 127.0.0.1 - - [09/Apr/2021 03:09:15] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 03:09:15,444 INFO werkzeug Thread-8 : 127.0.0.1 - - [09/Apr/2021 03:09:15] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 03:09:22,197 INFO werkzeug Thread-9 : 127.0.0.1 - - [09/Apr/2021 03:09:22] "[37mOPTIONS /login HTTP/1.1[0m" 200 -
2021-04-09 03:09:25,758 INFO logger Thread-10 : MihirChhiber is attemping to log in
2021-04-09 03:09:25,764 INFO werkzeug Thread-10 : 127.0.0.1 - - [09/Apr/2021 03:09:25] "[37mPOST /login HTTP/1.1[0m" 200 -
2021-04-09 03:09:26,896 INFO logger Thread-11 : MihirChhiber is attemping to log in
2021-04-09 03:09:26,902 INFO werkzeug Thread-11 : 127.0.0.1 - - [09/Apr/2021 03:09:26] "[37mPOST /login HTTP/1.1[0m" 200 -
2021-04-09 03:09:28,472 INFO werkzeug Thread-12 : 127.0.0.1 - - [09/Apr/2021 03:09:28] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 03:09:32,023 INFO werkzeug Thread-13 : 127.0.0.1 - - [09/Apr/2021 03:09:32] "[37mGET /staff_get_photo_notification HTTP/1.1[0m" 200 -
2021-04-09 03:09:34,495 INFO werkzeug Thread-14 : 127.0.0.1 - - [09/Apr/2021 03:09:34] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 03:09:34,496 INFO werkzeug Thread-15 : 127.0.0.1 - - [09/Apr/2021 03:09:34] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 03:09:36,702 INFO werkzeug Thread-16 : 127.0.0.1 - - [09/Apr/2021 03:09:36] "[37mOPTIONS /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 03:09:37,006 INFO werkzeug Thread-17 : 127.0.0.1 - - [09/Apr/2021 03:09:37] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 03:09:37,009 INFO werkzeug Thread-18 : 127.0.0.1 - - [09/Apr/2021 03:09:37] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 03:09:37,018 INFO werkzeug Thread-19 : 127.0.0.1 - - [09/Apr/2021 03:09:37] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 03:09:37,022 DEBUG matplotlib.pyplot Thread-20 : Loaded backend agg version unknown.
2021-04-09 03:09:37,162 DEBUG matplotlib.pyplot Thread-20 : Loaded backend agg version unknown.
2021-04-09 03:09:37,295 DEBUG matplotlib.pyplot Thread-20 : Loaded backend agg version unknown.
2021-04-09 03:09:37,429 DEBUG matplotlib.pyplot Thread-20 : Loaded backend agg version unknown.
2021-04-09 03:09:37,568 INFO werkzeug Thread-20 : 127.0.0.1 - - [09/Apr/2021 03:09:37] "[37mPOST /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 03:09:51,189 INFO werkzeug Thread-21 : 127.0.0.1 - - [09/Apr/2021 03:09:51] "[37mOPTIONS /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 03:09:51,453 DEBUG matplotlib.pyplot Thread-22 : Loaded backend agg version unknown.
2021-04-09 03:09:51,581 DEBUG matplotlib.pyplot Thread-22 : Loaded backend agg version unknown.
2021-04-09 03:09:51,707 DEBUG matplotlib.pyplot Thread-22 : Loaded backend agg version unknown.
2021-04-09 03:09:51,862 DEBUG matplotlib.pyplot Thread-22 : Loaded backend agg version unknown.
2021-04-09 03:09:55,817 INFO werkzeug Thread-22 : 127.0.0.1 - - [09/Apr/2021 03:09:55] "[37mPOST /report_dashboard HTTP/1.1[0m" 200 -
2021-04-09 03:14:44,514 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\apis\\__init__.py', reloading
2021-04-09 03:14:46,407 INFO logger Thread-1 : backend started
2021-04-09 03:14:47,033 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 03:14:47,033 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 03:14:47,037 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-09 03:14:47,041 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-09 03:14:47,041 DEBUG matplotlib Thread-1 : interactive is False
2021-04-09 03:14:47,041 DEBUG matplotlib Thread-1 : platform is win32
2021-04-09 03:14:47,041 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'werkzeug.security', 'flask_cors', 'werkzeug.debug.console', 'flask_cors.decorator', 'code', 'flask_cors.core', 'six', 'codeop', 'flask_cors.extension', 'werkzeug.debug.repr', 'flask_cors.version', 'werkzeug.debug.tbtools', 'flask_bcrypt', 'ctypes.util', 'bcrypt', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'werkzeug._reloader', 'bson.code', 'bson.codec_options', 'bson.dbref', 'encodings.idna', 'bson.son', 'bson.decimal128', 'stringprep', 'bson.errors', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 03:14:47,084 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-09 03:14:47,087 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-09 03:14:47,300 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-09 03:14:47,301 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-09 03:14:58,865 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 03:14:58] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 03:14:58,881 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 03:14:58] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 03:15:04,246 INFO werkzeug Thread-5 : 127.0.0.1 - - [09/Apr/2021 03:15:04] "[37mOPTIONS /login HTTP/1.1[0m" 200 -
2021-04-09 03:15:08,013 INFO logger Thread-6 : MihirChhiber is attemping to log in
2021-04-09 03:15:08,015 INFO werkzeug Thread-6 : 127.0.0.1 - - [09/Apr/2021 03:15:08] "[37mPOST /login HTTP/1.1[0m" 200 -
2021-04-09 03:15:15,484 INFO werkzeug Thread-7 : 127.0.0.1 - - [09/Apr/2021 03:15:15] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 03:15:19,679 INFO werkzeug Thread-8 : 127.0.0.1 - - [09/Apr/2021 03:15:19] "[37mGET /staff_get_photo_notification HTTP/1.1[0m" 200 -
2021-04-09 03:15:21,122 INFO werkzeug Thread-9 : 127.0.0.1 - - [09/Apr/2021 03:15:21] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 03:15:21,426 INFO werkzeug Thread-10 : 127.0.0.1 - - [09/Apr/2021 03:15:21] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 03:15:25,229 INFO werkzeug Thread-11 : 127.0.0.1 - - [09/Apr/2021 03:15:25] "[37mGET /tenant_list_FB HTTP/1.1[0m" 200 -
2021-04-09 03:15:27,802 INFO werkzeug Thread-12 : 127.0.0.1 - - [09/Apr/2021 03:15:27] "[37mGET /tenant_list_non_FB HTTP/1.1[0m" 200 -
2021-04-09 03:15:33,134 INFO werkzeug Thread-13 : 127.0.0.1 - - [09/Apr/2021 03:15:33] "[37mOPTIONS /compare_tenant HTTP/1.1[0m" 200 -
2021-04-09 03:15:33,137 INFO werkzeug Thread-14 : 127.0.0.1 - - [09/Apr/2021 03:15:33] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 03:15:33,141 INFO werkzeug Thread-15 : 127.0.0.1 - - [09/Apr/2021 03:15:33] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 03:15:33,142 INFO werkzeug Thread-16 : 127.0.0.1 - - [09/Apr/2021 03:15:33] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 03:15:33,407 DEBUG matplotlib.pyplot Thread-17 : Loaded backend agg version unknown.
2021-04-09 03:15:33,436 DEBUG matplotlib.font_manager Thread-17 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-04-09 03:15:33,436 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,436 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,436 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,436 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,436 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,437 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,437 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,437 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,437 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,437 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 03:15:33,437 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,437 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 03:15:33,437 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,437 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,437 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,437 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,438 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,438 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,438 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 03:15:33,438 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 03:15:33,438 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 03:15:33,438 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,438 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,438 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 03:15:33,438 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,438 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,438 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,439 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,439 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,439 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,439 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,439 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,439 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,439 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,439 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,439 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,439 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,439 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,439 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 03:15:33,439 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,440 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,440 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 03:15:33,440 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:15:33,440 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,440 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,440 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,440 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,440 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,440 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,440 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,440 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,440 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,440 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,440 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,440 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,441 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 03:15:33,441 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,441 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,441 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,441 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,441 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 03:15:33,441 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,441 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,441 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 03:15:33,441 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,441 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,441 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,441 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 03:15:33,441 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,442 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 03:15:33,442 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,442 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,442 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 03:15:33,442 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,442 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:15:33,442 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,442 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,442 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 03:15:33,442 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,442 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,442 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,442 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,442 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,443 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,443 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 03:15:33,443 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,443 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,443 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,443 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,443 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:15:33,443 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,443 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,443 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,443 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,443 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,443 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 03:15:33,443 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,443 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,444 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,444 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,444 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,444 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,444 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:15:33,444 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:15:33,444 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,444 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:15:33,444 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:15:33,444 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,444 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,444 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,444 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,444 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,444 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,444 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,445 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,445 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,445 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:15:33,445 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,445 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,445 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,445 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,445 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,445 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,445 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 03:15:33,445 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,445 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,445 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,445 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,445 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,445 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 03:15:33,446 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,446 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,446 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,446 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:15:33,446 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,446 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 03:15:33,446 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,446 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,446 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,446 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,446 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,446 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 03:15:33,446 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,446 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:15:33,446 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,447 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,447 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,447 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,447 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 03:15:33,447 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,447 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 03:15:33,447 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,447 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:15:33,447 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,447 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,447 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:15:33,447 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,447 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,447 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,447 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,447 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:15:33,448 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,448 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,448 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:15:33,448 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,448 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:15:33,448 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,448 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,448 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:15:33,448 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,448 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,448 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,448 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,448 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,448 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,448 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,448 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,449 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,449 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,449 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:15:33,449 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:15:33,449 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,449 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,449 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,449 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,449 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,449 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,449 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,449 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:15:33,449 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,449 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,449 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,450 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,450 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:15:33,450 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,450 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,450 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:15:33,450 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,450 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,450 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,450 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,450 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,450 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,450 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,450 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 03:15:33,450 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,450 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,450 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,451 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,451 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,451 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,451 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,451 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,451 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,451 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,451 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,451 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,451 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,451 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,451 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,451 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 03:15:33,451 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,452 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,452 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,452 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,452 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,452 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:15:33,452 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,452 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,452 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,452 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,452 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,452 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:15:33,452 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,453 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,453 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,453 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,453 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,453 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,453 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,453 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,453 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 03:15:33,453 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,453 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 03:15:33,453 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:15:33,453 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:15:33,453 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,453 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:15:33,454 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,454 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,454 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,454 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,454 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,454 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:15:33,454 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,454 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,454 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,454 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,454 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,454 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,454 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,454 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,454 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,454 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,455 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,455 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,455 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,455 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,455 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,455 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,455 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,455 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,455 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,455 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:15:33,455 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,455 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,455 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,455 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,455 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:15:33,456 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,456 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,456 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,456 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,456 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,456 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,456 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:15:33,456 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,456 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,456 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,456 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,456 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,456 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:15:33,457 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,457 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,457 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:15:33,457 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:15:33,457 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,457 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,457 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,457 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,457 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,457 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,457 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,457 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,457 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:15:33,457 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,457 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,457 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,457 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,458 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,458 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,458 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,458 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,458 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,458 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,458 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 03:15:33,458 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,458 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:15:33,458 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,458 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,458 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,458 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,458 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,458 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,459 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,459 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,459 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,459 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:15:33,459 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,459 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,459 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,459 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 03:15:33,459 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,459 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,459 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,459 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,459 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 03:15:33,459 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,459 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,459 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:15:33,460 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:15:33,460 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:15:33,460 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:15:33,460 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 03:15:33,460 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,460 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,460 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,460 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,460 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,460 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:15:33,460 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,460 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,460 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,460 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,460 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,460 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,461 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:15:33,461 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,461 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,461 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,461 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,461 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,461 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 03:15:33,461 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,461 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,461 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 03:15:33,461 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 03:15:33,461 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,461 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,461 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,461 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,461 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 03:15:33,462 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:15:33,462 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,462 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,462 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:15:33,462 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,462 DEBUG matplotlib.font_manager Thread-17 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 03:15:33,467 DEBUG matplotlib.font_manager Thread-17 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-04-09 03:15:33,467 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,467 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,467 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,467 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,467 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,467 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,467 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,467 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,467 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,468 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 03:15:33,468 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,468 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 03:15:33,468 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,468 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,468 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,468 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,468 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,468 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,468 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 03:15:33,468 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 03:15:33,468 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 03:15:33,468 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,468 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,468 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 03:15:33,469 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,469 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,469 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,469 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,469 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,469 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,469 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,469 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,469 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,469 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,469 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,469 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,469 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,469 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,469 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 03:15:33,470 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,470 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,470 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 03:15:33,470 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:15:33,470 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,470 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,470 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,470 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,470 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,470 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,470 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,470 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,470 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,470 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,470 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,470 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,471 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 03:15:33,471 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,471 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,471 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,471 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,471 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 03:15:33,471 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,471 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,471 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 03:15:33,471 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,471 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,471 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,471 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 03:15:33,471 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,471 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 03:15:33,471 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,472 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,472 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 03:15:33,472 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,472 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:15:33,472 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,472 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,472 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 03:15:33,472 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,472 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,472 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,472 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,472 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,472 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,472 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 03:15:33,472 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,472 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,473 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,473 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,473 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:15:33,473 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,473 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,473 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,473 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,473 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,473 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 03:15:33,473 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,473 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,473 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,473 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,473 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,474 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,474 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:15:33,474 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:15:33,474 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,474 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:15:33,474 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:15:33,474 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,474 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,474 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,474 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,474 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,474 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,474 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,474 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,474 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,474 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:15:33,475 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,475 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,475 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,475 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,475 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,475 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,475 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 03:15:33,475 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,475 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,475 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,476 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,476 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,476 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 03:15:33,476 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,476 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,476 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,476 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:15:33,476 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,476 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 03:15:33,476 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,476 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,476 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,476 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,476 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,477 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 03:15:33,477 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,477 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:15:33,477 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,477 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,477 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,477 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,477 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 03:15:33,477 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,477 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 03:15:33,477 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,477 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:15:33,477 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,477 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,477 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:15:33,477 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,478 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,478 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,478 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,478 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:15:33,478 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,478 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,478 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:15:33,478 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,478 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:15:33,478 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,478 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,478 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:15:33,478 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,478 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,478 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,478 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,479 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,479 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,479 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,479 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,479 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,479 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,479 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:15:33,479 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:15:33,479 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,479 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,479 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,479 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,479 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,479 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,480 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,480 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:15:33,480 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,480 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,480 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,480 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,480 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:15:33,480 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,480 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,480 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:15:33,480 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,480 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,480 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,480 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,480 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,480 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,481 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,481 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 03:15:33,481 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,481 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,481 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,481 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,481 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,481 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,481 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,481 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,481 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,481 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,481 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,481 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,481 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,481 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,482 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,482 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 03:15:33,482 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,482 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,482 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,482 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,482 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,482 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:15:33,482 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,482 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,482 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,482 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,482 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,482 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:15:33,482 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,482 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,483 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,483 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,483 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,483 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,483 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,483 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,483 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 03:15:33,483 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,483 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 03:15:33,483 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:15:33,483 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:15:33,483 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,483 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:15:33,483 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,483 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,484 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,484 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,484 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,484 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:15:33,484 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,484 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,484 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,484 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,484 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,484 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,484 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,484 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,484 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,484 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,484 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,484 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,484 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,485 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,485 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,485 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,485 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,485 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,485 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,485 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:15:33,485 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,485 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,485 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,485 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,485 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:15:33,485 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,485 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,485 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,486 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,486 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,486 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,486 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:15:33,486 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,486 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,486 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,486 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,486 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,486 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:15:33,486 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,486 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,486 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:15:33,486 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:15:33,486 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,486 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,487 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,487 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,487 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,487 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,487 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,487 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,487 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:15:33,487 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,487 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,487 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,487 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,487 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,487 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,487 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,487 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,487 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,488 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,488 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 03:15:33,488 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,488 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:15:33,488 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,488 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,488 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,488 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,488 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,488 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,488 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,488 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,488 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,488 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:15:33,488 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,488 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,489 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,489 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 03:15:33,489 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,489 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,489 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,489 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,489 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 03:15:33,489 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,489 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,489 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:15:33,489 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:15:33,489 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:15:33,489 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:15:33,489 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 03:15:33,489 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,490 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,490 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,490 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,490 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,490 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:15:33,490 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,490 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,490 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,490 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,490 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,490 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,490 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:15:33,490 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,490 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,490 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,491 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,491 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,491 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 03:15:33,491 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,491 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:15:33,491 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 03:15:33,491 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 03:15:33,491 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,491 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,491 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,491 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:15:33,491 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 03:15:33,491 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:15:33,491 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:15:33,491 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,492 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:15:33,492 DEBUG matplotlib.font_manager Thread-17 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:15:33,492 DEBUG matplotlib.font_manager Thread-17 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 03:15:33,700 DEBUG matplotlib.pyplot Thread-17 : Loaded backend agg version unknown.
2021-04-09 03:15:33,929 DEBUG matplotlib.pyplot Thread-17 : Loaded backend agg version unknown.
2021-04-09 03:15:34,161 DEBUG matplotlib.pyplot Thread-17 : Loaded backend agg version unknown.
2021-04-09 03:15:34,469 INFO werkzeug Thread-17 : 127.0.0.1 - - [09/Apr/2021 03:15:34] "[37mPOST /compare_tenant HTTP/1.1[0m" 200 -
2021-04-09 03:16:36,778 INFO logger Thread-1 : backend started
2021-04-09 03:16:37,346 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 03:16:37,346 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 03:16:37,350 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-09 03:16:37,353 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-09 03:16:37,353 DEBUG matplotlib Thread-1 : interactive is False
2021-04-09 03:16:37,353 DEBUG matplotlib Thread-1 : platform is win32
2021-04-09 03:16:37,353 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'encodings.utf_16_le', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'werkzeug.security', 'flask_cors', 'werkzeug.debug.console', 'flask_cors.decorator', 'code', 'flask_cors.core', 'codeop', 'six', 'werkzeug.debug.repr', 'flask_cors.extension', 'werkzeug.debug.tbtools', 'encodings.idna', 'flask_cors.version', 'stringprep', 'flask_bcrypt', 'bcrypt', 'werkzeug._reloader', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'bson.code', 'bson.codec_options', 'bson.dbref', 'bson.son', 'bson.decimal128', 'bson.errors', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 03:16:37,401 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-09 03:16:37,404 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-09 03:16:37,610 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-09 03:16:37,611 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-09 03:16:37,907 INFO logger Thread-1 : backend started
2021-04-09 03:16:38,536 DEBUG matplotlib Thread-1 : (private) matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 03:16:38,536 DEBUG matplotlib Thread-1 : matplotlib data path: C:\Users\mihir\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\LocalCache\local-packages\Python37\site-packages\matplotlib\mpl-data
2021-04-09 03:16:38,540 DEBUG matplotlib Thread-1 : CONFIGDIR=C:\Users\mihir\.matplotlib
2021-04-09 03:16:38,543 DEBUG matplotlib Thread-1 : matplotlib version 3.3.4
2021-04-09 03:16:38,543 DEBUG matplotlib Thread-1 : interactive is False
2021-04-09 03:16:38,543 DEBUG matplotlib Thread-1 : platform is win32
2021-04-09 03:16:38,543 DEBUG matplotlib Thread-1 : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'nt', 'winreg', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', 'site', 'os', 'stat', '_stat', '_collections_abc', 'ntpath', 'genericpath', 'os.path', '_sitebuiltins', '_bootlocale', '_locale', 'encodings.cp1252', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.logging', 'mpl_toolkits', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'flask', 'jinja2', 'markupsafe', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'string', '_string', 'markupsafe._compat', 'collections.abc', 'markupsafe._speedups', 'jinja2.bccache', 'errno', 'fnmatch', 'posixpath', 'tempfile', 'shutil', 'zlib', 'bz2', '_compression', 'threading', 'time', 'traceback', 'linecache', 'tokenize', 'token', '_bz2', 'lzma', '_lzma', 'random', 'math', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'jinja2._compat', 'pickle', 'struct', '_struct', '_compat_pickle', '_pickle', 'urllib', 'urllib.parse', 'jinja2.utils', 'json', 'json.decoder', 'json.scanner', '_json', 'json.encoder', 'jinja2.environment', 'jinja2.nodes', 'jinja2.compiler', 'jinja2.exceptions', 'jinja2.idtracking', 'jinja2.visitor', 'jinja2.optimizer', '__future__', 'jinja2.defaults', 'jinja2.filters', 'jinja2.runtime', 'jinja2.tests', 'decimal', 'numbers', '_decimal', 'jinja2.lexer', 'ast', '_ast', 'unicodedata', 'jinja2._identifier', 'jinja2.parser', 'jinja2.loaders', 'werkzeug', 'werkzeug.serving', 'signal', 'socket', '_socket', 'selectors', 'select', 'datetime', '_datetime', 'werkzeug._compat', 'werkzeug._internal', 'inspect', 'dis', 'opcode', '_opcode', 'logging', 'atexit', 'werkzeug.exceptions', 'werkzeug.utils', 'html', 'html.entities', 'werkzeug.urls', 'socketserver', 'http', 'http.server', 'copy', 'email', 'email.utils', 'email._parseaddr', 'calendar', 'locale', 'email.charset', 'email.base64mime', 'base64', 'binascii', 'email.quoprimime', 'email.errors', 'email.encoders', 'quopri', 'http.client', 'email.parser', 'email.feedparser', 'email._policybase', 'email.header', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'ssl', '_ssl', 'mimetypes', 'click', 'click.core', 'click._compat', 'click._winconsole', 'ctypes', '_ctypes', 'ctypes._endian', 'ctypes.wintypes', 'msvcrt', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'click._unicodefun', 'click.exceptions', 'click.utils', 'click.globals', 'click.formatting', 'click.parser', 'click.termui', 'click.types', 'click.decorators', 'werkzeug.test', 'werkzeug.datastructures', 'werkzeug.filesystem', 'werkzeug.http', 'urllib.request', 'urllib.error', 'urllib.response', 'nturl2path', 'werkzeug.wrappers', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wrappers.base_request', 'werkzeug.formparser', 'werkzeug.wsgi', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.request', 'werkzeug.wrappers.cors', 'werkzeug.wrappers.user_agent', 'werkzeug.useragents', 'werkzeug.wrappers.response', 'http.cookiejar', 'flask.json', 'uuid', 'itsdangerous', 'itsdangerous._json', 'itsdangerous.encoding', 'itsdangerous._compat', 'hmac', 'itsdangerous.exc', 'itsdangerous.jws', 'itsdangerous.serializer', 'itsdangerous.signer', 'itsdangerous.timed', 'itsdangerous.url_safe', 'flask._compat', 'flask.globals', 'werkzeug.local', 'dataclasses', 'flask.app', 'werkzeug.routing', 'difflib', 'pprint', 'flask.cli', 'platform', 'subprocess', '_winapi', 'flask.helpers', 'flask.signals', 'blinker', 'blinker.base', 'blinker._utilities', 'blinker._saferef', 'dotenv', 'dotenv.compat', 'typing', 'typing.io', 'typing.re', 'dotenv.main', 'dotenv.parser', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.sessions', 'flask.json.tag', 'flask.templating', 'flask.wrappers', 'werkzeug.wrappers.json', 'flask.blueprints', 'pkg_resources', 'zipfile', 'plistlib', 'xml', 'xml.parsers', 'xml.parsers.expat', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.six', 'pkg_resources.extern.six', 'pkg_resources._vendor.six.moves', 'pkg_resources.extern.six.moves', 'pkg_resources.py31compat', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.requirements', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources._vendor.six.moves.urllib', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.py2_warn', 'sysconfig', 'werkzeug.debug', 'wsgi', 'getpass', 'app', 'flask_cors', 'werkzeug.security', 'flask_cors.decorator', 'werkzeug.debug.console', 'flask_cors.core', 'code', 'six', 'codeop', 'flask_cors.extension', 'flask_cors.version', 'werkzeug.debug.repr', 'flask_bcrypt', 'werkzeug.debug.tbtools', 'bcrypt', 'ctypes.util', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'app.models', 'flask_mongoengine', 'mongoengine', 'mongoengine.connection', 'pymongo', 'pymongo.collection', 'bson', 'bson.binary', 'bson.py3compat', 'bson.code', 'werkzeug._reloader', 'bson.codec_options', 'bson.dbref', 'bson.son', 'encodings.idna', 'bson.decimal128', 'stringprep', 'bson.errors', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.objectid', 'bson.tz_util', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson.raw_bson', 'pymongo.common', 'pymongo.auth', 'pymongo.auth_aws', 'pymongo.errors', 'pymongo.saslprep', 'pymongo.compression_support', 'pymongo.monitoring', 'pymongo.helpers', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.read_preferences', 'pymongo.max_staleness_selectors', 'pymongo.server_type', 'pymongo.server_selectors', 'pymongo.ssl_support', 'ipaddress', 'pymongo.ssl_context', 'certifi', 'certifi.core', 'importlib.resources', 'pathlib', 'pymongo.write_concern', 'pymongo.message', 'pymongo._cmessage', 'pymongo.aggregation', 'pymongo.collation', 'pymongo.bulk', 'pymongo.client_session', 'pymongo.monotonic', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.mongo_client', 'pymongo.database', 'pymongo.son_manipulator', 'pymongo.periodic_executor', 'pymongo.uri_parser', 'pymongo.srv_resolver', 'dns', 'dns.version', 'dns.resolver', 'dns.exception', 'dns.flags', 'dns.inet', 'dns.ipv4', 'dns.ipv6', 'dns.message', 'dns.wire', 'dns.name', 'idna', 'idna.package_data', 'idna.core', 'idna.idnadata', 'idna.intranges', 'dns.immutable', 'dns._immutable_ctx', 'contextvars', '_contextvars', 'dns.edns', 'dns.enum', 'dns.rdata', 'dns.rdataclass', 'dns.rdatatype', 'dns.tokenizer', 'dns.ttl', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.rrset', 'dns.rdataset', 'dns.set', 'dns.renderer', 'dns.tsig', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.query', 'dns.serial', 'dns.xfr', 'dns.zone', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'requests', 'urllib3', 'urllib3.exceptions', 'urllib3.packages', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3._version', 'urllib3.connectionpool', 'urllib3.connection', 'urllib3.util', 'urllib3.util.connection', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.ssl_', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.timeout', 'urllib3.util.proxy', 'urllib3._collections', 'queue', '_queue', 'urllib3.request', 'urllib3.filepost', 'urllib3.fields', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.response', 'urllib3.util.queue', 'urllib3.poolmanager', 'chardet', 'chardet.compat', 'chardet.universaldetector', 'chardet.charsetgroupprober', 'chardet.enums', 'chardet.charsetprober', 'chardet.escprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.latin1prober', 'chardet.mbcsgroupprober', 'chardet.utf8prober', 'chardet.mbcssm', 'chardet.sjisprober', 'chardet.mbcharsetprober', 'chardet.chardistribution', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.jpcntx', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.sbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.version', 'requests.exceptions', 'requests.__version__', 'requests.utils', 'requests.certs', 'requests._internal_utils', 'requests.compat', 'http.cookies', 'requests.cookies', 'requests.structures', 'requests.packages', 'requests.packages.urllib3', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3._version', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.request', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.poolmanager', 'requests.packages.idna', 'requests.packages.idna.package_data', 'requests.packages.idna.core', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.chardet', 'requests.packages.chardet.compat', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.escprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.version', 'requests.models', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.api', 'requests.sessions', 'requests.adapters', 'requests_toolbelt', 'requests_toolbelt.adapters', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt._compat', 'urllib3.contrib.appengine', 'requests_toolbelt.adapters.source', 'requests_toolbelt.auth', 'requests_toolbelt.auth.guess', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.multipart', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt.adapters.host_header_ssl', 'dns.reversename', 'pymongo.client_options', 'pymongo.pool', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.network', 'pymongo.socket_checker', 'pymongo.ssl_match_hostname', 'pymongo.cursor_manager', 'pymongo.topology', 'pymongo.topology_description', 'pymongo.server_description', 'pymongo.monitor', 'pymongo.server', 'pymongo.response', 'pymongo.settings', 'pymongo.mongo_replica_set_client', 'mongoengine.document', 'mongoengine.signals', 'mongoengine.base', 'mongoengine.base.common', 'mongoengine.errors', 'mongoengine.base.datastructures', 'mongoengine.common', 'mongoengine.base.document', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.metaclasses', 'mongoengine.queryset', 'mongoengine.queryset.field_list', 'mongoengine.queryset.manager', 'mongoengine.queryset.queryset', 'mongoengine.queryset.base', 'mongoengine.context_managers', 'mongoengine.pymongo_support', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.fields', 'gridfs', 'gridfs.errors', 'gridfs.grid_file', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.parser.isoparser', 'mongoengine.base.utils', 'PIL', 'PIL._version', 'PIL.Image', 'xml.etree', 'xml.etree.ElementTree', 'xml.etree.ElementPath', '_elementtree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi', 'cffi.api', 'cffi.lock', 'cffi.error', 'cffi.model', 'PIL.ImageOps', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf', 'flask_mongoengine.wtf.base', 'flask_mongoengine.wtf.orm', 'wtforms', 'wtforms.validators', 'email_validator', 'wtforms.compat', 'wtforms.widgets', 'wtforms.widgets.core', 'wtforms.fields', 'wtforms.fields.core', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.simple', 'wtforms.form', 'wtforms.meta', 'flask_mongoengine.wtf.fields', 'gettext', 'flask_mongoengine.wtf.models', 'flask_wtf', 'flask_wtf.csrf', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.form', 'flask_wtf.recaptcha', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'app.config', 'app.apis', 'boto3', 'boto3.session', 'botocore', 'botocore.session', 'botocore.configloader', 'shlex', 'botocore.compat', 'botocore.vendored', 'botocore.vendored.six', 'botocore.exceptions', 'botocore.vendored.requests', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.credentials', 'botocore.config', 'botocore.endpoint', 'botocore.awsrequest', 'botocore.utils', 'cgi', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib_parse', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.hooks', 'botocore.history', 'botocore.response', 'botocore.parsers', 'botocore.eventstream', 'botocore.client', 'botocore.waiter', 'jmespath', 'jmespath.parser', 'jmespath.lexer', 'jmespath.exceptions', 'jmespath.compat', 'jmespath.ast', 'jmespath.visitor', 'jmespath.functions', 'botocore.docs', 'botocore.docs.service', 'botocore.docs.utils', 'botocore.docs.client', 'botocore.docs.method', 'botocore.docs.params', 'botocore.docs.shape', 'botocore.docs.example', 'botocore.docs.sharedexample', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.bcdoc.docstringparser', 'html.parser', '_markupbase', 'botocore.docs.bcdoc.style', 'botocore.docs.docstring', 'botocore.args', 'botocore.serialize', 'botocore.validate', 'botocore.signers', 'botocore.auth', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.standard', 'botocore.retries.quota', 'botocore.retries.special', 'botocore.retries.base', 'botocore.retries.adaptive', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.handlers', 'botocore.retryhandler', 'botocore.translate', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.factory', 'boto3.resources.action', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs', 'boto3.docs.service', 'boto3.docs.client', 'boto3.docs.resource', 'boto3.docs.base', 'boto3.docs.action', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.docstring', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.compat', 'app.apis.settings', 'app.apis.s3_methods', 'app.apis.utils', 'csv', '_csv', 'app.apis.notif_methods', 'app.apis.email_methods', 'email.mime', 'email.mime.multipart', 'email.mime.base', 'email.policy', 'email.headerregistry', 'email._header_value_parser', 'email.contentmanager', 'email.mime.text', 'email.mime.nonmultipart', 'smtplib', 'email.generator', 'pandas', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'glob', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'cython_runtime', 'numpy.random._bit_generator', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas._typing', 'mmap', 'pandas.compat.numpy', 'distutils', 'distutils.version', 'pandas._libs', 'pandas._libs.interval', '_cython_0_29_21', 'pandas._libs.hashtable', 'pandas._libs.missing', 'pandas._libs.tslibs', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.fields', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.ops_dispatch', 'pandas._libs.algos', 'pandas._libs.lib', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.construction', 'pandas.core.common', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.arrays.masked', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.arrays._mixins', 'pandas.core.array_algos.transforms', 'pandas.core.base', 'pandas.core.strings', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.floating', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.indexes.frozen', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.flags', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas._libs.reduction', 'pandas.core.aggregation', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.times', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.frame', 'pandas.core.generic', 'gc', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.concat', 'pandas.core.internals.managers', 'pandas.core.internals.ops', 'pandas.core.shared_docs', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.groupby.base', 'pandas.core.window.expanding', 'pandas.io.formats.format', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.io.common', 'gzip', 'pandas.core.internals.construction', 'pandas.core.reshape.melt', 'pandas.core.reshape.util', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.io.formats.info', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.ops', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._odswriter', 'pandas._libs.json', 'pandas.io.formats.excel', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'cmath', 'pandas._version', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.animation', 'matplotlib._animation_data', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 03:16:38,587 DEBUG matplotlib Thread-1 : CACHEDIR=C:\Users\mihir\.matplotlib
2021-04-09 03:16:38,591 DEBUG matplotlib.font_manager Thread-1 : Using fontManager instance from C:\Users\mihir\.matplotlib\fontlist-v330.json
2021-04-09 03:16:38,774 DEBUG matplotlib.pyplot Thread-1 : Loaded backend tkagg version unknown.
2021-04-09 03:16:38,775 DEBUG matplotlib.pyplot Thread-1 : Loaded backend TkAgg version unknown.
2021-04-09 03:17:42,660 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 03:17:42] "[37mOPTIONS /compare_tenant HTTP/1.1[0m" 200 -
2021-04-09 03:17:42,662 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 03:17:42] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 03:17:42,668 INFO werkzeug Thread-5 : 127.0.0.1 - - [09/Apr/2021 03:17:42] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 03:17:42,670 INFO werkzeug Thread-6 : 127.0.0.1 - - [09/Apr/2021 03:17:42] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 03:17:42,926 DEBUG matplotlib.pyplot Thread-7 : Loaded backend agg version unknown.
2021-04-09 03:17:42,955 DEBUG matplotlib.font_manager Thread-7 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-04-09 03:17:42,955 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,955 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,955 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,955 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,955 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,955 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,955 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,955 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,955 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,955 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 03:17:42,956 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,956 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 03:17:42,956 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,956 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,956 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,956 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,956 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,956 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,956 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 03:17:42,956 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 03:17:42,956 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 03:17:42,956 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,956 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,956 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 03:17:42,957 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,957 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,957 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,957 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,957 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,957 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,957 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,957 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,957 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,957 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,957 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,957 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,957 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,957 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,957 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 03:17:42,958 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,958 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,958 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 03:17:42,958 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:17:42,958 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,958 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,958 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,958 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,958 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,958 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,958 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,958 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,958 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,958 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,958 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,958 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,959 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 03:17:42,959 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,959 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,959 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,959 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,959 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 03:17:42,959 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,959 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,959 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 03:17:42,959 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,959 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,959 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,959 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 03:17:42,959 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,959 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 03:17:42,960 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,960 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,960 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 03:17:42,960 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,960 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:17:42,960 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,960 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,960 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 03:17:42,960 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,960 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,960 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,960 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,960 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,960 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,960 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 03:17:42,961 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,961 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,961 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,961 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,961 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:17:42,961 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,961 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,961 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,961 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,961 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,961 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 03:17:42,961 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,961 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,961 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,961 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,961 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,962 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,962 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:17:42,962 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:17:42,962 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,962 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:17:42,962 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:17:42,962 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,962 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,962 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,962 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,962 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,962 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,962 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,962 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,962 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,962 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:17:42,963 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,963 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,963 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,963 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,963 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,963 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,963 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 03:17:42,963 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,963 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,963 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,963 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,963 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,963 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 03:17:42,963 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,963 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,963 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,963 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:17:42,964 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,964 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 03:17:42,964 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,964 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,964 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,964 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,964 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,964 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 03:17:42,964 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,964 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:17:42,964 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,964 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,964 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,964 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,965 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 03:17:42,965 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,965 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 03:17:42,965 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,965 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:17:42,965 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,965 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,965 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:17:42,965 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,965 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,965 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,965 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,965 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:17:42,965 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,965 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,966 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:17:42,966 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,966 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:17:42,966 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,966 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,966 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:17:42,966 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,966 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,966 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,966 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,966 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,966 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,966 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,966 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,966 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,966 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,967 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:17:42,967 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:17:42,967 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,967 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,967 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,967 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,967 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,967 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,967 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,967 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:17:42,967 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,967 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,967 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,968 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,968 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:17:42,968 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,968 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,968 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:17:42,968 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,968 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,968 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,968 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,968 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,968 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,969 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,969 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 03:17:42,969 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,969 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,969 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,969 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,969 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,969 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,969 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,969 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,969 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,970 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,970 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,970 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,970 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,970 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,970 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,970 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 03:17:42,970 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,970 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,970 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,970 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,970 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,970 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:17:42,970 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,971 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,971 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,971 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,971 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,971 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:17:42,971 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,971 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,971 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,971 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,971 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,971 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,971 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,971 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,971 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 03:17:42,971 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,971 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 03:17:42,972 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:17:42,972 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:17:42,972 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,972 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:17:42,972 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,972 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,972 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,972 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,972 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,972 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:17:42,972 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,972 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,972 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,972 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,972 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,973 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,973 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,973 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,973 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,973 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,973 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,973 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,973 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,973 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,973 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,973 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,973 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,973 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,973 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,973 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:17:42,973 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,974 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,974 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,974 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,974 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:17:42,974 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,974 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,974 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,974 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,974 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,974 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,974 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:17:42,974 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,974 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,974 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,974 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,974 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,975 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:17:42,975 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,975 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,975 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:17:42,975 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:17:42,975 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,975 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,975 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,975 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,975 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,975 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,975 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,975 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,975 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:17:42,975 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,975 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,975 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,976 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,976 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,976 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,976 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,976 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,976 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,976 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,976 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 03:17:42,976 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,976 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:17:42,976 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,976 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,976 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,976 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,976 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,976 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,977 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,977 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,977 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,977 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:17:42,977 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,977 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,977 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,977 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 03:17:42,977 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,977 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,977 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,977 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,977 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 03:17:42,977 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,977 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,978 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:17:42,978 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:17:42,978 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:17:42,978 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:17:42,978 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 03:17:42,978 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,978 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,978 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,978 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,978 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,978 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:17:42,978 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,978 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,978 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,978 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,978 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,979 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,979 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:17:42,979 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,979 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,979 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,979 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,979 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,979 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 03:17:42,979 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,979 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,979 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 03:17:42,979 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 03:17:42,979 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,979 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,979 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,979 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,980 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 03:17:42,980 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:17:42,980 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,980 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,980 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:17:42,980 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,980 DEBUG matplotlib.font_manager Thread-7 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 03:17:42,985 DEBUG matplotlib.font_manager Thread-7 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-04-09 03:17:42,985 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,985 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,985 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,985 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,985 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,985 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,985 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,985 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,985 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,985 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-04-09 03:17:42,985 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,985 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-04-09 03:17:42,985 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,986 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,986 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,986 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,986 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,986 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,986 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-04-09 03:17:42,986 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-04-09 03:17:42,986 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-04-09 03:17:42,986 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,986 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,986 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-04-09 03:17:42,986 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,986 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,986 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,986 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,987 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,987 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,987 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,987 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,987 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,987 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,987 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,987 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,987 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,987 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,987 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2021-04-09 03:17:42,987 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,987 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,987 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-04-09 03:17:42,987 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:17:42,987 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,988 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,988 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,988 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,988 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,988 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,988 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,988 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,988 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,988 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,988 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,988 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,988 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-04-09 03:17:42,988 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,988 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,988 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,988 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,989 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-04-09 03:17:42,989 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,989 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,989 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2021-04-09 03:17:42,989 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,989 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,989 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,989 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-04-09 03:17:42,989 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,989 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-04-09 03:17:42,989 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,989 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,989 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2021-04-09 03:17:42,990 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,990 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:17:42,990 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,990 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,990 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-04-09 03:17:42,990 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,990 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,990 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,990 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,990 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,990 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,990 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-04-09 03:17:42,990 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,991 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,991 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,991 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,991 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:17:42,991 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,991 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,991 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,991 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,991 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,991 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2021-04-09 03:17:42,991 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,991 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,991 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,991 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,991 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,991 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,992 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:17:42,992 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:17:42,992 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,992 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:17:42,992 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:17:42,992 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,992 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,992 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,992 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,992 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,992 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,992 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,992 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,992 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,992 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2021-04-09 03:17:42,992 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,993 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,993 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,993 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,993 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,993 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,993 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2021-04-09 03:17:42,993 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,993 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,993 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,993 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,993 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,993 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2021-04-09 03:17:42,993 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,993 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,993 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,993 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:17:42,994 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,994 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-04-09 03:17:42,994 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,994 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,994 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,994 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,994 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,994 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2021-04-09 03:17:42,994 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,994 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:17:42,994 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,994 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,994 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,994 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,994 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-04-09 03:17:42,994 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,995 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-04-09 03:17:42,995 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,995 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:17:42,995 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,995 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,995 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:17:42,995 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,995 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,995 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,995 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,995 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:17:42,995 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,995 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,995 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:17:42,995 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,995 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:17:42,996 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,996 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,996 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:17:42,996 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,996 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,996 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,996 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,996 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,996 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,996 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,996 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,996 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,996 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,996 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:17:42,996 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:17:42,996 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,997 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,997 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,997 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,997 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,997 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,997 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,997 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:17:42,997 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,997 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,997 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,997 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,997 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:17:42,997 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,997 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,998 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:17:42,998 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,998 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,998 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,998 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,998 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,998 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,998 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,998 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-04-09 03:17:42,998 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,998 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,998 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,998 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,998 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,998 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,998 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,998 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,999 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,999 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:42,999 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,999 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:42,999 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,999 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,999 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,999 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2021-04-09 03:17:42,999 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,999 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,999 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,999 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,999 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:42,999 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:17:42,999 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:42,999 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,000 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,000 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:43,000 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:17:43,000 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2021-04-09 03:17:43,000 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,000 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:43,000 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:17:43,000 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,000 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:43,000 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,000 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,000 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:43,000 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-04-09 03:17:43,001 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,001 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-04-09 03:17:43,001 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:17:43,001 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:17:43,001 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:43,001 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:17:43,001 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:43,001 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:17:43,001 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,001 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,001 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:43,001 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:17:43,001 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,001 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:17:43,001 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:43,001 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,002 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:43,002 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,002 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,002 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,002 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:43,002 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,002 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:43,002 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:17:43,002 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:43,002 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,002 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-04-09 03:17:43,002 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,002 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,002 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,002 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,003 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:17:43,003 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:43,003 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,003 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,003 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,003 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:17:43,003 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:43,003 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:43,003 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,003 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,003 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:43,003 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,003 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:17:43,003 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:43,003 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:43,003 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:43,004 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:43,004 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,004 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:17:43,004 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,004 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,004 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:17:43,004 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2021-04-09 03:17:43,004 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:43,004 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:43,004 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,004 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:43,004 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,004 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:43,004 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:43,004 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,005 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2021-04-09 03:17:43,005 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,005 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:43,005 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:43,005 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,005 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,005 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,005 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,005 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,005 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,005 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,005 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2021-04-09 03:17:43,005 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,005 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-04-09 03:17:43,005 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,005 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,006 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,006 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,006 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,006 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,006 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,006 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:43,006 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-04-09 03:17:43,006 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:17:43,006 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,006 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,006 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,006 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2021-04-09 03:17:43,006 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,006 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,006 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:43,006 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,007 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-04-09 03:17:43,007 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,007 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:43,007 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:17:43,007 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2021-04-09 03:17:43,007 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2021-04-09 03:17:43,007 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2021-04-09 03:17:43,007 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-04-09 03:17:43,007 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:43,007 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,007 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2021-04-09 03:17:43,007 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2021-04-09 03:17:43,007 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:43,007 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-04-09 03:17:43,007 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:43,007 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,008 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,008 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,008 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,008 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,008 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-04-09 03:17:43,008 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,008 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-04-09 03:17:43,008 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,008 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:43,008 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,008 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2021-04-09 03:17:43,008 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,008 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2021-04-09 03:17:43,008 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2021-04-09 03:17:43,008 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-04-09 03:17:43,008 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,009 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,009 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,009 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-04-09 03:17:43,009 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-04-09 03:17:43,009 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:17:43,009 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-04-09 03:17:43,009 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,009 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-04-09 03:17:43,009 DEBUG matplotlib.font_manager Thread-7 : findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-04-09 03:17:43,009 DEBUG matplotlib.font_manager Thread-7 : findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\mihir\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.7_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python37\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-04-09 03:17:43,214 DEBUG matplotlib.pyplot Thread-7 : Loaded backend agg version unknown.
2021-04-09 03:17:43,512 DEBUG matplotlib.pyplot Thread-7 : Loaded backend agg version unknown.
2021-04-09 03:17:43,785 DEBUG matplotlib.pyplot Thread-7 : Loaded backend agg version unknown.
2021-04-09 03:17:44,035 INFO werkzeug Thread-7 : 127.0.0.1 - - [09/Apr/2021 03:17:44] "[37mPOST /compare_tenant HTTP/1.1[0m" 200 -
2021-04-09 03:17:47,564 INFO werkzeug Thread-8 : 127.0.0.1 - - [09/Apr/2021 03:17:47] "[37mOPTIONS /login HTTP/1.1[0m" 200 -
2021-04-09 03:17:50,996 INFO logger Thread-9 : MihirChhiber is attemping to log in
2021-04-09 03:17:50,997 INFO werkzeug Thread-9 : 127.0.0.1 - - [09/Apr/2021 03:17:50] "[37mPOST /login HTTP/1.1[0m" 200 -
2021-04-09 03:17:52,125 INFO logger Thread-10 : MihirChhiber is attemping to log in
2021-04-09 03:17:52,130 INFO werkzeug Thread-10 : 127.0.0.1 - - [09/Apr/2021 03:17:52] "[37mPOST /login HTTP/1.1[0m" 200 -
2021-04-09 03:17:53,948 INFO werkzeug Thread-11 : 127.0.0.1 - - [09/Apr/2021 03:17:53] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 03:17:59,320 INFO werkzeug Thread-12 : 127.0.0.1 - - [09/Apr/2021 03:17:59] "[37mGET /staff_get_photo_notification HTTP/1.1[0m" 200 -
2021-04-09 03:18:02,124 INFO werkzeug Thread-13 : 127.0.0.1 - - [09/Apr/2021 03:18:02] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 03:18:02,127 INFO werkzeug Thread-14 : 127.0.0.1 - - [09/Apr/2021 03:18:02] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 03:18:04,694 INFO werkzeug Thread-15 : 127.0.0.1 - - [09/Apr/2021 03:18:04] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 03:18:05,002 INFO werkzeug Thread-16 : 127.0.0.1 - - [09/Apr/2021 03:18:05] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 03:18:08,807 INFO werkzeug Thread-17 : 127.0.0.1 - - [09/Apr/2021 03:18:08] "[37mGET /tenant_list_FB HTTP/1.1[0m" 200 -
2021-04-09 03:18:12,055 INFO werkzeug Thread-18 : 127.0.0.1 - - [09/Apr/2021 03:18:12] "[37mGET /tenant_list_non_FB HTTP/1.1[0m" 200 -
2021-04-09 03:18:17,494 INFO werkzeug Thread-19 : 127.0.0.1 - - [09/Apr/2021 03:18:17] "[37mGET /if_loggedin HTTP/1.1[0m" 200 -
2021-04-09 03:18:17,495 INFO werkzeug Thread-20 : 127.0.0.1 - - [09/Apr/2021 03:18:17] "[37mOPTIONS /compare_tenant HTTP/1.1[0m" 200 -
2021-04-09 03:18:17,499 INFO werkzeug Thread-21 : 127.0.0.1 - - [09/Apr/2021 03:18:17] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 03:18:17,500 INFO werkzeug Thread-22 : 127.0.0.1 - - [09/Apr/2021 03:18:17] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 03:18:17,780 DEBUG matplotlib.pyplot Thread-23 : Loaded backend agg version unknown.
2021-04-09 03:18:18,012 DEBUG matplotlib.pyplot Thread-23 : Loaded backend agg version unknown.
2021-04-09 03:18:18,265 DEBUG matplotlib.pyplot Thread-23 : Loaded backend agg version unknown.
2021-04-09 03:18:18,493 DEBUG matplotlib.pyplot Thread-23 : Loaded backend agg version unknown.
2021-04-09 03:18:18,767 INFO werkzeug Thread-23 : 127.0.0.1 - - [09/Apr/2021 03:18:18] "[37mPOST /compare_tenant HTTP/1.1[0m" 200 -
2021-04-09 03:18:32,604 INFO werkzeug Thread-24 : 127.0.0.1 - - [09/Apr/2021 03:18:32] "[37mOPTIONS /report_compare_tenant HTTP/1.1[0m" 200 -
2021-04-09 03:18:32,930 DEBUG matplotlib.pyplot Thread-25 : Loaded backend agg version unknown.
2021-04-09 03:18:33,153 DEBUG matplotlib.pyplot Thread-25 : Loaded backend agg version unknown.
2021-04-09 03:18:33,371 DEBUG matplotlib.pyplot Thread-25 : Loaded backend agg version unknown.
2021-04-09 03:18:33,591 DEBUG matplotlib.pyplot Thread-25 : Loaded backend agg version unknown.
2021-04-09 03:18:43,659 INFO werkzeug Thread-25 : 127.0.0.1 - - [09/Apr/2021 03:18:43] "[37mPOST /report_compare_tenant HTTP/1.1[0m" 200 -
2021-04-09 03:22:28,286 INFO werkzeug MainThread :  * Detected change in 'C:\\Users\\mihir\\OneDrive\\Documents\\GitHub\\escapp\\backend\\app\\__init__.py', reloading
2021-04-09 03:22:28,722 INFO werkzeug MainThread :  * Restarting with stat
2021-04-09 03:25:47,997 INFO werkzeug MainThread :  * Restarting with stat
2021-04-09 03:25:49,581 INFO logger Thread-1 : backend started
2021-04-09 05:17:54,203 INFO logger MainThread : backend started
2021-04-09 05:17:54,803 DEBUG matplotlib MainThread : (private) matplotlib data path: /Users/yingjieqiao/escapp/lib/python3.8/site-packages/matplotlib/mpl-data
2021-04-09 05:17:54,803 DEBUG matplotlib MainThread : matplotlib data path: /Users/yingjieqiao/escapp/lib/python3.8/site-packages/matplotlib/mpl-data
2021-04-09 05:17:54,807 DEBUG matplotlib MainThread : CONFIGDIR=/Users/yingjieqiao/.matplotlib
2021-04-09 05:17:54,809 DEBUG matplotlib MainThread : matplotlib version 3.3.4
2021-04-09 05:17:54,809 DEBUG matplotlib MainThread : interactive is False
2021-04-09 05:17:54,810 DEBUG matplotlib MainThread : platform is darwin
2021-04-09 05:17:54,810 DEBUG matplotlib MainThread : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'posix', '_thread', '_weakref', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', 'genericpath', 'posixpath', 'os.path', '_collections_abc', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'mpl_toolkits', 'site', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_string', 'string', 'collections.abc', 'markupsafe._compat', 'markupsafe._speedups', 'markupsafe', 'errno', 'fnmatch', 'zlib', '_compression', '_weakrefset', 'threading', '_bz2', 'bz2', '_lzma', 'lzma', 'pwd', 'grp', 'shutil', 'math', '_bisect', 'bisect', '_sha512', '_random', 'random', 'weakref', 'tempfile', '_hashlib', '_blake2', '_sha3', 'hashlib', '_struct', 'struct', '_compat_pickle', '_pickle', 'pickle', 'urllib', 'urllib.parse', 'jinja2._compat', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'jinja2.utils', 'jinja2.bccache', 'jinja2.nodes', 'jinja2.exceptions', 'jinja2.visitor', 'jinja2.idtracking', 'jinja2.optimizer', '__future__', 'jinja2.compiler', 'jinja2.runtime', 'jinja2.filters', 'numbers', '_decimal', 'decimal', 'jinja2.tests', 'jinja2.defaults', '_ast', 'ast', 'unicodedata', 'jinja2._identifier', 'jinja2.lexer', 'jinja2.parser', 'jinja2.environment', 'jinja2.loaders', 'jinja2', 'signal', '_socket', 'select', 'selectors', 'socket', '_datetime', 'datetime', 'werkzeug._compat', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traceback', 'atexit', 'logging', 'werkzeug._internal', 'pkgutil', 'html.entities', 'html', 'werkzeug.utils', 'werkzeug.exceptions', 'werkzeug.urls', 'socketserver', 'http', 'copy', 'email', 'locale', 'calendar', 'email._parseaddr', 'binascii', 'base64', 'email.base64mime', 'email.quoprimime', 'email.errors', 'quopri', 'email.encoders', 'email.charset', 'email.utils', 'email.header', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', '_ssl', 'ssl', 'http.client', 'mimetypes', 'http.server', 'click._compat', 'click._unicodefun', 'click.globals', 'click.utils', 'click.exceptions', 'click.parser', 'click.types', 'click.termui', 'click.formatting', 'click.core', 'click.decorators', 'click', 'werkzeug.serving', 'werkzeug.filesystem', 'urllib.response', 'urllib.error', '_scproxy', 'urllib.request', 'werkzeug.http', 'werkzeug.datastructures', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wsgi', 'werkzeug.formparser', 'werkzeug.wrappers.base_request', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.cors', 'werkzeug.useragents', 'werkzeug.wrappers.user_agent', 'werkzeug.wrappers.request', 'werkzeug.wrappers.response', 'werkzeug.wrappers', 'http.cookiejar', 'werkzeug.test', 'werkzeug', 'platform', '_posixsubprocess', 'subprocess', '_uuid', 'uuid', 'itsdangerous._json', 'hmac', 'itsdangerous._compat', 'itsdangerous.exc', 'itsdangerous.encoding', 'itsdangerous.signer', 'itsdangerous.serializer', 'itsdangerous.jws', 'itsdangerous.timed', 'itsdangerous.url_safe', 'itsdangerous', 'flask._compat', 'werkzeug.local', 'flask.globals', 'dataclasses', 'flask.json', 'difflib', 'pprint', 'werkzeug.routing', 'blinker._saferef', 'blinker._utilities', 'blinker.base', 'blinker', 'flask.signals', 'flask.helpers', 'typing.io', 'typing.re', 'typing', 'dotenv.compat', 'dotenv.parser', 'dotenv.main', 'dotenv', 'flask.cli', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.json.tag', 'flask.sessions', 'flask.templating', 'werkzeug.wrappers.json', 'flask.wrappers', 'flask.app', 'flask.blueprints', 'flask', 'zipfile', 'xml', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'textwrap', 'ntpath', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources.extern.six', 'pkg_resources._vendor.six', 'pkg_resources.extern.six.moves', 'pkg_resources._vendor.six.moves', 'pkg_resources.py31compat', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'sysconfig', '_osx_support', '_sysconfigdata__darwin_darwin', 'pkg_resources', 'wsgi', 'flask_session.sessions', 'flask_session', 'six', 'flask_cors.core', 'flask_cors.decorator', 'flask_cors.extension', 'flask_cors.version', 'flask_cors', 'werkzeug.security', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'bcrypt', 'flask_bcrypt', 'bson.py3compat', 'bson.binary', 'bson.code', 'bson.codec_options', 'bson.son', 'bson.dbref', 'bson.decimal128', 'bson.errors', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.tz_util', 'bson.objectid', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson', 'bson.raw_bson', 'pymongo.errors', 'pymongo.auth_aws', 'stringprep', 'pymongo.saslprep', 'pymongo.auth', 'pymongo.helpers', 'pymongo.monitoring', 'pymongo.compression_support', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.server_type', 'pymongo.max_staleness_selectors', 'pymongo.server_selectors', 'pymongo.read_preferences', 'ipaddress', 'pymongo.ssl_context', 'pathlib', 'importlib.resources', 'certifi.core', 'certifi', 'pymongo.ssl_support', 'pymongo.write_concern', 'pymongo.common', 'pymongo._cmessage', 'pymongo.message', 'pymongo.collation', 'pymongo.aggregation', 'pymongo.monotonic', 'pymongo.client_session', 'pymongo.bulk', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.collection', 'pymongo.son_manipulator', 'pymongo.database', 'pymongo.periodic_executor', 'dns.version', 'dns', 'dns.exception', 'dns.flags', 'dns.ipv4', 'dns.ipv6', 'dns.inet', 'encodings.idna', 'idna.package_data', 'idna.idnadata', 'idna.intranges', 'idna.core', 'idna', '_contextvars', 'contextvars', 'dns._immutable_ctx', 'dns.immutable', 'dns.name', 'dns.wire', 'dns.enum', 'dns.rdataclass', 'dns.rdatatype', 'dns.ttl', 'dns.tokenizer', 'dns.rdata', 'dns.edns', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.set', 'dns.rdataset', 'dns.tsig', 'dns.renderer', 'dns.rrset', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.message', 'dns.serial', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'dns.zone', 'dns.xfr', 'dns.query', 'dns.reversename', 'dns.resolver', 'pymongo.srv_resolver', 'pymongo.uri_parser', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.socket_checker', 'pymongo.network', 'pymongo.ssl_match_hostname', 'fcntl', 'pymongo.pool', 'pymongo.client_options', 'pymongo.cursor_manager', '_queue', 'queue', 'pymongo.server_description', 'pymongo.topology_description', 'pymongo.monitor', 'pymongo.response', 'pymongo.server', 'pymongo.topology', 'pymongo.settings', 'pymongo.mongo_client', 'pymongo.mongo_replica_set_client', 'pymongo', 'mongoengine.connection', 'mongoengine.signals', 'mongoengine.errors', 'mongoengine.base.common', 'mongoengine.common', 'mongoengine.base.datastructures', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.document', 'mongoengine.queryset.field_list', 'mongoengine.pymongo_support', 'mongoengine.context_managers', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.queryset.base', 'mongoengine.queryset.queryset', 'mongoengine.queryset.manager', 'mongoengine.queryset', 'mongoengine.base.metaclasses', 'mongoengine.base', 'mongoengine.document', 'gridfs.errors', 'gridfs.grid_file', 'gridfs', 'dateutil._version', 'dateutil', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', 'mongoengine.base.utils', 'PIL._version', 'PIL', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'PIL.ImageOps', 'mongoengine.fields', 'mongoengine', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf.base', 'email_validator', 'wtforms.compat', 'wtforms.validators', 'wtforms.widgets.core', 'wtforms.widgets', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.core', 'wtforms.fields.simple', 'wtforms.fields', 'wtforms.meta', 'wtforms.form', 'wtforms', 'gettext', 'flask_mongoengine.wtf.fields', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.csrf', 'flask_wtf.form', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha', 'flask_wtf', 'flask_mongoengine.wtf.models', 'flask_mongoengine.wtf.orm', 'flask_mongoengine.wtf', 'flask_mongoengine', 'app.models', 'app.config', 'app', 'cachelib._compat', 'cachelib.base', 'cachelib.simple', 'cachelib.file', 'cachelib.memcached', 'cachelib.redis', 'cachelib.uwsgi', 'cachelib', 'app.apis', 'botocore', 'shlex', 'botocore.vendored', 'botocore.vendored.six', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests', 'botocore.exceptions', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3.exceptions', 'urllib3._version', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.connection', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.ssl_', 'urllib3.util.timeout', 'urllib3.util', 'urllib3.util.proxy', 'urllib3._collections', 'urllib3.connection', 'urllib3.fields', 'urllib3.filepost', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.request', 'urllib3.response', 'urllib3.util.queue', 'urllib3.connectionpool', 'urllib3.poolmanager', 'urllib3', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.compat', 'botocore.configloader', 'termios', 'getpass', 'cgi', 'botocore.vendored.six.moves.urllib_parse', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.utils', 'botocore.awsrequest', 'botocore.hooks', 'botocore.history', 'botocore.eventstream', 'botocore.parsers', 'botocore.response', 'botocore.endpoint', 'botocore.config', 'botocore.credentials', 'jmespath.compat', 'jmespath.exceptions', 'jmespath.lexer', 'jmespath.ast', 'jmespath.functions', 'jmespath.visitor', 'jmespath.parser', 'jmespath', 'botocore.docs.utils', 'botocore.docs.shape', 'botocore.docs.params', 'botocore.docs.example', 'botocore.docs.method', 'botocore.docs.sharedexample', 'botocore.docs.client', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', '_markupbase', 'html.parser', 'botocore.docs.bcdoc.docstringparser', 'botocore.docs.bcdoc.style', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.service', 'botocore.docs', 'botocore.docs.docstring', 'botocore.waiter', 'botocore.validate', 'botocore.serialize', 'botocore.auth', 'botocore.signers', 'botocore.args', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.quota', 'botocore.retries.base', 'botocore.retries.special', 'botocore.retries.standard', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.retries.adaptive', 'botocore.client', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.retryhandler', 'botocore.translate', 'botocore.handlers', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'botocore.session', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs.client', 'boto3.docs.base', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.action', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.resource', 'boto3.docs.service', 'boto3.docs', 'boto3.docs.docstring', 'boto3.resources.action', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.resources.factory', 'boto3.session', 'boto3.compat', 'boto3', '_csv', 'csv', 'app.apis.utils', 'app.apis.s3_methods', 'app.apis.notif_methods', 'email.mime', 'email._header_value_parser', 'email.headerregistry', 'email.contentmanager', 'email.policy', 'email.mime.base', 'email.mime.multipart', 'email.mime.nonmultipart', 'email.mime.text', 'email.generator', 'smtplib', 'app.apis.email_methods', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', '_ctypes', 'ctypes._endian', 'ctypes', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'cython_runtime', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas.compat', 'distutils', 'distutils.version', 'pandas.compat.numpy', '_cython_0_29_21', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.dtypes.missing', 'pandas.util._decorators', 'pandas.core.util', 'pandas._libs.hashing', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas._libs.ops', 'pandas.core.ops.roperator', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.sorting', 'pandas.core.arrays.base', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.floating', 'pandas.core.arrays.integer', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'gc', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'gzip', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.generic', 'pandas.core.internals.construction', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.engines', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.api', 'pandas.util._tester', 'cmath', 'pandas._libs.testing', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'matplotlib', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'matplotlib._animation_data', 'matplotlib.animation', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 05:17:54,887 DEBUG matplotlib MainThread : CACHEDIR=/Users/yingjieqiao/.matplotlib
2021-04-09 05:17:54,890 DEBUG matplotlib.font_manager MainThread : Using fontManager instance from /Users/yingjieqiao/.matplotlib/fontlist-v330.json
2021-04-09 05:17:55,059 DEBUG matplotlib.pyplot MainThread : Loaded backend macosx version unknown.
2021-04-09 05:17:55,059 DEBUG matplotlib.pyplot MainThread : Loaded backend MacOSX version unknown.
2021-04-09 05:17:55,189 INFO werkzeug MainThread :  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
2021-04-09 05:18:08,529 INFO werkzeug Thread-1 : 127.0.0.1 - - [09/Apr/2021 05:18:08] "[37mOPTIONS /login HTTP/1.1[0m" 200 -
2021-04-09 05:18:10,885 INFO logger Thread-2 : YingjieQiao is attemping to log in
2021-04-09 05:18:10,889 INFO werkzeug Thread-2 : 127.0.0.1 - - [09/Apr/2021 05:18:10] "[37mPOST /login HTTP/1.1[0m" 200 -
2021-04-09 05:18:21,472 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 05:18:21] "[37mOPTIONS /login_verified HTTP/1.1[0m" 200 -
2021-04-09 05:18:21,475 ERROR logger Thread-4 : argument of type 'NoneType' is not iterable 2FA error
2021-04-09 05:18:21,478 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 05:18:21] "[35m[1mPOST /login_verified HTTP/1.1[0m" 500 -
2021-04-09 05:19:39,477 INFO werkzeug Thread-5 : 127.0.0.1 - - [09/Apr/2021 05:19:39] "[37mOPTIONS /login HTTP/1.1[0m" 200 -
2021-04-09 05:19:41,855 INFO logger Thread-6 : YingjieQiao is attemping to log in
2021-04-09 05:19:41,862 INFO werkzeug Thread-6 : 127.0.0.1 - - [09/Apr/2021 05:19:41] "[37mPOST /login HTTP/1.1[0m" 200 -
2021-04-09 05:19:52,482 INFO werkzeug Thread-7 : 127.0.0.1 - - [09/Apr/2021 05:19:52] "[37mOPTIONS /login_verified HTTP/1.1[0m" 200 -
2021-04-09 05:19:52,486 ERROR logger Thread-8 : argument of type 'NoneType' is not iterable 2FA error
2021-04-09 05:19:52,488 INFO werkzeug Thread-8 : 127.0.0.1 - - [09/Apr/2021 05:19:52] "[35m[1mPOST /login_verified HTTP/1.1[0m" 500 -
2021-04-09 05:23:06,791 INFO logger MainThread : backend started
2021-04-09 05:23:07,245 DEBUG matplotlib MainThread : (private) matplotlib data path: /Users/yingjieqiao/escapp/lib/python3.8/site-packages/matplotlib/mpl-data
2021-04-09 05:23:07,245 DEBUG matplotlib MainThread : matplotlib data path: /Users/yingjieqiao/escapp/lib/python3.8/site-packages/matplotlib/mpl-data
2021-04-09 05:23:07,248 DEBUG matplotlib MainThread : CONFIGDIR=/Users/yingjieqiao/.matplotlib
2021-04-09 05:23:07,250 DEBUG matplotlib MainThread : matplotlib version 3.3.4
2021-04-09 05:23:07,250 DEBUG matplotlib MainThread : interactive is False
2021-04-09 05:23:07,251 DEBUG matplotlib MainThread : platform is darwin
2021-04-09 05:23:07,251 DEBUG matplotlib MainThread : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'posix', '_thread', '_weakref', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', 'genericpath', 'posixpath', 'os.path', '_collections_abc', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'mpl_toolkits', 'site', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_string', 'string', 'collections.abc', 'markupsafe._compat', 'markupsafe._speedups', 'markupsafe', 'errno', 'fnmatch', 'zlib', '_compression', '_weakrefset', 'threading', '_bz2', 'bz2', '_lzma', 'lzma', 'pwd', 'grp', 'shutil', 'math', '_bisect', 'bisect', '_sha512', '_random', 'random', 'weakref', 'tempfile', '_hashlib', '_blake2', '_sha3', 'hashlib', '_struct', 'struct', '_compat_pickle', '_pickle', 'pickle', 'urllib', 'urllib.parse', 'jinja2._compat', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'jinja2.utils', 'jinja2.bccache', 'jinja2.nodes', 'jinja2.exceptions', 'jinja2.visitor', 'jinja2.idtracking', 'jinja2.optimizer', '__future__', 'jinja2.compiler', 'jinja2.runtime', 'jinja2.filters', 'numbers', '_decimal', 'decimal', 'jinja2.tests', 'jinja2.defaults', '_ast', 'ast', 'unicodedata', 'jinja2._identifier', 'jinja2.lexer', 'jinja2.parser', 'jinja2.environment', 'jinja2.loaders', 'jinja2', 'signal', '_socket', 'select', 'selectors', 'socket', '_datetime', 'datetime', 'werkzeug._compat', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traceback', 'atexit', 'logging', 'werkzeug._internal', 'pkgutil', 'html.entities', 'html', 'werkzeug.utils', 'werkzeug.exceptions', 'werkzeug.urls', 'socketserver', 'http', 'copy', 'email', 'locale', 'calendar', 'email._parseaddr', 'binascii', 'base64', 'email.base64mime', 'email.quoprimime', 'email.errors', 'quopri', 'email.encoders', 'email.charset', 'email.utils', 'email.header', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', '_ssl', 'ssl', 'http.client', 'mimetypes', 'http.server', 'click._compat', 'click._unicodefun', 'click.globals', 'click.utils', 'click.exceptions', 'click.parser', 'click.types', 'click.termui', 'click.formatting', 'click.core', 'click.decorators', 'click', 'werkzeug.serving', 'werkzeug.filesystem', 'urllib.response', 'urllib.error', '_scproxy', 'urllib.request', 'werkzeug.http', 'werkzeug.datastructures', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wsgi', 'werkzeug.formparser', 'werkzeug.wrappers.base_request', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.cors', 'werkzeug.useragents', 'werkzeug.wrappers.user_agent', 'werkzeug.wrappers.request', 'werkzeug.wrappers.response', 'werkzeug.wrappers', 'http.cookiejar', 'werkzeug.test', 'werkzeug', 'platform', '_posixsubprocess', 'subprocess', '_uuid', 'uuid', 'itsdangerous._json', 'hmac', 'itsdangerous._compat', 'itsdangerous.exc', 'itsdangerous.encoding', 'itsdangerous.signer', 'itsdangerous.serializer', 'itsdangerous.jws', 'itsdangerous.timed', 'itsdangerous.url_safe', 'itsdangerous', 'flask._compat', 'werkzeug.local', 'flask.globals', 'dataclasses', 'flask.json', 'difflib', 'pprint', 'werkzeug.routing', 'blinker._saferef', 'blinker._utilities', 'blinker.base', 'blinker', 'flask.signals', 'flask.helpers', 'typing.io', 'typing.re', 'typing', 'dotenv.compat', 'dotenv.parser', 'dotenv.main', 'dotenv', 'flask.cli', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.json.tag', 'flask.sessions', 'flask.templating', 'werkzeug.wrappers.json', 'flask.wrappers', 'flask.app', 'flask.blueprints', 'flask', 'zipfile', 'xml', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'textwrap', 'ntpath', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources.extern.six', 'pkg_resources._vendor.six', 'pkg_resources.extern.six.moves', 'pkg_resources._vendor.six.moves', 'pkg_resources.py31compat', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.six.moves.urllib', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'sysconfig', '_osx_support', '_sysconfigdata__darwin_darwin', 'pkg_resources', 'wsgi', 'flask_session.sessions', 'flask_session', 'six', 'flask_cors.core', 'flask_cors.decorator', 'flask_cors.extension', 'flask_cors.version', 'flask_cors', 'werkzeug.security', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'bcrypt', 'flask_bcrypt', 'bson.py3compat', 'bson.binary', 'bson.code', 'bson.codec_options', 'bson.son', 'bson.dbref', 'bson.decimal128', 'bson.errors', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.tz_util', 'bson.objectid', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson', 'bson.raw_bson', 'pymongo.errors', 'pymongo.auth_aws', 'stringprep', 'pymongo.saslprep', 'pymongo.auth', 'pymongo.helpers', 'pymongo.monitoring', 'pymongo.compression_support', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.server_type', 'pymongo.max_staleness_selectors', 'pymongo.server_selectors', 'pymongo.read_preferences', 'ipaddress', 'pymongo.ssl_context', 'pathlib', 'importlib.resources', 'certifi.core', 'certifi', 'pymongo.ssl_support', 'pymongo.write_concern', 'pymongo.common', 'pymongo._cmessage', 'pymongo.message', 'pymongo.collation', 'pymongo.aggregation', 'pymongo.monotonic', 'pymongo.client_session', 'pymongo.bulk', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.collection', 'pymongo.son_manipulator', 'pymongo.database', 'pymongo.periodic_executor', 'dns.version', 'dns', 'dns.exception', 'dns.flags', 'dns.ipv4', 'dns.ipv6', 'dns.inet', 'encodings.idna', 'idna.package_data', 'idna.idnadata', 'idna.intranges', 'idna.core', 'idna', '_contextvars', 'contextvars', 'dns._immutable_ctx', 'dns.immutable', 'dns.name', 'dns.wire', 'dns.enum', 'dns.rdataclass', 'dns.rdatatype', 'dns.ttl', 'dns.tokenizer', 'dns.rdata', 'dns.edns', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.set', 'dns.rdataset', 'dns.tsig', 'dns.renderer', 'dns.rrset', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.message', 'dns.serial', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'dns.zone', 'dns.xfr', 'dns.query', 'dns.reversename', 'dns.resolver', 'pymongo.srv_resolver', 'pymongo.uri_parser', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.socket_checker', 'pymongo.network', 'pymongo.ssl_match_hostname', 'fcntl', 'pymongo.pool', 'pymongo.client_options', 'pymongo.cursor_manager', '_queue', 'queue', 'pymongo.server_description', 'pymongo.topology_description', 'pymongo.monitor', 'pymongo.response', 'pymongo.server', 'pymongo.topology', 'pymongo.settings', 'pymongo.mongo_client', 'pymongo.mongo_replica_set_client', 'pymongo', 'mongoengine.connection', 'mongoengine.signals', 'mongoengine.errors', 'mongoengine.base.common', 'mongoengine.common', 'mongoengine.base.datastructures', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.document', 'mongoengine.queryset.field_list', 'mongoengine.pymongo_support', 'mongoengine.context_managers', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.queryset.base', 'mongoengine.queryset.queryset', 'mongoengine.queryset.manager', 'mongoengine.queryset', 'mongoengine.base.metaclasses', 'mongoengine.base', 'mongoengine.document', 'gridfs.errors', 'gridfs.grid_file', 'gridfs', 'dateutil._version', 'dateutil', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', 'mongoengine.base.utils', 'PIL._version', 'PIL', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'PIL.ImageOps', 'mongoengine.fields', 'mongoengine', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf.base', 'email_validator', 'wtforms.compat', 'wtforms.validators', 'wtforms.widgets.core', 'wtforms.widgets', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.core', 'wtforms.fields.simple', 'wtforms.fields', 'wtforms.meta', 'wtforms.form', 'wtforms', 'gettext', 'flask_mongoengine.wtf.fields', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.csrf', 'flask_wtf.form', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha', 'flask_wtf', 'flask_mongoengine.wtf.models', 'flask_mongoengine.wtf.orm', 'flask_mongoengine.wtf', 'flask_mongoengine', 'app.models', 'app.config', 'app', 'cachelib._compat', 'cachelib.base', 'cachelib.simple', 'cachelib.file', 'cachelib.memcached', 'cachelib.redis', 'cachelib.uwsgi', 'cachelib', 'app.apis', 'botocore', 'shlex', 'botocore.vendored', 'botocore.vendored.six', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests', 'botocore.exceptions', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3.exceptions', 'urllib3._version', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.connection', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.ssl_', 'urllib3.util.timeout', 'urllib3.util', 'urllib3.util.proxy', 'urllib3._collections', 'urllib3.connection', 'urllib3.fields', 'urllib3.filepost', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.request', 'urllib3.response', 'urllib3.util.queue', 'urllib3.connectionpool', 'urllib3.poolmanager', 'urllib3', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.compat', 'botocore.configloader', 'termios', 'getpass', 'cgi', 'botocore.vendored.six.moves.urllib_parse', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.utils', 'botocore.awsrequest', 'botocore.hooks', 'botocore.history', 'botocore.eventstream', 'botocore.parsers', 'botocore.response', 'botocore.endpoint', 'botocore.config', 'botocore.credentials', 'jmespath.compat', 'jmespath.exceptions', 'jmespath.lexer', 'jmespath.ast', 'jmespath.functions', 'jmespath.visitor', 'jmespath.parser', 'jmespath', 'botocore.docs.utils', 'botocore.docs.shape', 'botocore.docs.params', 'botocore.docs.example', 'botocore.docs.method', 'botocore.docs.sharedexample', 'botocore.docs.client', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', '_markupbase', 'html.parser', 'botocore.docs.bcdoc.docstringparser', 'botocore.docs.bcdoc.style', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.service', 'botocore.docs', 'botocore.docs.docstring', 'botocore.waiter', 'botocore.validate', 'botocore.serialize', 'botocore.auth', 'botocore.signers', 'botocore.args', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.quota', 'botocore.retries.base', 'botocore.retries.special', 'botocore.retries.standard', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.retries.adaptive', 'botocore.client', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.retryhandler', 'botocore.translate', 'botocore.handlers', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'botocore.session', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs.client', 'boto3.docs.base', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.action', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.resource', 'boto3.docs.service', 'boto3.docs', 'boto3.docs.docstring', 'boto3.resources.action', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.resources.factory', 'boto3.session', 'boto3.compat', 'boto3', '_csv', 'csv', 'app.apis.utils', 'app.apis.s3_methods', 'app.apis.notif_methods', 'email.mime', 'email._header_value_parser', 'email.headerregistry', 'email.contentmanager', 'email.policy', 'email.mime.base', 'email.mime.multipart', 'email.mime.nonmultipart', 'email.mime.text', 'email.generator', 'smtplib', 'app.apis.email_methods', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', '_ctypes', 'ctypes._endian', 'ctypes', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'cython_runtime', '_cython_0_29_14', 'numpy.random._common', 'secrets', 'numpy.random._bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas.compat', 'distutils', 'distutils.version', 'pandas.compat.numpy', '_cython_0_29_21', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.dtypes.missing', 'pandas.util._decorators', 'pandas.core.util', 'pandas._libs.hashing', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas._libs.ops', 'pandas.core.ops.roperator', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.sorting', 'pandas.core.arrays.base', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.floating', 'pandas.core.arrays.integer', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'gc', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'gzip', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.generic', 'pandas.core.internals.construction', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.engines', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.api', 'pandas.util._tester', 'cmath', 'pandas._libs.testing', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'matplotlib', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'matplotlib._animation_data', 'matplotlib.animation', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-04-09 05:23:07,316 DEBUG matplotlib MainThread : CACHEDIR=/Users/yingjieqiao/.matplotlib
2021-04-09 05:23:07,318 DEBUG matplotlib.font_manager MainThread : Using fontManager instance from /Users/yingjieqiao/.matplotlib/fontlist-v330.json
2021-04-09 05:23:07,452 DEBUG matplotlib.pyplot MainThread : Loaded backend macosx version unknown.
2021-04-09 05:23:07,452 DEBUG matplotlib.pyplot MainThread : Loaded backend MacOSX version unknown.
2021-04-09 05:23:07,586 INFO werkzeug MainThread :  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
2021-04-09 05:23:15,499 INFO werkzeug Thread-1 : 127.0.0.1 - - [09/Apr/2021 05:23:15] "[37mOPTIONS /login HTTP/1.1[0m" 200 -
2021-04-09 05:23:18,031 INFO logger Thread-2 : YingjieQiao is attemping to log in
2021-04-09 05:23:18,039 INFO werkzeug Thread-2 : 127.0.0.1 - - [09/Apr/2021 05:23:18] "[37mPOST /login HTTP/1.1[0m" 200 -
2021-04-09 05:23:48,214 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 05:23:48] "[37mOPTIONS /login_verified HTTP/1.1[0m" 200 -
2021-04-09 05:23:48,219 INFO logger Thread-4 : YingjieQiao has logged in
2021-04-09 05:23:48,223 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 05:23:48] "[37mPOST /login_verified HTTP/1.1[0m" 200 -
2021-04-09 05:23:49,554 INFO werkzeug Thread-5 : 127.0.0.1 - - [09/Apr/2021 05:23:49] "[37mGET /staff_get_photo_notification HTTP/1.1[0m" 200 -
2021-04-09 05:23:49,607 INFO werkzeug Thread-6 : 127.0.0.1 - - [09/Apr/2021 05:23:49] "[37mGET /staff_get_photo_notification HTTP/1.1[0m" 200 -
2021-04-09 05:25:34,138 INFO werkzeug Thread-7 : 127.0.0.1 - - [09/Apr/2021 05:25:34] "[37mOPTIONS /login HTTP/1.1[0m" 200 -
2021-04-09 05:25:36,481 INFO logger Thread-8 : RossGeller is attemping to log in
2021-04-09 05:25:36,488 INFO werkzeug Thread-8 : 127.0.0.1 - - [09/Apr/2021 05:25:36] "[37mPOST /login HTTP/1.1[0m" 200 -
2021-04-09 05:25:51,417 INFO werkzeug Thread-9 : 127.0.0.1 - - [09/Apr/2021 05:25:51] "[37mOPTIONS /login_verified HTTP/1.1[0m" 200 -
2021-04-09 05:25:51,422 INFO logger Thread-10 : RossGeller has logged in
2021-04-09 05:25:51,427 INFO werkzeug Thread-10 : 127.0.0.1 - - [09/Apr/2021 05:25:51] "[37mPOST /login_verified HTTP/1.1[0m" 200 -
2021-04-09 05:25:52,131 INFO werkzeug Thread-11 : 127.0.0.1 - - [09/Apr/2021 05:25:52] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 05:25:52,133 INFO werkzeug Thread-12 : 127.0.0.1 - - [09/Apr/2021 05:25:52] "[37mGET /tenant_get_photo_notification HTTP/1.1[0m" 200 -
2021-04-09 05:25:52,159 INFO werkzeug Thread-13 : 127.0.0.1 - - [09/Apr/2021 05:25:52] "[37mGET /tenant_get_photo_notification HTTP/1.1[0m" 200 -
2021-04-09 05:25:56,915 INFO werkzeug Thread-14 : 127.0.0.1 - - [09/Apr/2021 05:25:56] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 05:25:56,917 INFO werkzeug Thread-15 : 127.0.0.1 - - [09/Apr/2021 05:25:56] "[37mGET /tenant_get_photo_notification HTTP/1.1[0m" 200 -
2021-04-09 05:25:56,951 INFO werkzeug Thread-16 : 127.0.0.1 - - [09/Apr/2021 05:25:56] "[37mGET /tenant_get_photo_notification HTTP/1.1[0m" 200 -
2021-04-09 05:26:03,096 INFO werkzeug Thread-17 : 127.0.0.1 - - [09/Apr/2021 05:26:03] "[37mGET /staff_get_photo_notification HTTP/1.1[0m" 200 -
2021-04-09 05:26:03,298 INFO werkzeug Thread-18 : 127.0.0.1 - - [09/Apr/2021 05:26:03] "[37mGET /staff_get_photo_notification HTTP/1.1[0m" 200 -
2021-04-09 05:26:34,756 INFO werkzeug Thread-19 : 127.0.0.1 - - [09/Apr/2021 05:26:34] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 05:26:37,283 INFO werkzeug Thread-20 : 127.0.0.1 - - [09/Apr/2021 05:26:37] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 05:26:38,867 INFO werkzeug Thread-21 : 127.0.0.1 - - [09/Apr/2021 05:26:38] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 05:26:44,824 INFO werkzeug Thread-22 : 127.0.0.1 - - [09/Apr/2021 05:26:44] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 05:27:48,794 INFO werkzeug Thread-23 : 127.0.0.1 - - [09/Apr/2021 05:27:48] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 05:27:54,767 INFO werkzeug Thread-24 : 127.0.0.1 - - [09/Apr/2021 05:27:54] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 05:27:54,768 INFO werkzeug Thread-25 : 127.0.0.1 - - [09/Apr/2021 05:27:54] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 05:27:54,783 INFO werkzeug Thread-26 : 127.0.0.1 - - [09/Apr/2021 05:27:54] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 05:28:23,023 INFO werkzeug Thread-27 : 127.0.0.1 - - [09/Apr/2021 05:28:23] "[37mOPTIONS /covidChecklist HTTP/1.1[0m" 200 -
2021-04-09 05:28:23,086 INFO werkzeug Thread-28 : 127.0.0.1 - - [09/Apr/2021 05:28:23] "[37mPOST /covidChecklist HTTP/1.1[0m" 200 -
2021-04-09 05:28:28,610 INFO werkzeug Thread-29 : 127.0.0.1 - - [09/Apr/2021 05:28:28] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 05:28:28,612 INFO werkzeug Thread-30 : 127.0.0.1 - - [09/Apr/2021 05:28:28] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 05:28:35,876 INFO werkzeug Thread-31 : 127.0.0.1 - - [09/Apr/2021 05:28:35] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 05:28:38,456 INFO werkzeug Thread-32 : 127.0.0.1 - - [09/Apr/2021 05:28:38] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 05:28:38,456 INFO werkzeug Thread-33 : 127.0.0.1 - - [09/Apr/2021 05:28:38] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 05:28:38,458 INFO werkzeug Thread-34 : 127.0.0.1 - - [09/Apr/2021 05:28:38] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 05:29:14,732 INFO werkzeug Thread-36 : 127.0.0.1 - - [09/Apr/2021 05:29:14] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 05:29:14,732 INFO werkzeug Thread-35 : 127.0.0.1 - - [09/Apr/2021 05:29:14] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 05:29:18,867 INFO werkzeug Thread-37 : 127.0.0.1 - - [09/Apr/2021 05:29:18] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 05:29:20,789 INFO werkzeug Thread-38 : 127.0.0.1 - - [09/Apr/2021 05:29:20] "[37mOPTIONS /report_timeframe HTTP/1.1[0m" 200 -
2021-04-09 05:29:20,799 ERROR app Thread-39 : Exception on /report_timeframe [POST]
Traceback (most recent call last):
  File "/Users/yingjieqiao/escapp/lib/python3.8/site-packages/flask/app.py", line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/yingjieqiao/escapp/lib/python3.8/site-packages/flask/app.py", line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/yingjieqiao/escapp/lib/python3.8/site-packages/flask_cors/extension.py", line 165, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File "/Users/yingjieqiao/escapp/lib/python3.8/site-packages/flask/app.py", line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "/Users/yingjieqiao/escapp/lib/python3.8/site-packages/flask/_compat.py", line 39, in reraise
    raise value
  File "/Users/yingjieqiao/escapp/lib/python3.8/site-packages/flask/app.py", line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/yingjieqiao/escapp/lib/python3.8/site-packages/flask/app.py", line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "/Users/yingjieqiao/escapp/lib/python3.8/site-packages/flask_cors/decorator.py", line 128, in wrapped_function
    resp = make_response(f(*args, **kwargs))
  File "/Users/yingjieqiao/Desktop/term5/react-flask-app/backend/app/apis/__init__.py", line 2379, in report_timeframe
    for i in audit_ls:
  File "/Users/yingjieqiao/escapp/lib/python3.8/site-packages/mongoengine/queryset/queryset.py", line 110, in _iter_results
    self._populate_cache()
  File "/Users/yingjieqiao/escapp/lib/python3.8/site-packages/mongoengine/queryset/queryset.py", line 129, in _populate_cache
    self._result_cache.append(next(self))
  File "/Users/yingjieqiao/escapp/lib/python3.8/site-packages/mongoengine/queryset/base.py", line 1570, in __next__
    doc = self._document._from_son(
  File "/Users/yingjieqiao/escapp/lib/python3.8/site-packages/mongoengine/base/document.py", line 804, in _from_son
    obj = cls(__auto_convert=False, _created=created, **data)
  File "/Users/yingjieqiao/escapp/lib/python3.8/site-packages/mongoengine/base/document.py", line 93, in __init__
    raise FieldDoesNotExist(msg)
mongoengine.errors.FieldDoesNotExist: The fields "{'workSafetyListScore', 'houskeepingListScore', 'profListScore'}" do not exist on the document "Audit_non_FB"
2021-04-09 05:29:20,815 INFO werkzeug Thread-39 : 127.0.0.1 - - [09/Apr/2021 05:29:20] "[35m[1mPOST /report_timeframe HTTP/1.1[0m" 500 -
2021-04-09 05:50:30,777 INFO logger MainThread : backend started
2021-04-09 05:50:31,256 DEBUG matplotlib MainThread : matplotlib data path: C:\Python39\lib\site-packages\matplotlib\mpl-data
2021-04-09 05:50:31,262 DEBUG matplotlib MainThread : CONFIGDIR=C:\Users\ishaa\.matplotlib
2021-04-09 05:50:31,264 DEBUG matplotlib MainThread : matplotlib version 3.4.0
2021-04-09 05:50:31,264 DEBUG matplotlib MainThread : interactive is False
2021-04-09 05:50:31,264 DEBUG matplotlib MainThread : platform is win32
2021-04-09 05:50:31,264 DEBUG matplotlib MainThread : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_frozen_importlib_external', 'nt', '_io', 'marshal', 'winreg', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1252', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'pywin32_bootstrap', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'google', 'google.logging', 'mpl_toolkits', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', '_string', 'string', 'markupsafe._compat', 'markupsafe._speedups', 'markupsafe', 'errno', 'posixpath', 'fnmatch', 'zlib', '_compression', 'threading', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', 'math', '_bisect', 'bisect', '_random', '_sha512', 'random', 'tempfile', '_hashlib', '_blake2', 'hashlib', '_struct', 'struct', '_compat_pickle', '_pickle', 'pickle', 'urllib', 'urllib.parse', 'jinja2._compat', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'jinja2.utils', 'jinja2.bccache', 'jinja2.nodes', 'jinja2.exceptions', 'jinja2.visitor', 'jinja2.idtracking', 'jinja2.optimizer', '__future__', 'jinja2.compiler', 'jinja2.runtime', 'jinja2.filters', 'numbers', '_decimal', 'decimal', 'jinja2.tests', 'jinja2.defaults', '_ast', 'ast', 'unicodedata', 'jinja2._identifier', 'jinja2.lexer', 'jinja2.parser', 'jinja2.environment', 'jinja2.loaders', 'jinja2', 'signal', '_socket', 'select', 'selectors', 'socket', '_datetime', 'datetime', 'werkzeug._compat', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traceback', 'atexit', 'logging', 'werkzeug._internal', 'html.entities', 'html', 'werkzeug.utils', 'werkzeug.exceptions', 'werkzeug.urls', 'socketserver', 'http', 'copy', 'email', 'locale', 'calendar', 'email._parseaddr', 'binascii', 'base64', 'email.base64mime', 'email.quoprimime', 'email.errors', 'quopri', 'email.encoders', 'email.charset', 'email.utils', 'email.header', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', '_ssl', 'ssl', 'http.client', 'mimetypes', 'http.server', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'msvcrt', 'click._winconsole', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'click._compat', 'click._unicodefun', 'click.globals', 'click.utils', 'click.exceptions', 'click.parser', 'click.types', 'click.termui', 'click.formatting', 'click.core', 'click.decorators', 'click', 'werkzeug.serving', 'werkzeug.filesystem', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'werkzeug.http', 'werkzeug.datastructures', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wsgi', 'werkzeug.formparser', 'werkzeug.wrappers.base_request', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.cors', 'werkzeug.useragents', 'werkzeug.wrappers.user_agent', 'werkzeug.wrappers.request', 'werkzeug.wrappers.response', 'werkzeug.wrappers', 'http.cookiejar', 'werkzeug.test', 'werkzeug', '_uuid', 'uuid', 'itsdangerous._json', 'hmac', 'itsdangerous._compat', 'itsdangerous.exc', 'itsdangerous.encoding', 'itsdangerous.signer', 'itsdangerous.serializer', 'itsdangerous.jws', 'itsdangerous.timed', 'itsdangerous.url_safe', 'itsdangerous', 'flask._compat', 'werkzeug.local', 'flask.globals', 'dataclasses', 'flask.json', 'difflib', 'pprint', 'werkzeug.routing', '_winapi', 'subprocess', 'platform', 'blinker._saferef', 'blinker._utilities', 'blinker.base', 'blinker', 'flask.signals', 'flask.helpers', 'flask.cli', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.json.tag', 'flask.sessions', 'flask.templating', 'werkzeug.wrappers.json', 'flask.wrappers', 'flask.app', 'flask.blueprints', 'flask', 'zipfile', 'xml', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'win32api', '_win32sysloader', 'pywintypes', 'pythoncom', 'win32com.gen_py', 'win32com', 'win32com.shell', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging._typing', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'sysconfig', 'pkg_resources', 'encodings.utf_16_le', 'wsgi', 'flask_session.sessions', 'flask_session', 'six', 'flask_cors.core', 'flask_cors.decorator', 'flask_cors.extension', 'flask_cors.version', 'flask_cors', 'werkzeug.security', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'bcrypt', 'flask_bcrypt', 'bson.py3compat', 'bson.binary', 'bson.code', 'bson.codec_options', 'bson.son', 'bson.dbref', 'bson.decimal128', 'bson.errors', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.tz_util', 'bson.objectid', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson', 'bson.raw_bson', 'pymongo.errors', 'pymongo.auth_aws', 'stringprep', 'pymongo.saslprep', 'pymongo.auth', 'pymongo.helpers', 'pymongo.monitoring', 'pymongo.compression_support', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.server_type', 'pymongo.max_staleness_selectors', 'pymongo.server_selectors', 'pymongo.read_preferences', 'ipaddress', 'pymongo.ssl_context', 'pathlib', 'importlib._common', 'importlib.resources', 'certifi.core', 'certifi', 'pymongo.ssl_support', 'pymongo.write_concern', 'pymongo.common', 'pymongo._cmessage', 'pymongo.message', 'pymongo.collation', 'pymongo.aggregation', 'pymongo.monotonic', 'pymongo.client_session', 'pymongo.bulk', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.collection', 'pymongo.son_manipulator', 'pymongo.database', 'pymongo.periodic_executor', 'dns.version', 'dns', 'dns.exception', 'dns.flags', 'dns.ipv4', 'dns.ipv6', 'dns.inet', 'encodings.idna', 'idna.package_data', 'idna.idnadata', 'idna.intranges', 'idna.core', 'idna', '_contextvars', 'contextvars', 'dns._immutable_ctx', 'dns.immutable', 'dns.name', 'dns.wire', 'dns.enum', 'dns.rdataclass', 'dns.rdatatype', 'dns.ttl', 'dns.tokenizer', 'dns.rdata', 'dns.edns', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.set', 'dns.rdataset', 'dns.tsig', 'dns.renderer', 'dns.rrset', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.message', 'dns.serial', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'dns.zone', 'dns.xfr', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3.exceptions', '_queue', 'queue', 'urllib3.util.wait', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.connection', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.url', 'urllib3.util.ssl_', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3.util', 'urllib3._collections', 'urllib3.connection', 'urllib3.fields', 'urllib3.filepost', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.request', 'urllib3.response', 'urllib3.util.queue', 'urllib3.connectionpool', 'urllib3.poolmanager', 'urllib3._version', 'urllib3', 'chardet.compat', 'chardet.enums', 'chardet.charsetprober', 'chardet.charsetgroupprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.escprober', 'chardet.latin1prober', 'chardet.mbcssm', 'chardet.utf8prober', 'chardet.mbcharsetprober', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.chardistribution', 'chardet.jpcntx', 'chardet.sjisprober', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.mbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.sbcsgroupprober', 'chardet.universaldetector', 'chardet.version', 'chardet', 'requests.exceptions', 'requests.__version__', 'requests.certs', 'http.cookies', 'requests.compat', 'requests._internal_utils', 'requests.cookies', 'requests.structures', 'requests.utils', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.request', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3._version', 'requests.packages.urllib3', 'requests.packages.idna.package_data', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.idna.core', 'requests.packages.idna', 'requests.packages.chardet.compat', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.escprober', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.version', 'requests.packages.chardet', 'requests.packages', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.models', 'requests.adapters', 'requests.sessions', 'requests.api', 'requests', 'urllib3.contrib.appengine', 'requests_toolbelt._compat', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt.adapters.source', 'requests_toolbelt.adapters', 'requests_toolbelt.auth', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.auth.guess', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.multipart', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt', 'requests_toolbelt.adapters.host_header_ssl', 'dns.query', 'dns.reversename', 'dns.resolver', 'pymongo.srv_resolver', 'pymongo.uri_parser', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.socket_checker', 'pymongo.network', 'pymongo.ssl_match_hostname', 'pymongo.pool', 'pymongo.client_options', 'pymongo.cursor_manager', 'pymongo.server_description', 'pymongo.topology_description', 'pymongo.monitor', 'pymongo.response', 'pymongo.server', 'pymongo.topology', 'pymongo.settings', 'pymongo.mongo_client', 'pymongo.mongo_replica_set_client', 'pymongo', 'mongoengine.connection', 'mongoengine.signals', 'mongoengine.errors', 'mongoengine.base.common', 'mongoengine.common', 'mongoengine.base.datastructures', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.document', 'mongoengine.queryset.field_list', 'mongoengine.pymongo_support', 'mongoengine.context_managers', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.queryset.base', 'mongoengine.queryset.queryset', 'mongoengine.queryset.manager', 'mongoengine.queryset', 'mongoengine.base.metaclasses', 'mongoengine.base', 'mongoengine.document', 'gridfs.errors', 'gridfs.grid_file', 'gridfs', 'dateutil._version', 'dateutil', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', 'mongoengine.base.utils', 'PIL._version', 'PIL', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'PIL.ImageOps', 'mongoengine.fields', 'mongoengine', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf.base', 'email_validator', 'wtforms.compat', 'wtforms.validators', 'wtforms.widgets.core', 'wtforms.widgets', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.core', 'wtforms.fields.simple', 'wtforms.fields', 'wtforms.meta', 'wtforms.form', 'wtforms', 'gettext', 'flask_mongoengine.wtf.fields', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.csrf', 'flask_wtf.form', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha', 'flask_wtf', 'flask_mongoengine.wtf.models', 'flask_mongoengine.wtf.orm', 'flask_mongoengine.wtf', 'flask_mongoengine', 'app.models', 'app.config', 'app', 'cachelib._compat', 'cachelib.base', 'cachelib.simple', 'cachelib.file', 'cachelib.memcached', 'cachelib.redis', 'cachelib.uwsgi', 'cachelib', 'app.apis', 'botocore', 'shlex', 'botocore.vendored', 'botocore.vendored.six', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests', 'botocore.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.compat', 'botocore.configloader', 'getpass', 'cgi', 'botocore.vendored.six.moves.urllib_parse', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.utils', 'botocore.awsrequest', 'botocore.hooks', 'botocore.history', 'botocore.eventstream', 'botocore.parsers', 'botocore.response', 'botocore.endpoint', 'botocore.config', 'botocore.credentials', 'jmespath.compat', 'jmespath.exceptions', 'jmespath.lexer', 'jmespath.ast', 'jmespath.functions', 'jmespath.visitor', 'jmespath.parser', 'jmespath', 'botocore.docs.utils', 'botocore.docs.shape', 'botocore.docs.params', 'botocore.docs.example', 'botocore.docs.method', 'botocore.docs.sharedexample', 'botocore.docs.client', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', '_markupbase', 'html.parser', 'botocore.docs.bcdoc.docstringparser', 'botocore.docs.bcdoc.style', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.service', 'botocore.docs', 'botocore.docs.docstring', 'botocore.waiter', 'botocore.validate', 'botocore.serialize', 'botocore.auth', 'botocore.signers', 'botocore.args', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.quota', 'botocore.retries.base', 'botocore.retries.special', 'botocore.retries.standard', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.retries.adaptive', 'botocore.client', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.retryhandler', 'botocore.translate', 'botocore.handlers', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'botocore.session', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs.client', 'boto3.docs.base', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.action', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.resource', 'boto3.docs.service', 'boto3.docs', 'boto3.docs.docstring', 'boto3.resources.action', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.resources.factory', 'boto3.session', 'boto3.compat', 'boto3', '_csv', 'csv', 'app.apis.utils', 'app.apis.s3_methods', 'app.apis.notif_methods', 'email.mime', 'email._header_value_parser', 'email.headerregistry', 'email.contentmanager', 'email.policy', 'email.mime.base', 'email.mime.multipart', 'email.mime.nonmultipart', 'email.mime.text', 'email.generator', 'smtplib', 'app.apis.email_methods', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'glob', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'cython_runtime', '_cython_0_29_21', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas.compat', 'distutils', 'distutils.version', 'pandas.compat.numpy', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.dtypes.missing', 'pandas.util._decorators', 'pandas.core.util', 'pandas._libs.hashing', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas._libs.ops', 'pandas.core.ops.roperator', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.sorting', 'pandas.core.arrays.base', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.floating', 'pandas.core.arrays.integer', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'gc', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'gzip', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.generic', 'pandas.core.internals.construction', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.engines', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.api', 'pandas.util._tester', 'cmath', 'pandas._libs.testing', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'matplotlib._animation_data', 'matplotlib.animation', 'PIL.ImageChops', 'PIL.ImageFile', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'dateutil.rrule', 'matplotlib.units', 'matplotlib.dates']
2021-04-09 05:50:31,292 DEBUG matplotlib MainThread : CACHEDIR=C:\Users\ishaa\.matplotlib
2021-04-09 05:50:31,294 DEBUG matplotlib.font_manager MainThread : Using fontManager instance from C:\Users\ishaa\.matplotlib\fontlist-v330.json
2021-04-09 05:50:31,409 DEBUG matplotlib.pyplot MainThread : Loaded backend tkagg version unknown.
2021-04-09 05:50:31,410 DEBUG matplotlib.pyplot MainThread : Loaded backend TkAgg version unknown.
2021-04-09 05:50:46,063 INFO logger MainThread : backend started
2021-04-09 05:50:46,512 DEBUG matplotlib MainThread : matplotlib data path: C:\Python39\lib\site-packages\matplotlib\mpl-data
2021-04-09 05:50:46,518 DEBUG matplotlib MainThread : CONFIGDIR=C:\Users\ishaa\.matplotlib
2021-04-09 05:50:46,519 DEBUG matplotlib MainThread : matplotlib version 3.4.0
2021-04-09 05:50:46,519 DEBUG matplotlib MainThread : interactive is False
2021-04-09 05:50:46,519 DEBUG matplotlib MainThread : platform is win32
2021-04-09 05:50:46,519 DEBUG matplotlib MainThread : loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_frozen_importlib_external', 'nt', '_io', 'marshal', 'winreg', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1252', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'pywin32_bootstrap', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'google', 'google.logging', 'mpl_toolkits', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', '_string', 'string', 'markupsafe._compat', 'markupsafe._speedups', 'markupsafe', 'errno', 'posixpath', 'fnmatch', 'zlib', '_compression', 'threading', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', 'math', '_bisect', 'bisect', '_random', '_sha512', 'random', 'tempfile', '_hashlib', '_blake2', 'hashlib', '_struct', 'struct', '_compat_pickle', '_pickle', 'pickle', 'urllib', 'urllib.parse', 'jinja2._compat', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'jinja2.utils', 'jinja2.bccache', 'jinja2.nodes', 'jinja2.exceptions', 'jinja2.visitor', 'jinja2.idtracking', 'jinja2.optimizer', '__future__', 'jinja2.compiler', 'jinja2.runtime', 'jinja2.filters', 'numbers', '_decimal', 'decimal', 'jinja2.tests', 'jinja2.defaults', '_ast', 'ast', 'unicodedata', 'jinja2._identifier', 'jinja2.lexer', 'jinja2.parser', 'jinja2.environment', 'jinja2.loaders', 'jinja2', 'signal', '_socket', 'select', 'selectors', 'socket', '_datetime', 'datetime', 'werkzeug._compat', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traceback', 'atexit', 'logging', 'werkzeug._internal', 'html.entities', 'html', 'werkzeug.utils', 'werkzeug.exceptions', 'werkzeug.urls', 'socketserver', 'http', 'copy', 'email', 'locale', 'calendar', 'email._parseaddr', 'binascii', 'base64', 'email.base64mime', 'email.quoprimime', 'email.errors', 'quopri', 'email.encoders', 'email.charset', 'email.utils', 'email.header', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', '_ssl', 'ssl', 'http.client', 'mimetypes', 'http.server', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'msvcrt', 'click._winconsole', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'click._compat', 'click._unicodefun', 'click.globals', 'click.utils', 'click.exceptions', 'click.parser', 'click.types', 'click.termui', 'click.formatting', 'click.core', 'click.decorators', 'click', 'werkzeug.serving', 'werkzeug.filesystem', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'werkzeug.http', 'werkzeug.datastructures', 'werkzeug.wrappers.accept', 'werkzeug.wrappers.auth', 'werkzeug.wsgi', 'werkzeug.formparser', 'werkzeug.wrappers.base_request', 'werkzeug.wrappers.base_response', 'werkzeug.wrappers.common_descriptors', 'werkzeug.wrappers.etag', 'werkzeug.wrappers.cors', 'werkzeug.useragents', 'werkzeug.wrappers.user_agent', 'werkzeug.wrappers.request', 'werkzeug.wrappers.response', 'werkzeug.wrappers', 'http.cookiejar', 'werkzeug.test', 'werkzeug', '_uuid', 'uuid', 'itsdangerous._json', 'hmac', 'itsdangerous._compat', 'itsdangerous.exc', 'itsdangerous.encoding', 'itsdangerous.signer', 'itsdangerous.serializer', 'itsdangerous.jws', 'itsdangerous.timed', 'itsdangerous.url_safe', 'itsdangerous', 'flask._compat', 'werkzeug.local', 'flask.globals', 'dataclasses', 'flask.json', 'difflib', 'pprint', 'werkzeug.routing', '_winapi', 'subprocess', 'platform', 'blinker._saferef', 'blinker._utilities', 'blinker.base', 'blinker', 'flask.signals', 'flask.helpers', 'flask.cli', 'flask.config', 'flask.ctx', 'flask.logging', 'flask.json.tag', 'flask.sessions', 'flask.templating', 'werkzeug.wrappers.json', 'flask.wrappers', 'flask.app', 'flask.blueprints', 'flask', 'zipfile', 'xml', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'textwrap', 'pkg_resources.extern', 'pkg_resources._vendor', 'win32api', '_win32sysloader', 'pywintypes', 'pythoncom', 'win32com.gen_py', 'win32com', 'win32com.shell', 'pkg_resources._vendor.appdirs', 'pkg_resources.extern.appdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging._typing', 'pkg_resources.extern.packaging.version', 'pkg_resources.extern.packaging._compat', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'sysconfig', 'pkg_resources', 'encodings.utf_16_le', 'wsgi', 'flask_session.sessions', 'flask_session', 'six', 'flask_cors.core', 'flask_cors.decorator', 'flask_cors.extension', 'flask_cors.version', 'flask_cors', 'werkzeug.security', '_cffi_backend', '_bcrypt.lib', '_bcrypt', 'bcrypt._bcrypt', 'bcrypt.__about__', 'bcrypt', 'flask_bcrypt', 'bson.py3compat', 'bson.binary', 'bson.code', 'bson.codec_options', 'bson.son', 'bson.dbref', 'bson.decimal128', 'bson.errors', 'bson.int64', 'bson.max_key', 'bson.min_key', 'bson.tz_util', 'bson.objectid', 'bson.regex', 'bson.timestamp', 'bson._cbson', 'bson', 'bson.raw_bson', 'pymongo.errors', 'pymongo.auth_aws', 'stringprep', 'pymongo.saslprep', 'pymongo.auth', 'pymongo.helpers', 'pymongo.monitoring', 'pymongo.compression_support', 'pymongo.driver_info', 'pymongo.encryption_options', 'pymongo.read_concern', 'pymongo.server_type', 'pymongo.max_staleness_selectors', 'pymongo.server_selectors', 'pymongo.read_preferences', 'ipaddress', 'pymongo.ssl_context', 'pathlib', 'importlib._common', 'importlib.resources', 'certifi.core', 'certifi', 'pymongo.ssl_support', 'pymongo.write_concern', 'pymongo.common', 'pymongo._cmessage', 'pymongo.message', 'pymongo.collation', 'pymongo.aggregation', 'pymongo.monotonic', 'pymongo.client_session', 'pymongo.bulk', 'pymongo.command_cursor', 'pymongo.change_stream', 'pymongo.cursor', 'pymongo.operations', 'pymongo.results', 'pymongo.collection', 'pymongo.son_manipulator', 'pymongo.database', 'pymongo.periodic_executor', 'dns.version', 'dns', 'dns.exception', 'dns.flags', 'dns.ipv4', 'dns.ipv6', 'dns.inet', 'encodings.idna', 'idna.package_data', 'idna.idnadata', 'idna.intranges', 'idna.core', 'idna', '_contextvars', 'contextvars', 'dns._immutable_ctx', 'dns.immutable', 'dns.name', 'dns.wire', 'dns.enum', 'dns.rdataclass', 'dns.rdatatype', 'dns.ttl', 'dns.tokenizer', 'dns.rdata', 'dns.edns', 'dns.opcode', 'dns.entropy', 'dns.rcode', 'dns.set', 'dns.rdataset', 'dns.tsig', 'dns.renderer', 'dns.rrset', 'dns.rdtypes', 'dns.rdtypes.ANY', 'dns.rdtypes.ANY.OPT', 'dns.rdtypes.ANY.TSIG', 'dns.message', 'dns.serial', 'dns.node', 'dns.rdtypes.ANY.SOA', 'dns.transaction', 'dns.grange', 'dns.zonefile', 'dns.zone', 'dns.xfr', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3.exceptions', '_queue', 'queue', 'urllib3.util.wait', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.connection', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.url', 'urllib3.util.ssl_', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3.util', 'urllib3._collections', 'urllib3.connection', 'urllib3.fields', 'urllib3.filepost', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.request', 'urllib3.response', 'urllib3.util.queue', 'urllib3.connectionpool', 'urllib3.poolmanager', 'urllib3._version', 'urllib3', 'chardet.compat', 'chardet.enums', 'chardet.charsetprober', 'chardet.charsetgroupprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.escprober', 'chardet.latin1prober', 'chardet.mbcssm', 'chardet.utf8prober', 'chardet.mbcharsetprober', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.chardistribution', 'chardet.jpcntx', 'chardet.sjisprober', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.mbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.sbcsgroupprober', 'chardet.universaldetector', 'chardet.version', 'chardet', 'requests.exceptions', 'requests.__version__', 'requests.certs', 'http.cookies', 'requests.compat', 'requests._internal_utils', 'requests.cookies', 'requests.structures', 'requests.utils', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.request', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3._version', 'requests.packages.urllib3', 'requests.packages.idna.package_data', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.idna.core', 'requests.packages.idna', 'requests.packages.chardet.compat', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.escprober', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.version', 'requests.packages.chardet', 'requests.packages', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.models', 'requests.adapters', 'requests.sessions', 'requests.api', 'requests', 'urllib3.contrib.appengine', 'requests_toolbelt._compat', 'requests_toolbelt.adapters.ssl', 'requests_toolbelt.adapters.source', 'requests_toolbelt.adapters', 'requests_toolbelt.auth', 'requests_toolbelt.auth._digest_auth_compat', 'requests_toolbelt.auth.http_proxy_digest', 'requests_toolbelt.auth.guess', 'requests_toolbelt.multipart.encoder', 'requests_toolbelt.multipart.decoder', 'requests_toolbelt.multipart', 'requests_toolbelt.streaming_iterator', 'requests_toolbelt.utils', 'requests_toolbelt.utils.user_agent', 'requests_toolbelt', 'requests_toolbelt.adapters.host_header_ssl', 'dns.query', 'dns.reversename', 'dns.resolver', 'pymongo.srv_resolver', 'pymongo.uri_parser', 'pymongo.thread_util', 'pymongo.ismaster', 'pymongo.socket_checker', 'pymongo.network', 'pymongo.ssl_match_hostname', 'pymongo.pool', 'pymongo.client_options', 'pymongo.cursor_manager', 'pymongo.server_description', 'pymongo.topology_description', 'pymongo.monitor', 'pymongo.response', 'pymongo.server', 'pymongo.topology', 'pymongo.settings', 'pymongo.mongo_client', 'pymongo.mongo_replica_set_client', 'pymongo', 'mongoengine.connection', 'mongoengine.signals', 'mongoengine.errors', 'mongoengine.base.common', 'mongoengine.common', 'mongoengine.base.datastructures', 'bson.json_util', 'mongoengine.base.fields', 'mongoengine.base.document', 'mongoengine.queryset.field_list', 'mongoengine.pymongo_support', 'mongoengine.context_managers', 'mongoengine.queryset.transform', 'mongoengine.queryset.visitor', 'mongoengine.queryset.base', 'mongoengine.queryset.queryset', 'mongoengine.queryset.manager', 'mongoengine.queryset', 'mongoengine.base.metaclasses', 'mongoengine.base', 'mongoengine.document', 'gridfs.errors', 'gridfs.grid_file', 'gridfs', 'dateutil._version', 'dateutil', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', 'mongoengine.base.utils', 'PIL._version', 'PIL', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'PIL.ImageOps', 'mongoengine.fields', 'mongoengine', 'flask_mongoengine.connection', 'flask_mongoengine.json', 'flask_mongoengine.pagination', 'flask_mongoengine.sessions', 'flask_mongoengine.wtf.base', 'email_validator', 'wtforms.compat', 'wtforms.validators', 'wtforms.widgets.core', 'wtforms.widgets', 'wtforms.i18n', 'wtforms.utils', 'wtforms.fields.core', 'wtforms.fields.simple', 'wtforms.fields', 'wtforms.meta', 'wtforms.form', 'wtforms', 'gettext', 'flask_mongoengine.wtf.fields', 'wtforms.csrf', 'wtforms.csrf.core', 'flask_wtf._compat', 'flask_wtf.csrf', 'flask_wtf.form', 'flask_wtf.recaptcha.widgets', 'flask_wtf.recaptcha.validators', 'flask_wtf.recaptcha.fields', 'flask_wtf.recaptcha', 'flask_wtf', 'flask_mongoengine.wtf.models', 'flask_mongoengine.wtf.orm', 'flask_mongoengine.wtf', 'flask_mongoengine', 'app.models', 'app.config', 'app', 'cachelib._compat', 'cachelib.base', 'cachelib.simple', 'cachelib.file', 'cachelib.memcached', 'cachelib.redis', 'cachelib.uwsgi', 'cachelib', 'app.apis', 'botocore', 'shlex', 'botocore.vendored', 'botocore.vendored.six', 'botocore.vendored.requests.packages.urllib3.exceptions', 'botocore.vendored.requests.packages.urllib3', 'botocore.vendored.requests.packages', 'botocore.vendored.requests.exceptions', 'botocore.vendored.requests', 'botocore.exceptions', 'botocore.vendored.six.moves', 'xml.etree.cElementTree', 'botocore.compat', 'botocore.configloader', 'getpass', 'cgi', 'botocore.vendored.six.moves.urllib_parse', 'botocore.httpsession', 'botocore.vendored.six.moves.urllib', 'botocore.vendored.six.moves.urllib.request', 'botocore.utils', 'botocore.awsrequest', 'botocore.hooks', 'botocore.history', 'botocore.eventstream', 'botocore.parsers', 'botocore.response', 'botocore.endpoint', 'botocore.config', 'botocore.credentials', 'jmespath.compat', 'jmespath.exceptions', 'jmespath.lexer', 'jmespath.ast', 'jmespath.functions', 'jmespath.visitor', 'jmespath.parser', 'jmespath', 'botocore.docs.utils', 'botocore.docs.shape', 'botocore.docs.params', 'botocore.docs.example', 'botocore.docs.method', 'botocore.docs.sharedexample', 'botocore.docs.client', 'botocore.docs.waiter', 'botocore.docs.paginator', 'botocore.docs.bcdoc', '_markupbase', 'html.parser', 'botocore.docs.bcdoc.docstringparser', 'botocore.docs.bcdoc.style', 'botocore.docs.bcdoc.restdoc', 'botocore.docs.service', 'botocore.docs', 'botocore.docs.docstring', 'botocore.waiter', 'botocore.validate', 'botocore.serialize', 'botocore.auth', 'botocore.signers', 'botocore.args', 'botocore.model', 'botocore.paginate', 'botocore.discovery', 'botocore.retries', 'botocore.retries.quota', 'botocore.retries.base', 'botocore.retries.special', 'botocore.retries.standard', 'botocore.retries.bucket', 'botocore.retries.throttling', 'botocore.retries.adaptive', 'botocore.client', 'botocore.configprovider', 'botocore.errorfactory', 'botocore.retryhandler', 'botocore.translate', 'botocore.handlers', 'botocore.loaders', 'botocore.regions', 'botocore.monitoring', 'botocore.session', 'boto3.utils', 'boto3.exceptions', 'boto3.resources', 'boto3.resources.params', 'boto3.resources.response', 'boto3.resources.model', 'boto3.docs.client', 'boto3.docs.base', 'boto3.docs.method', 'boto3.docs.utils', 'boto3.docs.action', 'boto3.docs.waiter', 'boto3.docs.collection', 'boto3.docs.subresource', 'boto3.docs.attr', 'boto3.docs.resource', 'boto3.docs.service', 'boto3.docs', 'boto3.docs.docstring', 'boto3.resources.action', 'boto3.resources.base', 'boto3.resources.collection', 'boto3.resources.factory', 'boto3.session', 'boto3.compat', 'boto3', '_csv', 'csv', 'app.apis.utils', 'app.apis.s3_methods', 'app.apis.notif_methods', 'email.mime', 'email._header_value_parser', 'email.headerregistry', 'email.contentmanager', 'email.policy', 'email.mime.base', 'email.mime.multipart', 'email.mime.nonmultipart', 'email.mime.text', 'email.generator', 'smtplib', 'app.apis.email_methods', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'glob', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'cython_runtime', '_cython_0_29_21', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas.compat', 'distutils', 'distutils.version', 'pandas.compat.numpy', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.dtypes.missing', 'pandas.util._decorators', 'pandas.core.util', 'pandas._libs.hashing', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas._libs.ops', 'pandas.core.ops.roperator', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.sorting', 'pandas.core.arrays.base', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.numeric', 'pandas.core.arrays.floating', 'pandas.core.arrays.integer', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'gc', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'gzip', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.generic', 'pandas.core.internals.construction', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.engines', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.api', 'pandas.util._tester', 'cmath', 'pandas._libs.testing', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'matplotlib._animation_data', 'matplotlib.animation', 'PIL.ImageChops', 'PIL.ImageFile', 'array', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'dateutil.rrule', 'matplotlib.units', 'matplotlib.dates']
2021-04-09 05:50:46,547 DEBUG matplotlib MainThread : CACHEDIR=C:\Users\ishaa\.matplotlib
2021-04-09 05:50:46,550 DEBUG matplotlib.font_manager MainThread : Using fontManager instance from C:\Users\ishaa\.matplotlib\fontlist-v330.json
2021-04-09 05:50:46,660 DEBUG matplotlib.pyplot MainThread : Loaded backend tkagg version unknown.
2021-04-09 05:50:46,661 DEBUG matplotlib.pyplot MainThread : Loaded backend TkAgg version unknown.
2021-04-09 05:50:46,805 INFO werkzeug MainThread :  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
2021-04-09 05:51:17,371 INFO werkzeug Thread-1 : 127.0.0.1 - - [09/Apr/2021 05:51:17] "[37mOPTIONS /login HTTP/1.1[0m" 200 -
2021-04-09 05:51:20,821 INFO logger Thread-3 : ishaannair is attemping to log in
2021-04-09 05:51:20,825 INFO werkzeug Thread-3 : 127.0.0.1 - - [09/Apr/2021 05:51:20] "[37mPOST /login HTTP/1.1[0m" 200 -
2021-04-09 05:51:24,294 INFO werkzeug Thread-4 : 127.0.0.1 - - [09/Apr/2021 05:51:24] "[37mGET /staff_get_photo_notification HTTP/1.1[0m" 200 -
2021-04-09 05:51:28,786 INFO werkzeug Thread-5 : 127.0.0.1 - - [09/Apr/2021 05:51:28] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 05:51:29,627 INFO werkzeug Thread-6 : 127.0.0.1 - - [09/Apr/2021 05:51:29] "[37mGET /tenant_list_non_FB HTTP/1.1[0m" 200 -
2021-04-09 05:51:29,942 INFO werkzeug Thread-8 : 127.0.0.1 - - [09/Apr/2021 05:51:29] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 05:51:29,943 INFO werkzeug Thread-7 : 127.0.0.1 - - [09/Apr/2021 05:51:29] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 05:55:48,328 INFO werkzeug Thread-9 : 127.0.0.1 - - [09/Apr/2021 05:55:48] "[37mGET /staff_get_photo_notification HTTP/1.1[0m" 200 -
2021-04-09 05:55:51,301 INFO werkzeug Thread-10 : 127.0.0.1 - - [09/Apr/2021 05:55:51] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 05:55:53,415 INFO werkzeug Thread-11 : 127.0.0.1 - - [09/Apr/2021 05:55:53] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 05:55:53,417 INFO werkzeug Thread-13 : 127.0.0.1 - - [09/Apr/2021 05:55:53] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 05:55:53,418 INFO werkzeug Thread-12 : 127.0.0.1 - - [09/Apr/2021 05:55:53] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 05:55:56,110 INFO werkzeug Thread-14 : 127.0.0.1 - - [09/Apr/2021 05:55:56] "[37mGET /tenant_list_FB HTTP/1.1[0m" 200 -
2021-04-09 05:55:56,418 INFO werkzeug Thread-16 : 127.0.0.1 - - [09/Apr/2021 05:55:56] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 05:55:56,421 INFO werkzeug Thread-15 : 127.0.0.1 - - [09/Apr/2021 05:55:56] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 05:55:57,699 INFO werkzeug Thread-19 : 127.0.0.1 - - [09/Apr/2021 05:55:57] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 05:55:57,701 INFO werkzeug Thread-18 : 127.0.0.1 - - [09/Apr/2021 05:55:57] "[37mGET /tenant_list_non_FB HTTP/1.1[0m" 200 -
2021-04-09 05:55:57,702 INFO werkzeug Thread-17 : 127.0.0.1 - - [09/Apr/2021 05:55:57] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 05:56:56,200 INFO werkzeug Thread-21 : 127.0.0.1 - - [09/Apr/2021 05:56:56] "[37mOPTIONS /login HTTP/1.1[0m" 200 -
2021-04-09 05:56:59,776 INFO logger Thread-23 : ishaannair is attemping to log in
2021-04-09 05:56:59,784 INFO werkzeug Thread-23 : 127.0.0.1 - - [09/Apr/2021 05:56:59] "[37mPOST /login HTTP/1.1[0m" 200 -
2021-04-09 05:57:03,112 INFO werkzeug Thread-24 : 127.0.0.1 - - [09/Apr/2021 05:57:03] "[37mGET /staff_get_photo_notification HTTP/1.1[0m" 200 -
2021-04-09 05:57:07,611 INFO werkzeug Thread-25 : 127.0.0.1 - - [09/Apr/2021 05:57:07] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 05:57:08,426 INFO werkzeug Thread-26 : 127.0.0.1 - - [09/Apr/2021 05:57:08] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 05:57:08,742 INFO werkzeug Thread-28 : 127.0.0.1 - - [09/Apr/2021 05:57:08] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 05:57:08,742 INFO werkzeug Thread-27 : 127.0.0.1 - - [09/Apr/2021 05:57:08] "[37mGET /tenant_list_non_FB HTTP/1.1[0m" 200 -
2021-04-09 05:58:21,383 INFO werkzeug Thread-30 : 127.0.0.1 - - [09/Apr/2021 05:58:21] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 05:58:21,383 INFO werkzeug Thread-29 : 127.0.0.1 - - [09/Apr/2021 05:58:21] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 05:58:23,746 INFO werkzeug Thread-31 : 127.0.0.1 - - [09/Apr/2021 05:58:23] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 05:58:24,056 INFO werkzeug Thread-32 : 127.0.0.1 - - [09/Apr/2021 05:58:24] "[37mOPTIONS /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 05:58:24,057 INFO werkzeug Thread-33 : 127.0.0.1 - - [09/Apr/2021 05:58:24] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 05:58:24,057 INFO werkzeug Thread-34 : 127.0.0.1 - - [09/Apr/2021 05:58:24] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 05:58:24,384 INFO werkzeug Thread-36 : 127.0.0.1 - - [09/Apr/2021 05:58:24] "[37mPOST /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 05:58:42,645 INFO werkzeug Thread-37 : 127.0.0.1 - - [09/Apr/2021 05:58:42] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 05:58:43,191 INFO werkzeug Thread-35 : 127.0.0.1 - - [09/Apr/2021 05:58:43] "[37mOPTIONS /download_file HTTP/1.1[0m" 200 -
2021-04-09 05:58:43,198 DEBUG botocore.hooks Thread-38 : Changing event name from creating-client-class.iot-data to creating-client-class.iot-data-plane
2021-04-09 05:58:43,199 DEBUG botocore.hooks Thread-38 : Changing event name from before-call.apigateway to before-call.api-gateway
2021-04-09 05:58:43,200 DEBUG botocore.hooks Thread-38 : Changing event name from request-created.machinelearning.Predict to request-created.machine-learning.Predict
2021-04-09 05:58:43,201 DEBUG botocore.hooks Thread-38 : Changing event name from before-parameter-build.autoscaling.CreateLaunchConfiguration to before-parameter-build.auto-scaling.CreateLaunchConfiguration
2021-04-09 05:58:43,201 DEBUG botocore.hooks Thread-38 : Changing event name from before-parameter-build.route53 to before-parameter-build.route-53
2021-04-09 05:58:43,201 DEBUG botocore.hooks Thread-38 : Changing event name from request-created.cloudsearchdomain.Search to request-created.cloudsearch-domain.Search
2021-04-09 05:58:43,202 DEBUG botocore.hooks Thread-38 : Changing event name from docs.*.autoscaling.CreateLaunchConfiguration.complete-section to docs.*.auto-scaling.CreateLaunchConfiguration.complete-section
2021-04-09 05:58:43,204 DEBUG botocore.hooks Thread-38 : Changing event name from before-parameter-build.logs.CreateExportTask to before-parameter-build.cloudwatch-logs.CreateExportTask
2021-04-09 05:58:43,204 DEBUG botocore.hooks Thread-38 : Changing event name from docs.*.logs.CreateExportTask.complete-section to docs.*.cloudwatch-logs.CreateExportTask.complete-section
2021-04-09 05:58:43,204 DEBUG botocore.hooks Thread-38 : Changing event name from before-parameter-build.cloudsearchdomain.Search to before-parameter-build.cloudsearch-domain.Search
2021-04-09 05:58:43,204 DEBUG botocore.hooks Thread-38 : Changing event name from docs.*.cloudsearchdomain.Search.complete-section to docs.*.cloudsearch-domain.Search.complete-section
2021-04-09 05:58:43,205 DEBUG botocore.utils Thread-38 : IMDS ENDPOINT: http://169.254.169.254/
2021-04-09 05:58:43,207 DEBUG botocore.credentials Thread-38 : Looking for credentials via: env
2021-04-09 05:58:43,207 DEBUG botocore.credentials Thread-38 : Looking for credentials via: assume-role
2021-04-09 05:58:43,207 DEBUG botocore.credentials Thread-38 : Looking for credentials via: assume-role-with-web-identity
2021-04-09 05:58:43,207 DEBUG botocore.credentials Thread-38 : Looking for credentials via: sso
2021-04-09 05:58:43,207 DEBUG botocore.credentials Thread-38 : Looking for credentials via: shared-credentials-file
2021-04-09 05:58:43,207 DEBUG botocore.credentials Thread-38 : Looking for credentials via: custom-process
2021-04-09 05:58:43,207 DEBUG botocore.credentials Thread-38 : Looking for credentials via: config-file
2021-04-09 05:58:43,207 DEBUG botocore.credentials Thread-38 : Looking for credentials via: ec2-credentials-file
2021-04-09 05:58:43,207 DEBUG botocore.credentials Thread-38 : Looking for credentials via: boto-config
2021-04-09 05:58:43,207 DEBUG botocore.credentials Thread-38 : Looking for credentials via: container-role
2021-04-09 05:58:43,207 DEBUG botocore.credentials Thread-38 : Looking for credentials via: iam-role
2021-04-09 05:58:43,208 DEBUG urllib3.connectionpool Thread-38 : Starting new HTTP connection (1): 169.254.169.254:80
2021-04-09 05:58:43,231 DEBUG botocore.utils Thread-38 : Caught retryable HTTP exception while making metadata service request to http://169.254.169.254/latest/api/token: Could not connect to the endpoint URL: "http://169.254.169.254/latest/api/token"
Traceback (most recent call last):
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 159, in _new_conn
    conn = connection.create_connection(
  File "C:\Python39\lib\site-packages\urllib3\util\connection.py", line 84, in create_connection
    raise err
  File "C:\Python39\lib\site-packages\urllib3\util\connection.py", line 74, in create_connection
    sock.connect(sa)
OSError: [WinError 10051] A socket operation was attempted to an unreachable network

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\httpsession.py", line 311, in send
    urllib_response = conn.urlopen(
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 726, in urlopen
    retries = retries.increment(
  File "C:\Python39\lib\site-packages\urllib3\util\retry.py", line 386, in increment
    raise six.reraise(type(error), error, _stacktrace)
  File "C:\Python39\lib\site-packages\urllib3\packages\six.py", line 735, in reraise
    raise value
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 670, in urlopen
    httplib_response = self._make_request(
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 392, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Python39\lib\http\client.py", line 1255, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 92, in _send_request
    rval = super(AWSConnection, self)._send_request(
  File "C:\Python39\lib\http\client.py", line 1301, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Python39\lib\http\client.py", line 1250, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 120, in _send_output
    self.send(msg)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 204, in send
    return super(AWSConnection, self).send(str)
  File "C:\Python39\lib\http\client.py", line 950, in send
    self.connect()
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 187, in connect
    conn = self._new_conn()
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 171, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x000002CBD219AF40>: Failed to establish a new connection: [WinError 10051] A socket operation was attempted to an unreachable network

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\utils.py", line 377, in _fetch_metadata_token
    response = self._session.send(request.prepare())
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\httpsession.py", line 340, in send
    raise EndpointConnectionError(endpoint_url=request.url, error=e)
botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://169.254.169.254/latest/api/token"
2021-04-09 05:58:43,234 DEBUG urllib3.connectionpool Thread-38 : Starting new HTTP connection (2): 169.254.169.254:80
2021-04-09 05:58:43,247 DEBUG botocore.utils Thread-38 : Caught retryable HTTP exception while making metadata service request to http://169.254.169.254/latest/meta-data/iam/security-credentials/: Could not connect to the endpoint URL: "http://169.254.169.254/latest/meta-data/iam/security-credentials/"
Traceback (most recent call last):
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 159, in _new_conn
    conn = connection.create_connection(
  File "C:\Python39\lib\site-packages\urllib3\util\connection.py", line 84, in create_connection
    raise err
  File "C:\Python39\lib\site-packages\urllib3\util\connection.py", line 74, in create_connection
    sock.connect(sa)
OSError: [WinError 10051] A socket operation was attempted to an unreachable network

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\httpsession.py", line 311, in send
    urllib_response = conn.urlopen(
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 726, in urlopen
    retries = retries.increment(
  File "C:\Python39\lib\site-packages\urllib3\util\retry.py", line 386, in increment
    raise six.reraise(type(error), error, _stacktrace)
  File "C:\Python39\lib\site-packages\urllib3\packages\six.py", line 735, in reraise
    raise value
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 670, in urlopen
    httplib_response = self._make_request(
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 392, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Python39\lib\http\client.py", line 1255, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 92, in _send_request
    rval = super(AWSConnection, self)._send_request(
  File "C:\Python39\lib\http\client.py", line 1301, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Python39\lib\http\client.py", line 1250, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 120, in _send_output
    self.send(msg)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 204, in send
    return super(AWSConnection, self).send(str)
  File "C:\Python39\lib\http\client.py", line 950, in send
    self.connect()
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 187, in connect
    conn = self._new_conn()
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 171, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x000002CBD21AA490>: Failed to establish a new connection: [WinError 10051] A socket operation was attempted to an unreachable network

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\utils.py", line 425, in _get_request
    response = self._session.send(request.prepare())
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\httpsession.py", line 340, in send
    raise EndpointConnectionError(endpoint_url=request.url, error=e)
botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://169.254.169.254/latest/meta-data/iam/security-credentials/"
2021-04-09 05:58:43,247 DEBUG botocore.utils Thread-38 : Max number of attempts exceeded (1) when attempting to retrieve data from metadata service.
2021-04-09 05:58:43,249 DEBUG botocore.loaders Thread-38 : Loading JSON file: C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\data\endpoints.json
2021-04-09 05:58:43,254 DEBUG botocore.hooks Thread-38 : Event choose-service-name: calling handler <function handle_service_name_alias at 0x000002CBC0F0F9D0>
2021-04-09 05:58:43,294 DEBUG botocore.loaders Thread-38 : Loading JSON file: C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\data\s3\2006-03-01\service-2.json
2021-04-09 05:58:43,301 DEBUG botocore.hooks Thread-38 : Event creating-client-class.s3: calling handler <function add_generate_presigned_post at 0x000002CBC0EC04C0>
2021-04-09 05:58:43,301 DEBUG botocore.hooks Thread-38 : Event creating-client-class.s3: calling handler <function lazy_call.<locals>._handler at 0x000002CBD210CB80>
2021-04-09 05:58:43,341 DEBUG botocore.hooks Thread-38 : Event creating-client-class.s3: calling handler <function add_generate_presigned_url at 0x000002CBC0EC0280>
2021-04-09 05:58:43,343 DEBUG botocore.endpoint Thread-38 : Setting s3 timeout as (60, 60)
2021-04-09 05:58:43,344 DEBUG botocore.loaders Thread-38 : Loading JSON file: C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\data\_retry.json
2021-04-09 05:58:43,344 DEBUG botocore.client Thread-38 : Registering retry handlers for service: s3
2021-04-09 05:58:43,345 DEBUG botocore.hooks Thread-38 : Event before-parameter-build.s3.ListObjects: calling handler <function set_list_objects_encoding_type_url at 0x000002CBC0F2F5E0>
2021-04-09 05:58:43,345 DEBUG botocore.hooks Thread-38 : Event before-parameter-build.s3.ListObjects: calling handler <function validate_bucket_name at 0x000002CBC0F2E310>
2021-04-09 05:58:43,345 DEBUG botocore.hooks Thread-38 : Event before-parameter-build.s3.ListObjects: calling handler <bound method S3RegionRedirector.redirect_from_cache of <botocore.utils.S3RegionRedirector object at 0x000002CBD25D5460>>
2021-04-09 05:58:43,345 DEBUG botocore.hooks Thread-38 : Event before-parameter-build.s3.ListObjects: calling handler <bound method S3ArnParamHandler.handle_arn of <botocore.utils.S3ArnParamHandler object at 0x000002CBD25D5490>>
2021-04-09 05:58:43,345 DEBUG botocore.hooks Thread-38 : Event before-parameter-build.s3.ListObjects: calling handler <function generate_idempotent_uuid at 0x000002CBC0F2E160>
2021-04-09 05:58:43,346 DEBUG botocore.hooks Thread-38 : Event before-call.s3.ListObjects: calling handler <function add_expect_header at 0x000002CBC0F2E670>
2021-04-09 05:58:43,346 DEBUG botocore.hooks Thread-38 : Event before-call.s3.ListObjects: calling handler <bound method S3RegionRedirector.set_request_url of <botocore.utils.S3RegionRedirector object at 0x000002CBD25D5460>>
2021-04-09 05:58:43,346 DEBUG botocore.hooks Thread-38 : Event before-call.s3.ListObjects: calling handler <function inject_api_version_header_if_needed at 0x000002CBC0F2F9D0>
2021-04-09 05:58:43,346 DEBUG botocore.endpoint Thread-38 : Making request for OperationModel(name=ListObjects) with params: {'url_path': '/escapp-bucket-dev', 'query_string': {'encoding-type': 'url'}, 'method': 'GET', 'headers': {'User-Agent': 'Boto3/1.17.18 Python/3.9.1 Windows/10 Botocore/1.20.18'}, 'body': b'', 'url': 'https://s3.amazonaws.com/escapp-bucket-dev?encoding-type=url', 'context': {'client_region': 'us-east-1', 'client_config': <botocore.config.Config object at 0x000002CBD27AA4F0>, 'has_streaming_input': False, 'auth_type': None, 'encoding_type_auto_set': True, 'signing': {'bucket': 'escapp-bucket-dev'}}}
2021-04-09 05:58:43,346 DEBUG botocore.hooks Thread-38 : Event request-created.s3.ListObjects: calling handler <bound method RequestSigner.handler of <botocore.signers.RequestSigner object at 0x000002CBD27AA430>>
2021-04-09 05:58:43,346 DEBUG botocore.hooks Thread-38 : Event choose-signer.s3.ListObjects: calling handler <bound method ClientCreator._default_s3_presign_to_sigv2 of <botocore.client.ClientCreator object at 0x000002CBD2171A90>>
2021-04-09 05:58:43,346 DEBUG botocore.hooks Thread-38 : Event choose-signer.s3.ListObjects: calling handler <function set_operation_specific_signer at 0x000002CBC0F2E040>
2021-04-09 05:58:43,346 DEBUG botocore.hooks Thread-38 : Event before-sign.s3.ListObjects: calling handler <bound method S3EndpointSetter.set_endpoint of <botocore.utils.S3EndpointSetter object at 0x000002CBD25D5550>>
2021-04-09 05:58:43,346 DEBUG botocore.utils Thread-38 : Defaulting to S3 virtual host style addressing with path style addressing fallback.
2021-04-09 05:58:43,346 DEBUG botocore.utils Thread-38 : Checking for DNS compatible bucket for: https://s3.amazonaws.com/escapp-bucket-dev?encoding-type=url
2021-04-09 05:58:43,347 DEBUG botocore.utils Thread-38 : URI updated to: https://escapp-bucket-dev.s3.amazonaws.com/?encoding-type=url
2021-04-09 05:58:43,373 INFO werkzeug Thread-38 : 127.0.0.1 - - [09/Apr/2021 05:58:43] "[35m[1mPOST /download_file HTTP/1.1[0m" 500 -
2021-04-09 05:58:44,626 DEBUG botocore.credentials Thread-39 : Looking for credentials via: env
2021-04-09 05:58:44,627 DEBUG botocore.credentials Thread-39 : Looking for credentials via: assume-role
2021-04-09 05:58:44,627 DEBUG botocore.credentials Thread-39 : Looking for credentials via: assume-role-with-web-identity
2021-04-09 05:58:44,627 DEBUG botocore.credentials Thread-39 : Looking for credentials via: sso
2021-04-09 05:58:44,627 DEBUG botocore.credentials Thread-39 : Looking for credentials via: shared-credentials-file
2021-04-09 05:58:44,627 DEBUG botocore.credentials Thread-39 : Looking for credentials via: custom-process
2021-04-09 05:58:44,627 DEBUG botocore.credentials Thread-39 : Looking for credentials via: config-file
2021-04-09 05:58:44,627 DEBUG botocore.credentials Thread-39 : Looking for credentials via: ec2-credentials-file
2021-04-09 05:58:44,627 DEBUG botocore.credentials Thread-39 : Looking for credentials via: boto-config
2021-04-09 05:58:44,627 DEBUG botocore.credentials Thread-39 : Looking for credentials via: container-role
2021-04-09 05:58:44,627 DEBUG botocore.credentials Thread-39 : Looking for credentials via: iam-role
2021-04-09 05:58:44,627 DEBUG urllib3.connectionpool Thread-39 : Starting new HTTP connection (3): 169.254.169.254:80
2021-04-09 05:58:44,650 DEBUG botocore.utils Thread-39 : Caught retryable HTTP exception while making metadata service request to http://169.254.169.254/latest/api/token: Could not connect to the endpoint URL: "http://169.254.169.254/latest/api/token"
Traceback (most recent call last):
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 159, in _new_conn
    conn = connection.create_connection(
  File "C:\Python39\lib\site-packages\urllib3\util\connection.py", line 84, in create_connection
    raise err
  File "C:\Python39\lib\site-packages\urllib3\util\connection.py", line 74, in create_connection
    sock.connect(sa)
OSError: [WinError 10051] A socket operation was attempted to an unreachable network

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\httpsession.py", line 311, in send
    urllib_response = conn.urlopen(
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 726, in urlopen
    retries = retries.increment(
  File "C:\Python39\lib\site-packages\urllib3\util\retry.py", line 386, in increment
    raise six.reraise(type(error), error, _stacktrace)
  File "C:\Python39\lib\site-packages\urllib3\packages\six.py", line 735, in reraise
    raise value
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 670, in urlopen
    httplib_response = self._make_request(
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 392, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Python39\lib\http\client.py", line 1255, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 92, in _send_request
    rval = super(AWSConnection, self)._send_request(
  File "C:\Python39\lib\http\client.py", line 1301, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Python39\lib\http\client.py", line 1250, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 120, in _send_output
    self.send(msg)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 204, in send
    return super(AWSConnection, self).send(str)
  File "C:\Python39\lib\http\client.py", line 950, in send
    self.connect()
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 187, in connect
    conn = self._new_conn()
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 171, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x000002CBD259BBE0>: Failed to establish a new connection: [WinError 10051] A socket operation was attempted to an unreachable network

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\utils.py", line 377, in _fetch_metadata_token
    response = self._session.send(request.prepare())
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\httpsession.py", line 340, in send
    raise EndpointConnectionError(endpoint_url=request.url, error=e)
botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://169.254.169.254/latest/api/token"
2021-04-09 05:58:44,651 DEBUG urllib3.connectionpool Thread-39 : Starting new HTTP connection (4): 169.254.169.254:80
2021-04-09 05:58:44,667 DEBUG botocore.utils Thread-39 : Caught retryable HTTP exception while making metadata service request to http://169.254.169.254/latest/meta-data/iam/security-credentials/: Could not connect to the endpoint URL: "http://169.254.169.254/latest/meta-data/iam/security-credentials/"
Traceback (most recent call last):
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 159, in _new_conn
    conn = connection.create_connection(
  File "C:\Python39\lib\site-packages\urllib3\util\connection.py", line 84, in create_connection
    raise err
  File "C:\Python39\lib\site-packages\urllib3\util\connection.py", line 74, in create_connection
    sock.connect(sa)
OSError: [WinError 10051] A socket operation was attempted to an unreachable network

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\httpsession.py", line 311, in send
    urllib_response = conn.urlopen(
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 726, in urlopen
    retries = retries.increment(
  File "C:\Python39\lib\site-packages\urllib3\util\retry.py", line 386, in increment
    raise six.reraise(type(error), error, _stacktrace)
  File "C:\Python39\lib\site-packages\urllib3\packages\six.py", line 735, in reraise
    raise value
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 670, in urlopen
    httplib_response = self._make_request(
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 392, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Python39\lib\http\client.py", line 1255, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 92, in _send_request
    rval = super(AWSConnection, self)._send_request(
  File "C:\Python39\lib\http\client.py", line 1301, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Python39\lib\http\client.py", line 1250, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 120, in _send_output
    self.send(msg)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 204, in send
    return super(AWSConnection, self).send(str)
  File "C:\Python39\lib\http\client.py", line 950, in send
    self.connect()
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 187, in connect
    conn = self._new_conn()
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 171, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x000002CBD25D5130>: Failed to establish a new connection: [WinError 10051] A socket operation was attempted to an unreachable network

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\utils.py", line 425, in _get_request
    response = self._session.send(request.prepare())
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\httpsession.py", line 340, in send
    raise EndpointConnectionError(endpoint_url=request.url, error=e)
botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://169.254.169.254/latest/meta-data/iam/security-credentials/"
2021-04-09 05:58:44,667 DEBUG botocore.utils Thread-39 : Max number of attempts exceeded (1) when attempting to retrieve data from metadata service.
2021-04-09 05:58:44,668 DEBUG botocore.hooks Thread-39 : Event choose-service-name: calling handler <function handle_service_name_alias at 0x000002CBC0F0F9D0>
2021-04-09 05:58:44,669 DEBUG botocore.hooks Thread-39 : Event creating-client-class.s3: calling handler <function add_generate_presigned_post at 0x000002CBC0EC04C0>
2021-04-09 05:58:44,669 DEBUG botocore.hooks Thread-39 : Event creating-client-class.s3: calling handler <function lazy_call.<locals>._handler at 0x000002CBD210CB80>
2021-04-09 05:58:44,669 DEBUG botocore.hooks Thread-39 : Event creating-client-class.s3: calling handler <function add_generate_presigned_url at 0x000002CBC0EC0280>
2021-04-09 05:58:44,671 DEBUG botocore.endpoint Thread-39 : Setting s3 timeout as (60, 60)
2021-04-09 05:58:44,672 DEBUG botocore.client Thread-39 : Registering retry handlers for service: s3
2021-04-09 05:58:44,673 DEBUG botocore.hooks Thread-39 : Event before-parameter-build.s3.ListObjects: calling handler <function set_list_objects_encoding_type_url at 0x000002CBC0F2F5E0>
2021-04-09 05:58:44,673 DEBUG botocore.hooks Thread-39 : Event before-parameter-build.s3.ListObjects: calling handler <function validate_bucket_name at 0x000002CBC0F2E310>
2021-04-09 05:58:44,674 DEBUG botocore.hooks Thread-39 : Event before-parameter-build.s3.ListObjects: calling handler <bound method S3RegionRedirector.redirect_from_cache of <botocore.utils.S3RegionRedirector object at 0x000002CBD2931070>>
2021-04-09 05:58:44,674 DEBUG botocore.hooks Thread-39 : Event before-parameter-build.s3.ListObjects: calling handler <bound method S3ArnParamHandler.handle_arn of <botocore.utils.S3ArnParamHandler object at 0x000002CBD29310A0>>
2021-04-09 05:58:44,674 DEBUG botocore.hooks Thread-39 : Event before-parameter-build.s3.ListObjects: calling handler <function generate_idempotent_uuid at 0x000002CBC0F2E160>
2021-04-09 05:58:44,674 DEBUG botocore.hooks Thread-39 : Event before-call.s3.ListObjects: calling handler <function add_expect_header at 0x000002CBC0F2E670>
2021-04-09 05:58:44,674 DEBUG botocore.hooks Thread-39 : Event before-call.s3.ListObjects: calling handler <bound method S3RegionRedirector.set_request_url of <botocore.utils.S3RegionRedirector object at 0x000002CBD2931070>>
2021-04-09 05:58:44,674 DEBUG botocore.hooks Thread-39 : Event before-call.s3.ListObjects: calling handler <function inject_api_version_header_if_needed at 0x000002CBC0F2F9D0>
2021-04-09 05:58:44,674 DEBUG botocore.endpoint Thread-39 : Making request for OperationModel(name=ListObjects) with params: {'url_path': '/escapp-bucket-dev-tenant', 'query_string': {'encoding-type': 'url'}, 'method': 'GET', 'headers': {'User-Agent': 'Boto3/1.17.18 Python/3.9.1 Windows/10 Botocore/1.20.18'}, 'body': b'', 'url': 'https://s3.amazonaws.com/escapp-bucket-dev-tenant?encoding-type=url', 'context': {'client_region': 'us-east-1', 'client_config': <botocore.config.Config object at 0x000002CBD291C580>, 'has_streaming_input': False, 'auth_type': None, 'encoding_type_auto_set': True, 'signing': {'bucket': 'escapp-bucket-dev-tenant'}}}
2021-04-09 05:58:44,675 DEBUG botocore.hooks Thread-39 : Event request-created.s3.ListObjects: calling handler <bound method RequestSigner.handler of <botocore.signers.RequestSigner object at 0x000002CBD291C4F0>>
2021-04-09 05:58:44,675 DEBUG botocore.hooks Thread-39 : Event choose-signer.s3.ListObjects: calling handler <bound method ClientCreator._default_s3_presign_to_sigv2 of <botocore.client.ClientCreator object at 0x000002CBD27AA430>>
2021-04-09 05:58:44,675 DEBUG botocore.hooks Thread-39 : Event choose-signer.s3.ListObjects: calling handler <function set_operation_specific_signer at 0x000002CBC0F2E040>
2021-04-09 05:58:44,675 DEBUG botocore.hooks Thread-39 : Event before-sign.s3.ListObjects: calling handler <bound method S3EndpointSetter.set_endpoint of <botocore.utils.S3EndpointSetter object at 0x000002CBD2931160>>
2021-04-09 05:58:44,675 DEBUG botocore.utils Thread-39 : Defaulting to S3 virtual host style addressing with path style addressing fallback.
2021-04-09 05:58:44,675 DEBUG botocore.utils Thread-39 : Checking for DNS compatible bucket for: https://s3.amazonaws.com/escapp-bucket-dev-tenant?encoding-type=url
2021-04-09 05:58:44,675 DEBUG botocore.utils Thread-39 : URI updated to: https://escapp-bucket-dev-tenant.s3.amazonaws.com/?encoding-type=url
2021-04-09 05:58:44,698 INFO werkzeug Thread-39 : 127.0.0.1 - - [09/Apr/2021 05:58:44] "[35m[1mPOST /download_file HTTP/1.1[0m" 500 -
2021-04-09 05:58:52,371 INFO werkzeug Thread-40 : 127.0.0.1 - - [09/Apr/2021 05:58:52] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 05:59:05,625 INFO werkzeug Thread-41 : 127.0.0.1 - - [09/Apr/2021 05:59:05] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 05:59:07,211 ERROR app Thread-42 : Exception on /upload_file [POST]
Traceback (most recent call last):
  File "C:\Python39\lib\site-packages\flask\app.py", line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Python39\lib\site-packages\flask\app.py", line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Python39\lib\site-packages\flask_cors\extension.py", line 165, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File "C:\Python39\lib\site-packages\flask\app.py", line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "C:\Python39\lib\site-packages\flask\_compat.py", line 39, in reraise
    raise value
  File "C:\Python39\lib\site-packages\flask\app.py", line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Python39\lib\site-packages\flask\app.py", line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "C:\Python39\lib\site-packages\flask_cors\decorator.py", line 128, in wrapped_function
    resp = make_response(f(*args, **kwargs))
  File "C:\Users\ishaa\Documents\GitHub\escapp\backend\app\apis\__init__.py", line 295, in upload_file
    img = Image.open(body.stream)
AttributeError: type object 'Image' has no attribute 'open'
2021-04-09 05:59:07,219 INFO werkzeug Thread-42 : 127.0.0.1 - - [09/Apr/2021 05:59:07] "[35m[1mPOST /upload_file HTTP/1.1[0m" 500 -
2021-04-09 05:59:07,470 INFO werkzeug Thread-43 : 127.0.0.1 - - [09/Apr/2021 05:59:07] "[37mOPTIONS /upload_photo_info HTTP/1.1[0m" 200 -
2021-04-09 05:59:09,949 INFO werkzeug Thread-45 : 127.0.0.1 - - [09/Apr/2021 05:59:09] "[35m[1mPOST /upload_photo_info HTTP/1.1[0m" 500 -
2021-04-09 06:01:52,690 INFO werkzeug Thread-48 : 127.0.0.1 - - [09/Apr/2021 06:01:52] "[37mGET /tenant_list_non_FB HTTP/1.1[0m" 200 -
2021-04-09 06:01:52,690 INFO werkzeug Thread-47 : 127.0.0.1 - - [09/Apr/2021 06:01:52] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:01:52,692 INFO werkzeug Thread-49 : 127.0.0.1 - - [09/Apr/2021 06:01:52] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 06:01:52,815 INFO werkzeug Thread-52 : 127.0.0.1 - - [09/Apr/2021 06:01:52] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 06:01:52,818 INFO werkzeug Thread-51 : 127.0.0.1 - - [09/Apr/2021 06:01:52] "[37mGET /tenant_list_non_FB HTTP/1.1[0m" 200 -
2021-04-09 06:01:52,818 INFO werkzeug Thread-50 : 127.0.0.1 - - [09/Apr/2021 06:01:52] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:02:05,667 INFO werkzeug Thread-53 : 127.0.0.1 - - [09/Apr/2021 06:02:05] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:02:05,967 INFO werkzeug Thread-56 : 127.0.0.1 - - [09/Apr/2021 06:02:05] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 06:02:05,969 INFO werkzeug Thread-55 : 127.0.0.1 - - [09/Apr/2021 06:02:05] "[37mGET /tenant_list_non_FB HTTP/1.1[0m" 200 -
2021-04-09 06:02:06,430 INFO werkzeug Thread-54 : 127.0.0.1 - - [09/Apr/2021 06:02:06] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:02:06,737 INFO werkzeug Thread-57 : 127.0.0.1 - - [09/Apr/2021 06:02:06] "[37mGET /tenant_list_non_FB HTTP/1.1[0m" 200 -
2021-04-09 06:02:06,738 INFO werkzeug Thread-58 : 127.0.0.1 - - [09/Apr/2021 06:02:06] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 06:02:28,772 INFO werkzeug Thread-59 : 127.0.0.1 - - [09/Apr/2021 06:02:28] "[37mOPTIONS /login HTTP/1.1[0m" 200 -
2021-04-09 06:02:32,273 INFO logger Thread-61 : ishaannair is attemping to log in
2021-04-09 06:02:32,281 INFO werkzeug Thread-61 : 127.0.0.1 - - [09/Apr/2021 06:02:32] "[37mPOST /login HTTP/1.1[0m" 200 -
2021-04-09 06:02:35,664 INFO werkzeug Thread-62 : 127.0.0.1 - - [09/Apr/2021 06:02:35] "[37mGET /staff_get_photo_notification HTTP/1.1[0m" 200 -
2021-04-09 06:02:40,150 INFO werkzeug Thread-63 : 127.0.0.1 - - [09/Apr/2021 06:02:40] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:02:40,976 INFO werkzeug Thread-64 : 127.0.0.1 - - [09/Apr/2021 06:02:40] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:02:41,274 INFO werkzeug Thread-65 : 127.0.0.1 - - [09/Apr/2021 06:02:41] "[37mGET /tenant_list_non_FB HTTP/1.1[0m" 200 -
2021-04-09 06:02:41,274 INFO werkzeug Thread-66 : 127.0.0.1 - - [09/Apr/2021 06:02:41] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 06:03:38,722 INFO werkzeug Thread-69 : 127.0.0.1 - - [09/Apr/2021 06:03:38] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 06:03:38,725 INFO werkzeug Thread-68 : 127.0.0.1 - - [09/Apr/2021 06:03:38] "[37mGET /tenant_list_non_FB HTTP/1.1[0m" 200 -
2021-04-09 06:03:38,725 INFO werkzeug Thread-67 : 127.0.0.1 - - [09/Apr/2021 06:03:38] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:03:38,743 INFO werkzeug Thread-71 : 127.0.0.1 - - [09/Apr/2021 06:03:38] "[37mGET /tenant_list_non_FB HTTP/1.1[0m" 200 -
2021-04-09 06:03:38,749 INFO werkzeug Thread-70 : 127.0.0.1 - - [09/Apr/2021 06:03:38] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:03:38,750 INFO werkzeug Thread-72 : 127.0.0.1 - - [09/Apr/2021 06:03:38] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 06:03:38,762 INFO werkzeug Thread-74 : 127.0.0.1 - - [09/Apr/2021 06:03:38] "[37mGET /tenant_list_non_FB HTTP/1.1[0m" 200 -
2021-04-09 06:03:38,763 INFO werkzeug Thread-73 : 127.0.0.1 - - [09/Apr/2021 06:03:38] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:03:38,764 INFO werkzeug Thread-75 : 127.0.0.1 - - [09/Apr/2021 06:03:38] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 06:03:52,340 INFO werkzeug Thread-79 : 127.0.0.1 - - [09/Apr/2021 06:03:52] "[37mOPTIONS /login HTTP/1.1[0m" 200 -
2021-04-09 06:03:55,553 INFO logger Thread-81 : ishaannair is attemping to log in
2021-04-09 06:03:55,564 INFO werkzeug Thread-81 : 127.0.0.1 - - [09/Apr/2021 06:03:55] "[37mPOST /login HTTP/1.1[0m" 200 -
2021-04-09 06:03:58,733 INFO werkzeug Thread-82 : 127.0.0.1 - - [09/Apr/2021 06:03:58] "[37mGET /staff_get_photo_notification HTTP/1.1[0m" 200 -
2021-04-09 06:04:03,214 INFO werkzeug Thread-83 : 127.0.0.1 - - [09/Apr/2021 06:04:03] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:04:04,041 INFO werkzeug Thread-84 : 127.0.0.1 - - [09/Apr/2021 06:04:04] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:04:04,355 INFO werkzeug Thread-85 : 127.0.0.1 - - [09/Apr/2021 06:04:04] "[37mGET /tenant_list_non_FB HTTP/1.1[0m" 200 -
2021-04-09 06:04:04,358 INFO werkzeug Thread-86 : 127.0.0.1 - - [09/Apr/2021 06:04:04] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 06:04:41,242 INFO werkzeug Thread-87 : 127.0.0.1 - - [09/Apr/2021 06:04:41] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:04:41,242 INFO werkzeug Thread-89 : 127.0.0.1 - - [09/Apr/2021 06:04:41] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 06:04:41,244 INFO werkzeug Thread-88 : 127.0.0.1 - - [09/Apr/2021 06:04:41] "[37mGET /tenant_list_non_FB HTTP/1.1[0m" 200 -
2021-04-09 06:04:41,615 INFO werkzeug Thread-93 : 127.0.0.1 - - [09/Apr/2021 06:04:41] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 06:04:41,619 INFO werkzeug Thread-91 : 127.0.0.1 - - [09/Apr/2021 06:04:41] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:04:41,620 INFO werkzeug Thread-92 : 127.0.0.1 - - [09/Apr/2021 06:04:41] "[37mGET /tenant_list_non_FB HTTP/1.1[0m" 200 -
2021-04-09 06:04:41,635 INFO werkzeug Thread-95 : 127.0.0.1 - - [09/Apr/2021 06:04:41] "[37mGET /tenant_list_non_FB HTTP/1.1[0m" 200 -
2021-04-09 06:04:41,636 INFO werkzeug Thread-94 : 127.0.0.1 - - [09/Apr/2021 06:04:41] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:04:41,646 INFO werkzeug Thread-96 : 127.0.0.1 - - [09/Apr/2021 06:04:41] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 06:04:41,888 INFO werkzeug Thread-99 : 127.0.0.1 - - [09/Apr/2021 06:04:41] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:04:41,891 INFO werkzeug Thread-101 : 127.0.0.1 - - [09/Apr/2021 06:04:41] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 06:04:41,891 INFO werkzeug Thread-100 : 127.0.0.1 - - [09/Apr/2021 06:04:41] "[37mGET /tenant_list_non_FB HTTP/1.1[0m" 200 -
2021-04-09 06:07:48,485 INFO werkzeug Thread-103 : 127.0.0.1 - - [09/Apr/2021 06:07:48] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:08:05,782 INFO werkzeug Thread-105 : 127.0.0.1 - - [09/Apr/2021 06:08:05] "[37mOPTIONS /email HTTP/1.1[0m" 200 -
2021-04-09 06:08:05,788 ERROR app Thread-104 : Exception on /email [POST]
Traceback (most recent call last):
  File "C:\Python39\lib\site-packages\flask\app.py", line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Python39\lib\site-packages\flask\app.py", line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Python39\lib\site-packages\flask_cors\extension.py", line 165, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File "C:\Python39\lib\site-packages\flask\app.py", line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "C:\Python39\lib\site-packages\flask\_compat.py", line 39, in reraise
    raise value
  File "C:\Python39\lib\site-packages\flask\app.py", line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Python39\lib\site-packages\flask\app.py", line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "C:\Python39\lib\site-packages\flask_cors\decorator.py", line 128, in wrapped_function
    resp = make_response(f(*args, **kwargs))
  File "C:\Users\ishaa\Documents\GitHub\escapp\backend\app\apis\__init__.py", line 701, in email
    with apis.open_resource(filename) as attachment:
  File "C:\Python39\lib\site-packages\flask\helpers.py", line 1114, in open_resource
    return open(os.path.join(self.root_path, resource), mode)
FileNotFoundError: [Errno 2] No such file or directory: 'C:\\Users\\ishaa\\Documents\\GitHub\\escapp\\backend\\app\\apis\\picture.png'
2021-04-09 06:08:05,795 INFO werkzeug Thread-104 : 127.0.0.1 - - [09/Apr/2021 06:08:05] "[35m[1mPOST /email HTTP/1.1[0m" 500 -
2021-04-09 06:09:30,062 INFO werkzeug Thread-107 : 127.0.0.1 - - [09/Apr/2021 06:09:30] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:09:33,329 INFO werkzeug Thread-108 : 127.0.0.1 - - [09/Apr/2021 06:09:33] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:09:43,354 INFO werkzeug Thread-109 : 127.0.0.1 - - [09/Apr/2021 06:09:43] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:09:45,074 ERROR app Thread-110 : Exception on /upload_file [POST]
Traceback (most recent call last):
  File "C:\Python39\lib\site-packages\flask\app.py", line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Python39\lib\site-packages\flask\app.py", line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Python39\lib\site-packages\flask_cors\extension.py", line 165, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File "C:\Python39\lib\site-packages\flask\app.py", line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "C:\Python39\lib\site-packages\flask\_compat.py", line 39, in reraise
    raise value
  File "C:\Python39\lib\site-packages\flask\app.py", line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Python39\lib\site-packages\flask\app.py", line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "C:\Python39\lib\site-packages\flask_cors\decorator.py", line 128, in wrapped_function
    resp = make_response(f(*args, **kwargs))
  File "C:\Users\ishaa\Documents\GitHub\escapp\backend\app\apis\__init__.py", line 295, in upload_file
    img = Image.open(body.stream)
AttributeError: type object 'Image' has no attribute 'open'
2021-04-09 06:09:45,082 INFO werkzeug Thread-110 : 127.0.0.1 - - [09/Apr/2021 06:09:45] "[35m[1mPOST /upload_file HTTP/1.1[0m" 500 -
2021-04-09 06:09:45,370 INFO werkzeug Thread-111 : 127.0.0.1 - - [09/Apr/2021 06:09:45] "[37mOPTIONS /upload_photo_info HTTP/1.1[0m" 200 -
2021-04-09 06:09:47,763 INFO werkzeug Thread-113 : 127.0.0.1 - - [09/Apr/2021 06:09:47] "[35m[1mPOST /upload_photo_info HTTP/1.1[0m" 500 -
2021-04-09 06:13:20,114 INFO werkzeug Thread-115 : 127.0.0.1 - - [09/Apr/2021 06:13:20] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:13:37,967 INFO werkzeug Thread-116 : 127.0.0.1 - - [09/Apr/2021 06:13:37] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:13:39,416 INFO werkzeug Thread-117 : 127.0.0.1 - - [09/Apr/2021 06:13:39] "[37mOPTIONS /download_file HTTP/1.1[0m" 200 -
2021-04-09 06:13:39,735 DEBUG botocore.credentials Thread-119 : Looking for credentials via: env
2021-04-09 06:13:39,735 DEBUG botocore.credentials Thread-119 : Looking for credentials via: assume-role
2021-04-09 06:13:39,735 DEBUG botocore.credentials Thread-119 : Looking for credentials via: assume-role-with-web-identity
2021-04-09 06:13:39,735 DEBUG botocore.credentials Thread-119 : Looking for credentials via: sso
2021-04-09 06:13:39,736 DEBUG botocore.credentials Thread-119 : Looking for credentials via: shared-credentials-file
2021-04-09 06:13:39,736 DEBUG botocore.credentials Thread-119 : Looking for credentials via: custom-process
2021-04-09 06:13:39,736 DEBUG botocore.credentials Thread-119 : Looking for credentials via: config-file
2021-04-09 06:13:39,736 DEBUG botocore.credentials Thread-119 : Looking for credentials via: ec2-credentials-file
2021-04-09 06:13:39,736 DEBUG botocore.credentials Thread-119 : Looking for credentials via: boto-config
2021-04-09 06:13:39,736 DEBUG botocore.credentials Thread-119 : Looking for credentials via: container-role
2021-04-09 06:13:39,736 DEBUG botocore.credentials Thread-119 : Looking for credentials via: iam-role
2021-04-09 06:13:39,736 DEBUG urllib3.connectionpool Thread-119 : Starting new HTTP connection (5): 169.254.169.254:80
2021-04-09 06:13:39,737 DEBUG botocore.utils Thread-119 : Caught retryable HTTP exception while making metadata service request to http://169.254.169.254/latest/api/token: Could not connect to the endpoint URL: "http://169.254.169.254/latest/api/token"
Traceback (most recent call last):
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 159, in _new_conn
    conn = connection.create_connection(
  File "C:\Python39\lib\site-packages\urllib3\util\connection.py", line 84, in create_connection
    raise err
  File "C:\Python39\lib\site-packages\urllib3\util\connection.py", line 74, in create_connection
    sock.connect(sa)
OSError: [WinError 10051] A socket operation was attempted to an unreachable network

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\httpsession.py", line 311, in send
    urllib_response = conn.urlopen(
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 726, in urlopen
    retries = retries.increment(
  File "C:\Python39\lib\site-packages\urllib3\util\retry.py", line 386, in increment
    raise six.reraise(type(error), error, _stacktrace)
  File "C:\Python39\lib\site-packages\urllib3\packages\six.py", line 735, in reraise
    raise value
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 670, in urlopen
    httplib_response = self._make_request(
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 392, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Python39\lib\http\client.py", line 1255, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 92, in _send_request
    rval = super(AWSConnection, self)._send_request(
  File "C:\Python39\lib\http\client.py", line 1301, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Python39\lib\http\client.py", line 1250, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 120, in _send_output
    self.send(msg)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 204, in send
    return super(AWSConnection, self).send(str)
  File "C:\Python39\lib\http\client.py", line 950, in send
    self.connect()
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 187, in connect
    conn = self._new_conn()
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 171, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x000002CBD291C310>: Failed to establish a new connection: [WinError 10051] A socket operation was attempted to an unreachable network

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\utils.py", line 377, in _fetch_metadata_token
    response = self._session.send(request.prepare())
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\httpsession.py", line 340, in send
    raise EndpointConnectionError(endpoint_url=request.url, error=e)
botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://169.254.169.254/latest/api/token"
2021-04-09 06:13:39,738 DEBUG urllib3.connectionpool Thread-119 : Starting new HTTP connection (6): 169.254.169.254:80
2021-04-09 06:13:39,761 DEBUG botocore.utils Thread-119 : Caught retryable HTTP exception while making metadata service request to http://169.254.169.254/latest/meta-data/iam/security-credentials/: Could not connect to the endpoint URL: "http://169.254.169.254/latest/meta-data/iam/security-credentials/"
Traceback (most recent call last):
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 159, in _new_conn
    conn = connection.create_connection(
  File "C:\Python39\lib\site-packages\urllib3\util\connection.py", line 84, in create_connection
    raise err
  File "C:\Python39\lib\site-packages\urllib3\util\connection.py", line 74, in create_connection
    sock.connect(sa)
OSError: [WinError 10051] A socket operation was attempted to an unreachable network

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\httpsession.py", line 311, in send
    urllib_response = conn.urlopen(
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 726, in urlopen
    retries = retries.increment(
  File "C:\Python39\lib\site-packages\urllib3\util\retry.py", line 386, in increment
    raise six.reraise(type(error), error, _stacktrace)
  File "C:\Python39\lib\site-packages\urllib3\packages\six.py", line 735, in reraise
    raise value
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 670, in urlopen
    httplib_response = self._make_request(
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 392, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Python39\lib\http\client.py", line 1255, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 92, in _send_request
    rval = super(AWSConnection, self)._send_request(
  File "C:\Python39\lib\http\client.py", line 1301, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Python39\lib\http\client.py", line 1250, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 120, in _send_output
    self.send(msg)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 204, in send
    return super(AWSConnection, self).send(str)
  File "C:\Python39\lib\http\client.py", line 950, in send
    self.connect()
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 187, in connect
    conn = self._new_conn()
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 171, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x000002CBD2923370>: Failed to establish a new connection: [WinError 10051] A socket operation was attempted to an unreachable network

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\utils.py", line 425, in _get_request
    response = self._session.send(request.prepare())
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\httpsession.py", line 340, in send
    raise EndpointConnectionError(endpoint_url=request.url, error=e)
botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://169.254.169.254/latest/meta-data/iam/security-credentials/"
2021-04-09 06:13:39,761 DEBUG botocore.utils Thread-119 : Max number of attempts exceeded (1) when attempting to retrieve data from metadata service.
2021-04-09 06:13:39,762 DEBUG botocore.hooks Thread-119 : Event choose-service-name: calling handler <function handle_service_name_alias at 0x000002CBC0F0F9D0>
2021-04-09 06:13:39,762 DEBUG botocore.hooks Thread-119 : Event creating-client-class.s3: calling handler <function add_generate_presigned_post at 0x000002CBC0EC04C0>
2021-04-09 06:13:39,762 DEBUG botocore.hooks Thread-119 : Event creating-client-class.s3: calling handler <function lazy_call.<locals>._handler at 0x000002CBD210CB80>
2021-04-09 06:13:39,763 DEBUG botocore.hooks Thread-119 : Event creating-client-class.s3: calling handler <function add_generate_presigned_url at 0x000002CBC0EC0280>
2021-04-09 06:13:39,764 DEBUG botocore.endpoint Thread-119 : Setting s3 timeout as (60, 60)
2021-04-09 06:13:39,764 DEBUG botocore.client Thread-119 : Registering retry handlers for service: s3
2021-04-09 06:13:39,765 DEBUG botocore.hooks Thread-119 : Event before-parameter-build.s3.ListObjects: calling handler <function set_list_objects_encoding_type_url at 0x000002CBC0F2F5E0>
2021-04-09 06:13:39,765 DEBUG botocore.hooks Thread-119 : Event before-parameter-build.s3.ListObjects: calling handler <function validate_bucket_name at 0x000002CBC0F2E310>
2021-04-09 06:13:39,765 DEBUG botocore.hooks Thread-119 : Event before-parameter-build.s3.ListObjects: calling handler <bound method S3RegionRedirector.redirect_from_cache of <botocore.utils.S3RegionRedirector object at 0x000002CBD25D50D0>>
2021-04-09 06:13:39,765 DEBUG botocore.hooks Thread-119 : Event before-parameter-build.s3.ListObjects: calling handler <bound method S3ArnParamHandler.handle_arn of <botocore.utils.S3ArnParamHandler object at 0x000002CBD25D5100>>
2021-04-09 06:13:39,765 DEBUG botocore.hooks Thread-119 : Event before-parameter-build.s3.ListObjects: calling handler <function generate_idempotent_uuid at 0x000002CBC0F2E160>
2021-04-09 06:13:39,765 DEBUG botocore.hooks Thread-119 : Event before-call.s3.ListObjects: calling handler <function add_expect_header at 0x000002CBC0F2E670>
2021-04-09 06:13:39,765 DEBUG botocore.hooks Thread-119 : Event before-call.s3.ListObjects: calling handler <bound method S3RegionRedirector.set_request_url of <botocore.utils.S3RegionRedirector object at 0x000002CBD25D50D0>>
2021-04-09 06:13:39,765 DEBUG botocore.hooks Thread-119 : Event before-call.s3.ListObjects: calling handler <function inject_api_version_header_if_needed at 0x000002CBC0F2F9D0>
2021-04-09 06:13:39,765 DEBUG botocore.endpoint Thread-119 : Making request for OperationModel(name=ListObjects) with params: {'url_path': '/escapp-bucket-dev', 'query_string': {'encoding-type': 'url'}, 'method': 'GET', 'headers': {'User-Agent': 'Boto3/1.17.18 Python/3.9.1 Windows/10 Botocore/1.20.18'}, 'body': b'', 'url': 'https://s3.amazonaws.com/escapp-bucket-dev?encoding-type=url', 'context': {'client_region': 'us-east-1', 'client_config': <botocore.config.Config object at 0x000002CBD25AC940>, 'has_streaming_input': False, 'auth_type': None, 'encoding_type_auto_set': True, 'signing': {'bucket': 'escapp-bucket-dev'}}}
2021-04-09 06:13:39,766 DEBUG botocore.hooks Thread-119 : Event request-created.s3.ListObjects: calling handler <bound method RequestSigner.handler of <botocore.signers.RequestSigner object at 0x000002CBD25ACA30>>
2021-04-09 06:13:39,766 DEBUG botocore.hooks Thread-119 : Event choose-signer.s3.ListObjects: calling handler <bound method ClientCreator._default_s3_presign_to_sigv2 of <botocore.client.ClientCreator object at 0x000002CBD291CE80>>
2021-04-09 06:13:39,766 DEBUG botocore.hooks Thread-119 : Event choose-signer.s3.ListObjects: calling handler <function set_operation_specific_signer at 0x000002CBC0F2E040>
2021-04-09 06:13:39,766 DEBUG botocore.hooks Thread-119 : Event before-sign.s3.ListObjects: calling handler <bound method S3EndpointSetter.set_endpoint of <botocore.utils.S3EndpointSetter object at 0x000002CBD25D51F0>>
2021-04-09 06:13:39,766 DEBUG botocore.utils Thread-119 : Defaulting to S3 virtual host style addressing with path style addressing fallback.
2021-04-09 06:13:39,766 DEBUG botocore.utils Thread-119 : Checking for DNS compatible bucket for: https://s3.amazonaws.com/escapp-bucket-dev?encoding-type=url
2021-04-09 06:13:39,766 DEBUG botocore.utils Thread-119 : URI updated to: https://escapp-bucket-dev.s3.amazonaws.com/?encoding-type=url
2021-04-09 06:13:39,792 INFO werkzeug Thread-119 : 127.0.0.1 - - [09/Apr/2021 06:13:39] "[35m[1mPOST /download_file HTTP/1.1[0m" 500 -
2021-04-09 06:13:40,765 DEBUG botocore.credentials Thread-120 : Looking for credentials via: env
2021-04-09 06:13:40,765 DEBUG botocore.credentials Thread-120 : Looking for credentials via: assume-role
2021-04-09 06:13:40,765 DEBUG botocore.credentials Thread-120 : Looking for credentials via: assume-role-with-web-identity
2021-04-09 06:13:40,765 DEBUG botocore.credentials Thread-120 : Looking for credentials via: sso
2021-04-09 06:13:40,765 DEBUG botocore.credentials Thread-120 : Looking for credentials via: shared-credentials-file
2021-04-09 06:13:40,766 DEBUG botocore.credentials Thread-120 : Looking for credentials via: custom-process
2021-04-09 06:13:40,766 DEBUG botocore.credentials Thread-120 : Looking for credentials via: config-file
2021-04-09 06:13:40,766 DEBUG botocore.credentials Thread-120 : Looking for credentials via: ec2-credentials-file
2021-04-09 06:13:40,766 DEBUG botocore.credentials Thread-120 : Looking for credentials via: boto-config
2021-04-09 06:13:40,766 DEBUG botocore.credentials Thread-120 : Looking for credentials via: container-role
2021-04-09 06:13:40,766 DEBUG botocore.credentials Thread-120 : Looking for credentials via: iam-role
2021-04-09 06:13:40,766 DEBUG urllib3.connectionpool Thread-120 : Starting new HTTP connection (7): 169.254.169.254:80
2021-04-09 06:13:40,778 DEBUG botocore.utils Thread-120 : Caught retryable HTTP exception while making metadata service request to http://169.254.169.254/latest/api/token: Could not connect to the endpoint URL: "http://169.254.169.254/latest/api/token"
Traceback (most recent call last):
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 159, in _new_conn
    conn = connection.create_connection(
  File "C:\Python39\lib\site-packages\urllib3\util\connection.py", line 84, in create_connection
    raise err
  File "C:\Python39\lib\site-packages\urllib3\util\connection.py", line 74, in create_connection
    sock.connect(sa)
OSError: [WinError 10051] A socket operation was attempted to an unreachable network

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\httpsession.py", line 311, in send
    urllib_response = conn.urlopen(
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 726, in urlopen
    retries = retries.increment(
  File "C:\Python39\lib\site-packages\urllib3\util\retry.py", line 386, in increment
    raise six.reraise(type(error), error, _stacktrace)
  File "C:\Python39\lib\site-packages\urllib3\packages\six.py", line 735, in reraise
    raise value
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 670, in urlopen
    httplib_response = self._make_request(
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 392, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Python39\lib\http\client.py", line 1255, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 92, in _send_request
    rval = super(AWSConnection, self)._send_request(
  File "C:\Python39\lib\http\client.py", line 1301, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Python39\lib\http\client.py", line 1250, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 120, in _send_output
    self.send(msg)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 204, in send
    return super(AWSConnection, self).send(str)
  File "C:\Python39\lib\http\client.py", line 950, in send
    self.connect()
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 187, in connect
    conn = self._new_conn()
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 171, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x000002CBD25AC1C0>: Failed to establish a new connection: [WinError 10051] A socket operation was attempted to an unreachable network

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\utils.py", line 377, in _fetch_metadata_token
    response = self._session.send(request.prepare())
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\httpsession.py", line 340, in send
    raise EndpointConnectionError(endpoint_url=request.url, error=e)
botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://169.254.169.254/latest/api/token"
2021-04-09 06:13:40,778 DEBUG urllib3.connectionpool Thread-120 : Starting new HTTP connection (8): 169.254.169.254:80
2021-04-09 06:13:40,794 DEBUG botocore.utils Thread-120 : Caught retryable HTTP exception while making metadata service request to http://169.254.169.254/latest/meta-data/iam/security-credentials/: Could not connect to the endpoint URL: "http://169.254.169.254/latest/meta-data/iam/security-credentials/"
Traceback (most recent call last):
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 159, in _new_conn
    conn = connection.create_connection(
  File "C:\Python39\lib\site-packages\urllib3\util\connection.py", line 84, in create_connection
    raise err
  File "C:\Python39\lib\site-packages\urllib3\util\connection.py", line 74, in create_connection
    sock.connect(sa)
OSError: [WinError 10051] A socket operation was attempted to an unreachable network

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\httpsession.py", line 311, in send
    urllib_response = conn.urlopen(
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 726, in urlopen
    retries = retries.increment(
  File "C:\Python39\lib\site-packages\urllib3\util\retry.py", line 386, in increment
    raise six.reraise(type(error), error, _stacktrace)
  File "C:\Python39\lib\site-packages\urllib3\packages\six.py", line 735, in reraise
    raise value
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 670, in urlopen
    httplib_response = self._make_request(
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 392, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Python39\lib\http\client.py", line 1255, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 92, in _send_request
    rval = super(AWSConnection, self)._send_request(
  File "C:\Python39\lib\http\client.py", line 1301, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Python39\lib\http\client.py", line 1250, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 120, in _send_output
    self.send(msg)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 204, in send
    return super(AWSConnection, self).send(str)
  File "C:\Python39\lib\http\client.py", line 950, in send
    self.connect()
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 187, in connect
    conn = self._new_conn()
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 171, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x000002CBD25AC8E0>: Failed to establish a new connection: [WinError 10051] A socket operation was attempted to an unreachable network

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\utils.py", line 425, in _get_request
    response = self._session.send(request.prepare())
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\httpsession.py", line 340, in send
    raise EndpointConnectionError(endpoint_url=request.url, error=e)
botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://169.254.169.254/latest/meta-data/iam/security-credentials/"
2021-04-09 06:13:40,794 DEBUG botocore.utils Thread-120 : Max number of attempts exceeded (1) when attempting to retrieve data from metadata service.
2021-04-09 06:13:40,794 DEBUG botocore.hooks Thread-120 : Event choose-service-name: calling handler <function handle_service_name_alias at 0x000002CBC0F0F9D0>
2021-04-09 06:13:40,795 DEBUG botocore.hooks Thread-120 : Event creating-client-class.s3: calling handler <function add_generate_presigned_post at 0x000002CBC0EC04C0>
2021-04-09 06:13:40,795 DEBUG botocore.hooks Thread-120 : Event creating-client-class.s3: calling handler <function lazy_call.<locals>._handler at 0x000002CBD210CB80>
2021-04-09 06:13:40,795 DEBUG botocore.hooks Thread-120 : Event creating-client-class.s3: calling handler <function add_generate_presigned_url at 0x000002CBC0EC0280>
2021-04-09 06:13:40,796 DEBUG botocore.endpoint Thread-120 : Setting s3 timeout as (60, 60)
2021-04-09 06:13:40,796 DEBUG botocore.client Thread-120 : Registering retry handlers for service: s3
2021-04-09 06:13:40,797 DEBUG botocore.hooks Thread-120 : Event before-parameter-build.s3.ListObjects: calling handler <function set_list_objects_encoding_type_url at 0x000002CBC0F2F5E0>
2021-04-09 06:13:40,797 DEBUG botocore.hooks Thread-120 : Event before-parameter-build.s3.ListObjects: calling handler <function validate_bucket_name at 0x000002CBC0F2E310>
2021-04-09 06:13:40,797 DEBUG botocore.hooks Thread-120 : Event before-parameter-build.s3.ListObjects: calling handler <bound method S3RegionRedirector.redirect_from_cache of <botocore.utils.S3RegionRedirector object at 0x000002CBD2975E50>>
2021-04-09 06:13:40,797 DEBUG botocore.hooks Thread-120 : Event before-parameter-build.s3.ListObjects: calling handler <bound method S3ArnParamHandler.handle_arn of <botocore.utils.S3ArnParamHandler object at 0x000002CBD2975E80>>
2021-04-09 06:13:40,797 DEBUG botocore.hooks Thread-120 : Event before-parameter-build.s3.ListObjects: calling handler <function generate_idempotent_uuid at 0x000002CBC0F2E160>
2021-04-09 06:13:40,798 DEBUG botocore.hooks Thread-120 : Event before-call.s3.ListObjects: calling handler <function add_expect_header at 0x000002CBC0F2E670>
2021-04-09 06:13:40,798 DEBUG botocore.hooks Thread-120 : Event before-call.s3.ListObjects: calling handler <bound method S3RegionRedirector.set_request_url of <botocore.utils.S3RegionRedirector object at 0x000002CBD2975E50>>
2021-04-09 06:13:40,798 DEBUG botocore.hooks Thread-120 : Event before-call.s3.ListObjects: calling handler <function inject_api_version_header_if_needed at 0x000002CBC0F2F9D0>
2021-04-09 06:13:40,798 DEBUG botocore.endpoint Thread-120 : Making request for OperationModel(name=ListObjects) with params: {'url_path': '/escapp-bucket-dev-tenant', 'query_string': {'encoding-type': 'url'}, 'method': 'GET', 'headers': {'User-Agent': 'Boto3/1.17.18 Python/3.9.1 Windows/10 Botocore/1.20.18'}, 'body': b'', 'url': 'https://s3.amazonaws.com/escapp-bucket-dev-tenant?encoding-type=url', 'context': {'client_region': 'us-east-1', 'client_config': <botocore.config.Config object at 0x000002CBD2975370>, 'has_streaming_input': False, 'auth_type': None, 'encoding_type_auto_set': True, 'signing': {'bucket': 'escapp-bucket-dev-tenant'}}}
2021-04-09 06:13:40,798 DEBUG botocore.hooks Thread-120 : Event request-created.s3.ListObjects: calling handler <bound method RequestSigner.handler of <botocore.signers.RequestSigner object at 0x000002CBD2975250>>
2021-04-09 06:13:40,798 DEBUG botocore.hooks Thread-120 : Event choose-signer.s3.ListObjects: calling handler <bound method ClientCreator._default_s3_presign_to_sigv2 of <botocore.client.ClientCreator object at 0x000002CBD25AC580>>
2021-04-09 06:13:40,798 DEBUG botocore.hooks Thread-120 : Event choose-signer.s3.ListObjects: calling handler <function set_operation_specific_signer at 0x000002CBC0F2E040>
2021-04-09 06:13:40,798 DEBUG botocore.hooks Thread-120 : Event before-sign.s3.ListObjects: calling handler <bound method S3EndpointSetter.set_endpoint of <botocore.utils.S3EndpointSetter object at 0x000002CBD2975F40>>
2021-04-09 06:13:40,798 DEBUG botocore.utils Thread-120 : Defaulting to S3 virtual host style addressing with path style addressing fallback.
2021-04-09 06:13:40,799 DEBUG botocore.utils Thread-120 : Checking for DNS compatible bucket for: https://s3.amazonaws.com/escapp-bucket-dev-tenant?encoding-type=url
2021-04-09 06:13:40,799 DEBUG botocore.utils Thread-120 : URI updated to: https://escapp-bucket-dev-tenant.s3.amazonaws.com/?encoding-type=url
2021-04-09 06:13:40,821 INFO werkzeug Thread-120 : 127.0.0.1 - - [09/Apr/2021 06:13:40] "[35m[1mPOST /download_file HTTP/1.1[0m" 500 -
2021-04-09 06:13:43,037 DEBUG botocore.credentials Thread-121 : Looking for credentials via: env
2021-04-09 06:13:43,037 DEBUG botocore.credentials Thread-121 : Looking for credentials via: assume-role
2021-04-09 06:13:43,037 DEBUG botocore.credentials Thread-121 : Looking for credentials via: assume-role-with-web-identity
2021-04-09 06:13:43,037 DEBUG botocore.credentials Thread-121 : Looking for credentials via: sso
2021-04-09 06:13:43,037 DEBUG botocore.credentials Thread-121 : Looking for credentials via: shared-credentials-file
2021-04-09 06:13:43,037 DEBUG botocore.credentials Thread-121 : Looking for credentials via: custom-process
2021-04-09 06:13:43,037 DEBUG botocore.credentials Thread-121 : Looking for credentials via: config-file
2021-04-09 06:13:43,037 DEBUG botocore.credentials Thread-121 : Looking for credentials via: ec2-credentials-file
2021-04-09 06:13:43,038 DEBUG botocore.credentials Thread-121 : Looking for credentials via: boto-config
2021-04-09 06:13:43,038 DEBUG botocore.credentials Thread-121 : Looking for credentials via: container-role
2021-04-09 06:13:43,038 DEBUG botocore.credentials Thread-121 : Looking for credentials via: iam-role
2021-04-09 06:13:43,038 DEBUG urllib3.connectionpool Thread-121 : Starting new HTTP connection (9): 169.254.169.254:80
2021-04-09 06:13:43,062 DEBUG botocore.utils Thread-121 : Caught retryable HTTP exception while making metadata service request to http://169.254.169.254/latest/api/token: Could not connect to the endpoint URL: "http://169.254.169.254/latest/api/token"
Traceback (most recent call last):
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 159, in _new_conn
    conn = connection.create_connection(
  File "C:\Python39\lib\site-packages\urllib3\util\connection.py", line 84, in create_connection
    raise err
  File "C:\Python39\lib\site-packages\urllib3\util\connection.py", line 74, in create_connection
    sock.connect(sa)
OSError: [WinError 10051] A socket operation was attempted to an unreachable network

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\httpsession.py", line 311, in send
    urllib_response = conn.urlopen(
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 726, in urlopen
    retries = retries.increment(
  File "C:\Python39\lib\site-packages\urllib3\util\retry.py", line 386, in increment
    raise six.reraise(type(error), error, _stacktrace)
  File "C:\Python39\lib\site-packages\urllib3\packages\six.py", line 735, in reraise
    raise value
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 670, in urlopen
    httplib_response = self._make_request(
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 392, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Python39\lib\http\client.py", line 1255, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 92, in _send_request
    rval = super(AWSConnection, self)._send_request(
  File "C:\Python39\lib\http\client.py", line 1301, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Python39\lib\http\client.py", line 1250, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 120, in _send_output
    self.send(msg)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 204, in send
    return super(AWSConnection, self).send(str)
  File "C:\Python39\lib\http\client.py", line 950, in send
    self.connect()
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 187, in connect
    conn = self._new_conn()
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 171, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x000002CBD2975AF0>: Failed to establish a new connection: [WinError 10051] A socket operation was attempted to an unreachable network

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\utils.py", line 377, in _fetch_metadata_token
    response = self._session.send(request.prepare())
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\httpsession.py", line 340, in send
    raise EndpointConnectionError(endpoint_url=request.url, error=e)
botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://169.254.169.254/latest/api/token"
2021-04-09 06:13:43,062 DEBUG urllib3.connectionpool Thread-121 : Starting new HTTP connection (10): 169.254.169.254:80
2021-04-09 06:13:43,062 DEBUG botocore.utils Thread-121 : Caught retryable HTTP exception while making metadata service request to http://169.254.169.254/latest/meta-data/iam/security-credentials/: Could not connect to the endpoint URL: "http://169.254.169.254/latest/meta-data/iam/security-credentials/"
Traceback (most recent call last):
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 159, in _new_conn
    conn = connection.create_connection(
  File "C:\Python39\lib\site-packages\urllib3\util\connection.py", line 84, in create_connection
    raise err
  File "C:\Python39\lib\site-packages\urllib3\util\connection.py", line 74, in create_connection
    sock.connect(sa)
OSError: [WinError 10051] A socket operation was attempted to an unreachable network

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\httpsession.py", line 311, in send
    urllib_response = conn.urlopen(
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 726, in urlopen
    retries = retries.increment(
  File "C:\Python39\lib\site-packages\urllib3\util\retry.py", line 386, in increment
    raise six.reraise(type(error), error, _stacktrace)
  File "C:\Python39\lib\site-packages\urllib3\packages\six.py", line 735, in reraise
    raise value
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 670, in urlopen
    httplib_response = self._make_request(
  File "C:\Python39\lib\site-packages\urllib3\connectionpool.py", line 392, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "C:\Python39\lib\http\client.py", line 1255, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 92, in _send_request
    rval = super(AWSConnection, self)._send_request(
  File "C:\Python39\lib\http\client.py", line 1301, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "C:\Python39\lib\http\client.py", line 1250, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 120, in _send_output
    self.send(msg)
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\awsrequest.py", line 204, in send
    return super(AWSConnection, self).send(str)
  File "C:\Python39\lib\http\client.py", line 950, in send
    self.connect()
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 187, in connect
    conn = self._new_conn()
  File "C:\Python39\lib\site-packages\urllib3\connection.py", line 171, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x000002CBD2975520>: Failed to establish a new connection: [WinError 10051] A socket operation was attempted to an unreachable network

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\utils.py", line 425, in _get_request
    response = self._session.send(request.prepare())
  File "C:\Users\ishaa\AppData\Roaming\Python\Python39\site-packages\botocore\httpsession.py", line 340, in send
    raise EndpointConnectionError(endpoint_url=request.url, error=e)
botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://169.254.169.254/latest/meta-data/iam/security-credentials/"
2021-04-09 06:13:43,063 DEBUG botocore.utils Thread-121 : Max number of attempts exceeded (1) when attempting to retrieve data from metadata service.
2021-04-09 06:13:43,063 DEBUG botocore.hooks Thread-121 : Event choose-service-name: calling handler <function handle_service_name_alias at 0x000002CBC0F0F9D0>
2021-04-09 06:13:43,064 DEBUG botocore.hooks Thread-121 : Event creating-client-class.s3: calling handler <function add_generate_presigned_post at 0x000002CBC0EC04C0>
2021-04-09 06:13:43,064 DEBUG botocore.hooks Thread-121 : Event creating-client-class.s3: calling handler <function lazy_call.<locals>._handler at 0x000002CBD210CB80>
2021-04-09 06:13:43,064 DEBUG botocore.hooks Thread-121 : Event creating-client-class.s3: calling handler <function add_generate_presigned_url at 0x000002CBC0EC0280>
2021-04-09 06:13:43,065 DEBUG botocore.endpoint Thread-121 : Setting s3 timeout as (60, 60)
2021-04-09 06:13:43,067 DEBUG botocore.client Thread-121 : Registering retry handlers for service: s3
2021-04-09 06:13:43,067 DEBUG botocore.hooks Thread-121 : Event before-parameter-build.s3.ListObjects: calling handler <function set_list_objects_encoding_type_url at 0x000002CBC0F2F5E0>
2021-04-09 06:13:43,067 DEBUG botocore.hooks Thread-121 : Event before-parameter-build.s3.ListObjects: calling handler <function validate_bucket_name at 0x000002CBC0F2E310>
2021-04-09 06:13:43,067 DEBUG botocore.hooks Thread-121 : Event before-parameter-build.s3.ListObjects: calling handler <bound method S3RegionRedirector.redirect_from_cache of <botocore.utils.S3RegionRedirector object at 0x000002CBD29ADEB0>>
2021-04-09 06:13:43,067 DEBUG botocore.hooks Thread-121 : Event before-parameter-build.s3.ListObjects: calling handler <bound method S3ArnParamHandler.handle_arn of <botocore.utils.S3ArnParamHandler object at 0x000002CBD29ADEE0>>
2021-04-09 06:13:43,067 DEBUG botocore.hooks Thread-121 : Event before-parameter-build.s3.ListObjects: calling handler <function generate_idempotent_uuid at 0x000002CBC0F2E160>
2021-04-09 06:13:43,067 DEBUG botocore.hooks Thread-121 : Event before-call.s3.ListObjects: calling handler <function add_expect_header at 0x000002CBC0F2E670>
2021-04-09 06:13:43,067 DEBUG botocore.hooks Thread-121 : Event before-call.s3.ListObjects: calling handler <bound method S3RegionRedirector.set_request_url of <botocore.utils.S3RegionRedirector object at 0x000002CBD29ADEB0>>
2021-04-09 06:13:43,067 DEBUG botocore.hooks Thread-121 : Event before-call.s3.ListObjects: calling handler <function inject_api_version_header_if_needed at 0x000002CBC0F2F9D0>
2021-04-09 06:13:43,067 DEBUG botocore.endpoint Thread-121 : Making request for OperationModel(name=ListObjects) with params: {'url_path': '/escapp-bucket-dev', 'query_string': {'encoding-type': 'url'}, 'method': 'GET', 'headers': {'User-Agent': 'Boto3/1.17.18 Python/3.9.1 Windows/10 Botocore/1.20.18'}, 'body': b'', 'url': 'https://s3.amazonaws.com/escapp-bucket-dev?encoding-type=url', 'context': {'client_region': 'us-east-1', 'client_config': <botocore.config.Config object at 0x000002CBD29AD400>, 'has_streaming_input': False, 'auth_type': None, 'encoding_type_auto_set': True, 'signing': {'bucket': 'escapp-bucket-dev'}}}
2021-04-09 06:13:43,068 DEBUG botocore.hooks Thread-121 : Event request-created.s3.ListObjects: calling handler <bound method RequestSigner.handler of <botocore.signers.RequestSigner object at 0x000002CBD29AD370>>
2021-04-09 06:13:43,068 DEBUG botocore.hooks Thread-121 : Event choose-signer.s3.ListObjects: calling handler <bound method ClientCreator._default_s3_presign_to_sigv2 of <botocore.client.ClientCreator object at 0x000002CBD2975DF0>>
2021-04-09 06:13:43,068 DEBUG botocore.hooks Thread-121 : Event choose-signer.s3.ListObjects: calling handler <function set_operation_specific_signer at 0x000002CBC0F2E040>
2021-04-09 06:13:43,068 DEBUG botocore.hooks Thread-121 : Event before-sign.s3.ListObjects: calling handler <bound method S3EndpointSetter.set_endpoint of <botocore.utils.S3EndpointSetter object at 0x000002CBD29ADFA0>>
2021-04-09 06:13:43,068 DEBUG botocore.utils Thread-121 : Defaulting to S3 virtual host style addressing with path style addressing fallback.
2021-04-09 06:13:43,068 DEBUG botocore.utils Thread-121 : Checking for DNS compatible bucket for: https://s3.amazonaws.com/escapp-bucket-dev?encoding-type=url
2021-04-09 06:13:43,068 DEBUG botocore.utils Thread-121 : URI updated to: https://escapp-bucket-dev.s3.amazonaws.com/?encoding-type=url
2021-04-09 06:13:43,090 INFO werkzeug Thread-121 : 127.0.0.1 - - [09/Apr/2021 06:13:43] "[35m[1mPOST /download_file HTTP/1.1[0m" 500 -
2021-04-09 06:13:51,302 INFO werkzeug Thread-122 : 127.0.0.1 - - [09/Apr/2021 06:13:51] "[37mGET /staff_get_photo_notification HTTP/1.1[0m" 200 -
2021-04-09 06:13:55,616 INFO werkzeug Thread-123 : 127.0.0.1 - - [09/Apr/2021 06:13:55] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:13:55,618 INFO werkzeug Thread-124 : 127.0.0.1 - - [09/Apr/2021 06:13:55] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 06:14:07,571 INFO werkzeug Thread-118 : 127.0.0.1 - - [09/Apr/2021 06:14:07] "[37mOPTIONS /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 06:14:07,571 INFO werkzeug Thread-125 : 127.0.0.1 - - [09/Apr/2021 06:14:07] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:14:07,885 INFO werkzeug Thread-127 : 127.0.0.1 - - [09/Apr/2021 06:14:07] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 06:14:07,889 INFO werkzeug Thread-126 : 127.0.0.1 - - [09/Apr/2021 06:14:07] "[37mGET /staff_list HTTP/1.1[0m" 200 -
2021-04-09 06:14:07,896 INFO werkzeug Thread-128 : 127.0.0.1 - - [09/Apr/2021 06:14:07] "[37mPOST /dashboard_data HTTP/1.1[0m" 200 -
2021-04-09 06:14:25,370 INFO werkzeug Thread-129 : 127.0.0.1 - - [09/Apr/2021 06:14:25] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:14:25,372 INFO werkzeug Thread-130 : 127.0.0.1 - - [09/Apr/2021 06:14:25] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 06:14:46,382 INFO werkzeug Thread-131 : 127.0.0.1 - - [09/Apr/2021 06:14:46] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:14:46,694 INFO werkzeug Thread-132 : 127.0.0.1 - - [09/Apr/2021 06:14:46] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 06:14:49,040 INFO werkzeug Thread-134 : 127.0.0.1 - - [09/Apr/2021 06:14:49] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 06:14:49,041 INFO werkzeug Thread-133 : 127.0.0.1 - - [09/Apr/2021 06:14:49] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:20:05,532 INFO werkzeug Thread-136 : 127.0.0.1 - - [09/Apr/2021 06:20:05] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:20:07,933 INFO werkzeug Thread-137 : 127.0.0.1 - - [09/Apr/2021 06:20:07] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:20:56,303 INFO werkzeug Thread-138 : 127.0.0.1 - - [09/Apr/2021 06:20:56] "[37mGET /staff_get_photo_notification HTTP/1.1[0m" 200 -
2021-04-09 06:24:05,882 INFO werkzeug Thread-140 : 127.0.0.1 - - [09/Apr/2021 06:24:05] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:24:07,696 INFO werkzeug Thread-141 : 127.0.0.1 - - [09/Apr/2021 06:24:07] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:24:11,047 INFO werkzeug Thread-142 : 127.0.0.1 - - [09/Apr/2021 06:24:11] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:24:11,049 INFO werkzeug Thread-143 : 127.0.0.1 - - [09/Apr/2021 06:24:11] "[37mGET /tenant_list HTTP/1.1[0m" 200 -
2021-04-09 06:24:32,822 INFO werkzeug Thread-145 : 127.0.0.1 - - [09/Apr/2021 06:24:32] "[33mGET /babel/parser/lib/index.js HTTP/1.1[0m" 404 -
2021-04-09 06:24:34,272 INFO werkzeug Thread-144 : 127.0.0.1 - - [09/Apr/2021 06:24:34] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:25:06,485 INFO werkzeug Thread-146 : 127.0.0.1 - - [09/Apr/2021 06:25:06] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:26:20,449 INFO werkzeug Thread-148 : 127.0.0.1 - - [09/Apr/2021 06:26:20] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:26:25,506 INFO werkzeug Thread-150 : 127.0.0.1 - - [09/Apr/2021 06:26:25] "[37mOPTIONS //download_data_csv HTTP/1.1[0m" 200 -
2021-04-09 06:26:25,511 INFO logger Thread-149 : admin selected table: User
2021-04-09 06:26:25,710 INFO werkzeug Thread-149 : 127.0.0.1 - - [09/Apr/2021 06:26:25] "[37mPOST //download_data_csv HTTP/1.1[0m" 200 -
2021-04-09 06:26:27,064 INFO werkzeug Thread-151 : 127.0.0.1 - - [09/Apr/2021 06:26:27] "[37mOPTIONS //display_data HTTP/1.1[0m" 200 -
2021-04-09 06:26:27,377 INFO logger Thread-152 : admin selected table: User
2021-04-09 06:26:27,386 INFO werkzeug Thread-152 : 127.0.0.1 - - [09/Apr/2021 06:26:27] "[37mPOST //display_data HTTP/1.1[0m" 200 -
2021-04-09 06:29:25,710 INFO werkzeug Thread-154 : 127.0.0.1 - - [09/Apr/2021 06:29:25] "[37mOPTIONS //display_data HTTP/1.1[0m" 200 -
2021-04-09 06:29:26,019 INFO logger Thread-156 : admin selected table: Photo
2021-04-09 06:29:26,027 INFO werkzeug Thread-156 : 127.0.0.1 - - [09/Apr/2021 06:29:26] "[37mPOST //display_data HTTP/1.1[0m" 200 -
2021-04-09 06:30:44,518 INFO werkzeug Thread-158 : 127.0.0.1 - - [09/Apr/2021 06:30:44] "[37mOPTIONS //display_data HTTP/1.1[0m" 200 -
2021-04-09 06:30:44,828 INFO logger Thread-160 : admin selected table: User
2021-04-09 06:30:44,836 INFO werkzeug Thread-160 : 127.0.0.1 - - [09/Apr/2021 06:30:44] "[37mPOST //display_data HTTP/1.1[0m" 200 -
2021-04-09 06:30:52,917 INFO werkzeug Thread-159 : 127.0.0.1 - - [09/Apr/2021 06:30:52] "[37mOPTIONS //display_data HTTP/1.1[0m" 200 -
2021-04-09 06:30:52,926 INFO logger Thread-161 : admin selected table: Photo
2021-04-09 06:30:52,934 INFO werkzeug Thread-161 : 127.0.0.1 - - [09/Apr/2021 06:30:52] "[37mPOST //display_data HTTP/1.1[0m" 200 -
2021-04-09 06:30:59,786 INFO werkzeug Thread-162 : 127.0.0.1 - - [09/Apr/2021 06:30:59] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
2021-04-09 06:31:04,201 INFO werkzeug Thread-164 : 127.0.0.1 - - [09/Apr/2021 06:31:04] "[37mOPTIONS //display_data HTTP/1.1[0m" 200 -
2021-04-09 06:31:04,206 INFO logger Thread-163 : admin selected table: Photo
2021-04-09 06:31:04,214 INFO werkzeug Thread-163 : 127.0.0.1 - - [09/Apr/2021 06:31:04] "[37mPOST //display_data HTTP/1.1[0m" 200 -
2021-04-09 06:33:35,128 INFO werkzeug Thread-166 : 127.0.0.1 - - [09/Apr/2021 06:33:35] "[37mGET /get_current_username_and_datetime HTTP/1.1[0m" 200 -
